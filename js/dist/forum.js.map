{"version":3,"sources":["webpack://@aradeid/flarum-references/webpack/bootstrap","webpack://@aradeid/flarum-references/external \"flarum.core.compat['common/utils/Stream']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['components/Button']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['components/Modal']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['app']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['common/components/Tooltip']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['common/utils/ItemList']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['common/extend']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['common/components/Button']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['common/utils/extractText']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['components/ComposerBody']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['common/components/Dropdown']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['common/helpers/icon']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['common/utils/styleSelectedText']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['common/components/TextEditor']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['common/helpers/listItems']\"","webpack://@aradeid/flarum-references/external \"flarum.core.compat['components/TextEditorButton']\"","webpack://@aradeid/flarum-references/./node_modules/orderedmap/index.es.js","webpack://@aradeid/flarum-references/../src/fragment.js","webpack://@aradeid/flarum-references/../src/diff.js","webpack://@aradeid/flarum-references/../src/comparedeep.js","webpack://@aradeid/flarum-references/../src/mark.js","webpack://@aradeid/flarum-references/../src/replace.js","webpack://@aradeid/flarum-references/../src/resolvedpos.js","webpack://@aradeid/flarum-references/../src/node.js","webpack://@aradeid/flarum-references/../src/content.js","webpack://@aradeid/flarum-references/../src/schema.js","webpack://@aradeid/flarum-references/../src/from_dom.js","webpack://@aradeid/flarum-references/../src/to_dom.js","webpack://@aradeid/flarum-references/../src/map.js","webpack://@aradeid/flarum-references/../src/transform.js","webpack://@aradeid/flarum-references/../src/step.js","webpack://@aradeid/flarum-references/../src/replace_step.js","webpack://@aradeid/flarum-references/../src/structure.js","webpack://@aradeid/flarum-references/../src/mark_step.js","webpack://@aradeid/flarum-references/../src/selection.js","webpack://@aradeid/flarum-references/../src/transaction.js","webpack://@aradeid/flarum-references/../src/state.js","webpack://@aradeid/flarum-references/../src/plugin.js","webpack://@aradeid/flarum-references/../src/commands.js","webpack://@aradeid/flarum-references/../src/inputrules.js","webpack://@aradeid/flarum-references/../src/rules.js","webpack://@aradeid/flarum-references/./node_modules/tiptap-utils/dist/utils.esm.js","webpack://@aradeid/flarum-references/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@aradeid/flarum-references/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@aradeid/flarum-references/./src/forum/InsertReferenceDropdown.js","webpack://@aradeid/flarum-references/./src/forum/components/DefaultRefModal.js","webpack://@aradeid/flarum-references/./src/forum/components/SiteRefModal.js","webpack://@aradeid/flarum-references/./src/forum/components/BookRefModal.js","webpack://@aradeid/flarum-references/./src/forum/components/NewsRefModal.js","webpack://@aradeid/flarum-references/./src/forum/components/JournalRefModal.js","webpack://@aradeid/flarum-references/./src/forum/components/ReferencesModal.js","webpack://@aradeid/flarum-references/./src/forum/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","OrderedMap","content","this","constructor","find","length","found","undefined","update","newKey","self","remove","slice","push","splice","addToStart","concat","addToEnd","addBefore","place","without","forEach","f","prepend","map","from","size","subtract","append","result","prop","orderedmap","Fragment","let","nodeSize","nodesBetween","to","nodeStart","parent","pos","child","end","start","Math","max","min","descendants","textBetween","blockSeparator","leafText","text","separated","node","isText","isLeaf","isBlock","other","last","lastChild","first","firstChild","sameMarkup","withText","cut","cutByIndex","empty","replaceChild","index","current","copy","eq","prototypeAccessors","childCount","RangeError","maybeChild","findDiffStart","a","b","childA","childB","j","inner","findDiffEnd","otherPos","posA","posB","iA","iB","same","minSize","findIndex","round","retIndex","curPos","toString","toStringInner","join","toJSON","fromJSON","schema","Array","isArray","nodeFromJSON","fromArray","array","joined","nodes","attrs","const","offset","compareDeep","Mark","type","ReplaceError","message","err","Error","__proto__","addToSet","set","placed","excludes","rank","removeFromSet","isInSet","obj","_","json","marks","sameSet","setFrom","none","sort","Slice","openStart","openEnd","replace","$from","$to","depth","replaceOuter","$along","extra","resolveNoCache","prepareSliceForReplace","close","replaceThreeWay","$start","$end","joinable","addRange","checkJoin","addNode","replaceTwoWay","parentOffset","main","sub","compatibleContent","$before","$after","target","startIndex","endIndex","textOffset","nodeAfter","nodeBefore","validContent","insertAt","fragment","insertInto","dist","insert","canReplace","removeBetween","removeRange","offsetTo","indexTo","maxOpen","openIsolating","spec","isolating","ResolvedPos","path","resolveDepth","val","doc","indexAfter","before","after","dOff","posAtIndex","tmp","inclusive","marksAcross","isInline","next","sharedDepth","blockRange","pred","inlineContent","NodeRange","sameParent","str","resolve","rem","resolveCached","resolveCache","cached","resolveCachePos","resolveCacheSize","prototypeAccessors$1","emptyAttrs","Node","startPos","textContent","hasMarkup","defaultAttrs","mark","includeParents","nodeAt","childAfter","childBefore","rangeHasMark","isTextblock","isAtom","toDebugString","wrapMarks","contentMatchAt","match","contentMatch","matchFragment","replacement","one","two","validEnd","allowsMarks","canReplaceWith","matchType","canAppend","check","markFromJSON","nodeType","TextNode","super","JSON","stringify","base","ContentMatch","wrapCache","parse","string","nodeTypes","stream","TokenStream","expr","parseExpr","nfa","labeled","explore","states","out","term","known","indexOf","nullFrom","state","cmp","dfa","connect","compile","exprs","reduce","loop","edge","cur","edges","work","dead","hasRequiredAttrs","checkForDeadEnds","frag","defaultType","compatible","fillBefore","toEnd","seen","search","types","finished","tp","createAndFill","findWrapping","computed","computeWrapping","active","via","shift","reverse","edgeCount","scan","inline","tokens","split","pop","parseExprSeq","eat","parseExprSubscript","test","typeName","groups","resolveName","parseExprAtom","parseExprRange","parseNum","Number","defaults","attrName","attr","hasDefault","computeAttrs","built","given","initAttrs","Attribute","tok","SyntaxError","NodeType","group","markSet","atom","whitespace","code","isRequired","createChecked","allowsMarkType","markType","allowedMarks","topType","topNode","options","MarkType","excluded","instance","Schema","contentExprCache","contentExpr","markExpr","gatherMarks","excl","topNodeType","wrappings","ok","DOMParser","rules","tags","styles","rule","tag","style","normalizeLists","some","dom","context","ParseContext","addAll","finish","parseSlice","matchTag","matches","namespace","namespaceURI","matchesContext","getAttrs","matchStyle","charCodeAt","schemaRules","priority","parseDOM","fromSchema","domParser","blockTags","address","article","aside","blockquote","canvas","dd","div","dl","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","li","noscript","ol","output","pre","section","table","tfoot","ul","ignoreTags","head","script","title","listTags","wsOptionsFor","preserveWhitespace","OPT_PRESERVE_WS","NodeContext","pendingMarks","solid","activeMarks","stashMarks","fill","wrap","exec","popFromStashMark","applyPending","nextType","pending","markMayApply","inlineContext","parentNode","nodeName","toLowerCase","parser","open","isOpen","topContext","topOptions","topMatch","findPositions","needsBlock","selector","msMatchesSelector","webkitMatchesSelector","mozMatchesSelector","v","top","addDOM","addTextNode","getAttribute","readStyles","re","trim","parseStyles","addPendingMark","addElement","removePendingMark","nodeValue","domNodeBefore","previousSibling","insertNode","findInText","findInside","matchAfter","ruleID","prevItem","nextSibling","appendChild","normalizeList","ruleFromNode","ignore","ignoreFallback","skip","closeParent","sync","oldNeedsBlock","leafFallback","addElementByRule","consuming","ownerDocument","createTextNode","findPlace","continueAfter","enter","startIn","getContent","contentDOM","contentElement","querySelector","findAround","childNodes","findAtPoint","route","cx","enterInner","block","textblockFromContext","closeExtra","preserveWS","topOpen","currentPos","contains","compareDocumentPosition","textNode","parts","option","useRoot","minDepth","part","$context","deflt","findSameMarkInSet","upto","level","lastIndexOf","stashMark","DOMSerializer","gatherToDOM","toDOM","document","window","serializeFragment","createDocumentFragment","keep","rendered","spanning","add","markDOM","serializeMark","serializeNodeInner","renderSpec","onContent","serializeNode","structure","xmlNS","tagName","space","createElementNS","createElement","setAttributeNS","setAttribute","innerContent","domSerializer","nodesFromSchema","marksFromSchema","factor16","pow","recoverIndex","MapResult","deleted","recover","StepMap","ranges","inverted","diff","recoverOffset","mapResult","assoc","_map","simple","oldIndex","newIndex","oldSize","newSize","touches","oldStart","newStart","invert","Mapping","maps","mirror","TransformError","appendMap","mirrors","setMirror","appendMapping","mapping","startSize","mirr","getMirror","appendMappingInverted","totalSize","inverse","corr","Transform","steps","docs","mustOverride","step","maybeStep","failed","apply","addStep","docChanged","getMap","stepsByID","Step","_doc","_mapping","merge","_other","stepType","jsonID","id","stepClass","StepResult","fail","fromReplace","e","ReplaceStep","contentBetween","ReplaceAroundStep","gapFrom","gapTo","gap","inserted","canCut","liftTarget","range","canSplit","typesAfter","$pos","innerType","rest","baseType","canJoin","mapFragment","mapped","lift","gapStart","gapEnd","splitting","wrappers","setBlockType","mapFrom","canChangeType","clearIncompatible","startM","endM","setNodeMarkup","newNode","replaceWith","typeAfter","AddMarkStep","oldSlice","RemoveMarkStep","replaceStep","fitsTrivially","Fitter","fit","addMark","removed","added","removing","adding","newSet","removeMark","matched","toRemove","parentType","delSteps","allowed","unplaced","frontier","dropFromFragment","count","addToFragment","contentAt","closeNodeStart","contentAfterFits","invalidMarks","closeFragment","oldOpen","newOpen","coveredDepths","findFittable","placeNodes","openMore","dropNode","moveInline","mustMoveInline","placedSize","pass","sliceDepth","frontierDepth","inject","openAtEnd","closeFrontierNode","openFrontierNode","taken","openEndCount","findCloseLevel","dropInner","move","replaceRange","deleteRange","targetDepths","preferredTarget","unshift","defining","preferredTargetIndex","leftNodes","preferredDepth","openDepth","targetDepth","expand","startSteps","replaceRangeWith","point","insertPoint","covered","classesById","Selection","$anchor","$head","SelectionRange","anchor","tr","lastNode","lastParent","selectionToInsertionEnd","findFrom","dir","textOnly","TextSelection","findSelectionIn","near","bias","AllSelection","atStart","atEnd","cls","selectionClass","getBookmark","between","visible","$cursor","ensureMarks","TextBookmark","dPos","NodeSelection","NodeBookmark","isSelectable","selectable","sel","selection","setSelection","AllBookmark","startLen","_from","_to","_newFrom","newTo","Transaction","time","Date","now","curSelection","curSelectionFor","storedMarks","updated","meta","selectionSet","setStoredMarks","addStoredMark","removeStoredMark","storedMarksSet","setTime","replaceSelection","replaceSelectionWith","inheritMarks","deleteSelection","insertText","setMeta","getMeta","isGeneric","scrollIntoView","scrolledIntoView","FieldDesc","desc","init","baseFields","config","_marks","_old","prev","Configuration","plugins","fields","pluginsByKey","plugin","EditorState","applyTransaction","filterTransaction","rootTr","transactions","trs","newState","applyInner","haveNew","appendTransaction","oldState","newInstance","field","applyListeners","$config","reconfigure","pluginFields","addApplyListener","removeApplyListener","Plugin","props","bindProps","Function","createKey","getState","keys","PluginKey","dispatch","textblockAt","side","only","findCutBefore","findCutAfter","defaultBlockAt","splitBlock","can","$first","deleteBarrier","$cut","conn","joinMaybeClear","canDelAfter","joinAt","selAfter","at","afterText","afterDepth","selectTextblockSide","selectTextblockStart","selectTextblockEnd","chainCommands","view","commands","backspace","endOfTextblock","delStep","del","pcBaseKeymap","above","macBaseKeymap","Home","End","baseKeymap","navigator","platform","os","InputRule","handler","cutOff","getMarkRange","link","endPos","_setPrototypeOf","setPrototypeOf","_inheritsLoose","subClass","superClass","Dropdown","DefaultRefModal","oninit","vnode","app","composer","allReferences","referenceId","Stream","className","translator","trans","placeholder","required","oninput","removeRedStyle","Button","component","onclick","addReference","requiredFields","$","k","validity","valid","removeAttribute","areSetRequiredFields","setProperty","date","extensions","editor","insertAtCursor","position","getSelectionRange","moveCursorTo","menuState","editorView","outerText","setEnter","getDate","getMonth","getFullYear","setSelectionRange","console","log","el","modal","Modal","SiteRefModal","author","createAt","siteName","bidi","pattern","BookRefModal","year","editura","NewsRefModal","JournalRefModal","ReferencesModal","show","class","initializers","ProseMirrorEditorDriver","proseMirror","extend","TextEditor","items","Tooltip","icon","ComposerBody","sidebarMenu","ItemList","children","listItems","toArray","CommentPost","baseUrl","forum","attribute","classList","href","startsWith","elements","separateId","addEventListener","preventDefault","reference","getElementById","behavior","element","querySelectorAll"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","module.exports = flarum.core.compat['common/utils/Stream'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['components/Modal'];","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['common/components/Tooltip'];","module.exports = flarum.core.compat['common/utils/ItemList'];","module.exports = flarum.core.compat['common/extend'];","module.exports = flarum.core.compat['common/components/Button'];","module.exports = flarum.core.compat['common/utils/extractText'];","module.exports = flarum.core.compat['components/ComposerBody'];","module.exports = flarum.core.compat['common/components/Dropdown'];","module.exports = flarum.core.compat['common/helpers/icon'];","module.exports = flarum.core.compat['common/utils/styleSelectedText'];","module.exports = flarum.core.compat['common/components/TextEditor'];","module.exports = flarum.core.compat['forum/components/CommentPost'];","module.exports = flarum.core.compat['common/helpers/listItems'];","module.exports = flarum.core.compat['components/TextEditorButton'];","// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n  this.content = content;\n}\n\nOrderedMap.prototype = {\n  constructor: OrderedMap,\n\n  find: function(key) {\n    for (var i = 0; i < this.content.length; i += 2)\n      if (this.content[i] === key) return i\n    return -1\n  },\n\n  // :: (string) → ?any\n  // Retrieve the value stored under `key`, or return undefined when\n  // no such key exists.\n  get: function(key) {\n    var found = this.find(key);\n    return found == -1 ? undefined : this.content[found + 1]\n  },\n\n  // :: (string, any, ?string) → OrderedMap\n  // Create a new map by replacing the value of `key` with a new\n  // value, or adding a binding to the end of the map. If `newKey` is\n  // given, the key of the binding will be replaced with that key.\n  update: function(key, value, newKey) {\n    var self = newKey && newKey != key ? this.remove(newKey) : this;\n    var found = self.find(key), content = self.content.slice();\n    if (found == -1) {\n      content.push(newKey || key, value);\n    } else {\n      content[found + 1] = value;\n      if (newKey) content[found] = newKey;\n    }\n    return new OrderedMap(content)\n  },\n\n  // :: (string) → OrderedMap\n  // Return a map with the given key removed, if it existed.\n  remove: function(key) {\n    var found = this.find(key);\n    if (found == -1) return this\n    var content = this.content.slice();\n    content.splice(found, 2);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the start of the map.\n  addToStart: function(key, value) {\n    return new OrderedMap([key, value].concat(this.remove(key).content))\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the end of the map.\n  addToEnd: function(key, value) {\n    var content = this.remove(key).content.slice();\n    content.push(key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, string, any) → OrderedMap\n  // Add a key after the given key. If `place` is not found, the new\n  // key is added to the end.\n  addBefore: function(place, key, value) {\n    var without = this.remove(key), content = without.content.slice();\n    var found = without.find(place);\n    content.splice(found == -1 ? content.length : found, 0, key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: ((key: string, value: any))\n  // Call the given function for each key/value pair in the map, in\n  // order.\n  forEach: function(f) {\n    for (var i = 0; i < this.content.length; i += 2)\n      f(this.content[i], this.content[i + 1]);\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by prepending the keys in this map that don't\n  // appear in `map` before the keys in `map`.\n  prepend: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(map.content.concat(this.subtract(map).content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by appending the keys in this map that don't\n  // appear in `map` after the keys in `map`.\n  append: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(this.subtract(map).content.concat(map.content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a map containing all the keys in this map that don't\n  // appear in `map`.\n  subtract: function(map) {\n    var result = this;\n    map = OrderedMap.from(map);\n    for (var i = 0; i < map.content.length; i += 2)\n      result = result.remove(map.content[i]);\n    return result\n  },\n\n  // :: number\n  // The amount of keys in this map.\n  get size() {\n    return this.content.length >> 1\n  }\n};\n\n// :: (?union<Object, OrderedMap>) → OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\nOrderedMap.from = function(value) {\n  if (value instanceof OrderedMap) return value\n  var content = [];\n  if (value) for (var prop in value) content.push(prop, value[prop]);\n  return new OrderedMap(content)\n};\n\nvar orderedmap = OrderedMap;\n\nexport default orderedmap;\n","import {findDiffStart, findDiffEnd} from \"./diff\"\n\n// ::- A fragment represents a node's collection of child nodes.\n//\n// Like nodes, fragments are persistent data structures, and you\n// should not mutate them or their content. Rather, you create new\n// instances whenever needed. The API tries to make this easy.\nexport class Fragment {\n  constructor(content, size) {\n    this.content = content\n    // :: number\n    // The size of the fragment, which is the total of the size of its\n    // content nodes.\n    this.size = size || 0\n    if (size == null) for (let i = 0; i < content.length; i++)\n      this.size += content[i].nodeSize\n  }\n\n  // :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes between the given two\n  // positions (relative to start of this fragment). Doesn't descend\n  // into a node when the callback returns `false`.\n  nodesBetween(from, to, f, nodeStart = 0, parent) {\n    for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {\n        let start = pos + 1\n        child.nodesBetween(Math.max(0, from - start),\n                           Math.min(child.content.size, to - start),\n                           f, nodeStart + start)\n      }\n      pos = end\n    }\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) → ?bool)\n  // Call the given callback for every descendant node. The callback\n  // may return `false` to prevent traversal of a given node's children.\n  descendants(f) {\n    this.nodesBetween(0, this.size, f)\n  }\n\n  // :: (number, number, ?string, ?union<string, (leafNode: Node) → string>) → string\n  // Extract the text between `from` and `to`. See the same method on\n  // [`Node`](#model.Node.textBetween).\n  textBetween(from, to, blockSeparator, leafText) {\n    let text = \"\", separated = true\n    this.nodesBetween(from, to, (node, pos) => {\n      if (node.isText) {\n        text += node.text.slice(Math.max(from, pos) - pos, to - pos)\n        separated = !blockSeparator\n      } else if (node.isLeaf && leafText) {\n        text += typeof leafText === 'function' ? leafText(node): leafText\n        separated = !blockSeparator\n      } else if (!separated && node.isBlock) {\n        text += blockSeparator\n        separated = true\n      }\n    }, 0)\n    return text\n  }\n\n  // :: (Fragment) → Fragment\n  // Create a new fragment containing the combined content of this\n  // fragment and the other.\n  append(other) {\n    if (!other.size) return this\n    if (!this.size) return other\n    let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0\n    if (last.isText && last.sameMarkup(first)) {\n      content[content.length - 1] = last.withText(last.text + first.text)\n      i = 1\n    }\n    for (; i < other.content.length; i++) content.push(other.content[i])\n    return new Fragment(content, this.size + other.size)\n  }\n\n  // :: (number, ?number) → Fragment\n  // Cut out the sub-fragment between the two given positions.\n  cut(from, to) {\n    if (to == null) to = this.size\n    if (from == 0 && to == this.size) return this\n    let result = [], size = 0\n    if (to > from) for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from) {\n        if (pos < from || end > to) {\n          if (child.isText)\n            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos))\n          else\n            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1))\n        }\n        result.push(child)\n        size += child.nodeSize\n      }\n      pos = end\n    }\n    return new Fragment(result, size)\n  }\n\n  cutByIndex(from, to) {\n    if (from == to) return Fragment.empty\n    if (from == 0 && to == this.content.length) return this\n    return new Fragment(this.content.slice(from, to))\n  }\n\n  // :: (number, Node) → Fragment\n  // Create a new fragment in which the node at the given index is\n  // replaced by the given node.\n  replaceChild(index, node) {\n    let current = this.content[index]\n    if (current == node) return this\n    let copy = this.content.slice()\n    let size = this.size + node.nodeSize - current.nodeSize\n    copy[index] = node\n    return new Fragment(copy, size)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by prepending the given node to this\n  // fragment.\n  addToStart(node) {\n    return new Fragment([node].concat(this.content), this.size + node.nodeSize)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by appending the given node to this\n  // fragment.\n  addToEnd(node) {\n    return new Fragment(this.content.concat(node), this.size + node.nodeSize)\n  }\n\n  // :: (Fragment) → bool\n  // Compare this fragment to another one.\n  eq(other) {\n    if (this.content.length != other.content.length) return false\n    for (let i = 0; i < this.content.length; i++)\n      if (!this.content[i].eq(other.content[i])) return false\n    return true\n  }\n\n  // :: ?Node\n  // The first child of the fragment, or `null` if it is empty.\n  get firstChild() { return this.content.length ? this.content[0] : null }\n\n  // :: ?Node\n  // The last child of the fragment, or `null` if it is empty.\n  get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null }\n\n  // :: number\n  // The number of child nodes in this fragment.\n  get childCount() { return this.content.length }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raise an error when the\n  // index is out of range.\n  child(index) {\n    let found = this.content[index]\n    if (!found) throw new RangeError(\"Index \" + index + \" out of range for \" + this)\n    return found\n  }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) {\n    return this.content[index]\n  }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) {\n    for (let i = 0, p = 0; i < this.content.length; i++) {\n      let child = this.content[i]\n      f(child, p, i)\n      p += child.nodeSize\n    }\n  }\n\n  // :: (Fragment) → ?number\n  // Find the first position at which this fragment and another\n  // fragment differ, or `null` if they are the same.\n  findDiffStart(other, pos = 0) {\n    return findDiffStart(this, other, pos)\n  }\n\n  // :: (Fragment) → ?{a: number, b: number}\n  // Find the first position, searching from the end, at which this\n  // fragment and the given fragment differ, or `null` if they are the\n  // same. Since this position will not be the same in both nodes, an\n  // object with two separate positions is returned.\n  findDiffEnd(other, pos = this.size, otherPos = other.size) {\n    return findDiffEnd(this, other, pos, otherPos)\n  }\n\n  // : (number, ?number) → {index: number, offset: number}\n  // Find the index and inner offset corresponding to a given relative\n  // position in this fragment. The result object will be reused\n  // (overwritten) the next time the function is called. (Not public.)\n  findIndex(pos, round = -1) {\n    if (pos == 0) return retIndex(0, pos)\n    if (pos == this.size) return retIndex(this.content.length, pos)\n    if (pos > this.size || pos < 0) throw new RangeError(`Position ${pos} outside of fragment (${this})`)\n    for (let i = 0, curPos = 0;; i++) {\n      let cur = this.child(i), end = curPos + cur.nodeSize\n      if (end >= pos) {\n        if (end == pos || round > 0) return retIndex(i + 1, end)\n        return retIndex(i, curPos)\n      }\n      curPos = end\n    }\n  }\n\n  // :: () → string\n  // Return a debugging string that describes this fragment.\n  toString() { return \"<\" + this.toStringInner() + \">\" }\n\n  toStringInner() { return this.content.join(\", \") }\n\n  // :: () → ?Object\n  // Create a JSON-serializeable representation of this fragment.\n  toJSON() {\n    return this.content.length ? this.content.map(n => n.toJSON()) : null\n  }\n\n  // :: (Schema, ?Object) → Fragment\n  // Deserialize a fragment from its JSON representation.\n  static fromJSON(schema, value) {\n    if (!value) return Fragment.empty\n    if (!Array.isArray(value)) throw new RangeError(\"Invalid input for Fragment.fromJSON\")\n    return new Fragment(value.map(schema.nodeFromJSON))\n  }\n\n  // :: ([Node]) → Fragment\n  // Build a fragment from an array of nodes. Ensures that adjacent\n  // text nodes with the same marks are joined together.\n  static fromArray(array) {\n    if (!array.length) return Fragment.empty\n    let joined, size = 0\n    for (let i = 0; i < array.length; i++) {\n      let node = array[i]\n      size += node.nodeSize\n      if (i && node.isText && array[i - 1].sameMarkup(node)) {\n        if (!joined) joined = array.slice(0, i)\n        joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text)\n      } else if (joined) {\n        joined.push(node)\n      }\n    }\n    return new Fragment(joined || array, size)\n  }\n\n  // :: (?union<Fragment, Node, [Node]>) → Fragment\n  // Create a fragment from something that can be interpreted as a set\n  // of nodes. For `null`, it returns the empty fragment. For a\n  // fragment, the fragment itself. For a node or array of nodes, a\n  // fragment containing those nodes.\n  static from(nodes) {\n    if (!nodes) return Fragment.empty\n    if (nodes instanceof Fragment) return nodes\n    if (Array.isArray(nodes)) return this.fromArray(nodes)\n    if (nodes.attrs) return new Fragment([nodes], nodes.nodeSize)\n    throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" +\n                         (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"))\n  }\n}\n\nconst found = {index: 0, offset: 0}\nfunction retIndex(index, offset) {\n  found.index = index\n  found.offset = offset\n  return found\n}\n\n// :: Fragment\n// An empty fragment. Intended to be reused whenever a node doesn't\n// contain anything (rather than allocating a new empty fragment for\n// each leaf node).\nFragment.empty = new Fragment([], 0)\n","export function findDiffStart(a, b, pos) {\n  for (let i = 0;; i++) {\n    if (i == a.childCount || i == b.childCount)\n      return a.childCount == b.childCount ? null : pos\n\n    let childA = a.child(i), childB = b.child(i)\n    if (childA == childB) { pos += childA.nodeSize; continue }\n\n    if (!childA.sameMarkup(childB)) return pos\n\n    if (childA.isText && childA.text != childB.text) {\n      for (let j = 0; childA.text[j] == childB.text[j]; j++)\n        pos++\n      return pos\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffStart(childA.content, childB.content, pos + 1)\n      if (inner != null) return inner\n    }\n    pos += childA.nodeSize\n  }\n}\n\nexport function findDiffEnd(a, b, posA, posB) {\n  for (let iA = a.childCount, iB = b.childCount;;) {\n    if (iA == 0 || iB == 0)\n      return iA == iB ? null : {a: posA, b: posB}\n\n    let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize\n    if (childA == childB) {\n      posA -= size; posB -= size\n      continue\n    }\n\n    if (!childA.sameMarkup(childB)) return {a: posA, b: posB}\n\n    if (childA.isText && childA.text != childB.text) {\n      let same = 0, minSize = Math.min(childA.text.length, childB.text.length)\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n        same++; posA--; posB--\n      }\n      return {a: posA, b: posB}\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1)\n      if (inner) return inner\n    }\n    posA -= size; posB -= size\n  }\n}\n","export function compareDeep(a, b) {\n  if (a === b) return true\n  if (!(a && typeof a == \"object\") ||\n      !(b && typeof b == \"object\")) return false\n  let array = Array.isArray(a)\n  if (Array.isArray(b) != array) return false\n  if (array) {\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++) if (!compareDeep(a[i], b[i])) return false\n  } else {\n    for (let p in a) if (!(p in b) || !compareDeep(a[p], b[p])) return false\n    for (let p in b) if (!(p in a)) return false\n  }\n  return true\n}\n","import {MarkType, Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {AddMarkStep, RemoveMarkStep} from \"./mark_step\"\nimport {ReplaceStep} from \"./replace_step\"\n\n// :: (number, number, Mark) → this\n// Add the given mark to the inline content between `from` and `to`.\nTransform.prototype.addMark = function(from, to, mark) {\n  let removed = [], added = [], removing = null, adding = null\n  this.doc.nodesBetween(from, to, (node, pos, parent) => {\n    if (!node.isInline) return\n    let marks = node.marks\n    if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n      let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to)\n      let newSet = mark.addToSet(marks)\n\n      for (let i = 0; i < marks.length; i++) {\n        if (!marks[i].isInSet(newSet)) {\n          if (removing && removing.to == start && removing.mark.eq(marks[i]))\n            removing.to = end\n          else\n            removed.push(removing = new RemoveMarkStep(start, end, marks[i]))\n        }\n      }\n\n      if (adding && adding.to == start)\n        adding.to = end\n      else\n        added.push(adding = new AddMarkStep(start, end, mark))\n    }\n  })\n\n  removed.forEach(s => this.step(s))\n  added.forEach(s => this.step(s))\n  return this\n}\n\n// :: (number, number, ?union<Mark, MarkType>) → this\n// Remove marks from inline nodes between `from` and `to`. When `mark`\n// is a single mark, remove precisely that mark. When it is a mark type,\n// remove all marks of that type. When it is null, remove all marks of\n// any type.\nTransform.prototype.removeMark = function(from, to, mark = null) {\n  let matched = [], step = 0\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isInline) return\n    step++\n    let toRemove = null\n    if (mark instanceof MarkType) {\n      let set = node.marks, found\n      while (found = mark.isInSet(set)) {\n        ;(toRemove || (toRemove = [])).push(found)\n        set = found.removeFromSet(set)\n      }\n    } else if (mark) {\n      if (mark.isInSet(node.marks)) toRemove = [mark]\n    } else {\n      toRemove = node.marks\n    }\n    if (toRemove && toRemove.length) {\n      let end = Math.min(pos + node.nodeSize, to)\n      for (let i = 0; i < toRemove.length; i++) {\n        let style = toRemove[i], found\n        for (let j = 0; j < matched.length; j++) {\n          let m = matched[j]\n          if (m.step == step - 1 && style.eq(matched[j].style)) found = m\n        }\n        if (found) {\n          found.to = end\n          found.step = step\n        } else {\n          matched.push({style, from: Math.max(pos, from), to: end, step})\n        }\n      }\n    }\n  })\n  matched.forEach(m => this.step(new RemoveMarkStep(m.from, m.to, m.style)))\n  return this\n}\n\n// :: (number, NodeType, ?ContentMatch) → this\n// Removes all marks and nodes from the content of the node at `pos`\n// that don't match the given new parent node type. Accepts an\n// optional starting [content match](#model.ContentMatch) as third\n// argument.\nTransform.prototype.clearIncompatible = function(pos, parentType, match = parentType.contentMatch) {\n  let node = this.doc.nodeAt(pos)\n  let delSteps = [], cur = pos + 1\n  for (let i = 0; i < node.childCount; i++) {\n    let child = node.child(i), end = cur + child.nodeSize\n    let allowed = match.matchType(child.type, child.attrs)\n    if (!allowed) {\n      delSteps.push(new ReplaceStep(cur, end, Slice.empty))\n    } else {\n      match = allowed\n      for (let j = 0; j < child.marks.length; j++) if (!parentType.allowsMarkType(child.marks[j].type))\n        this.step(new RemoveMarkStep(cur, end, child.marks[j]))\n    }\n    cur = end\n  }\n  if (!match.validEnd) {\n    let fill = match.fillBefore(Fragment.empty, true)\n    this.replace(cur, cur, new Slice(fill, 0, 0))\n  }\n  for (let i = delSteps.length - 1; i >= 0; i--) this.step(delSteps[i])\n  return this\n}\n","import {Fragment, Slice} from \"prosemirror-model\"\n\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\nimport {Transform} from \"./transform\"\nimport {insertPoint} from \"./structure\"\n\n// :: (Node, number, ?number, ?Slice) → ?Step\n// ‘Fit’ a slice into a given position in the document, producing a\n// [step](#transform.Step) that inserts it. Will return null if\n// there's no meaningful way to insert the slice here, or inserting it\n// would be a no-op (an empty slice over an empty range).\nexport function replaceStep(doc, from, to = from, slice = Slice.empty) {\n  if (from == to && !slice.size) return null\n\n  let $from = doc.resolve(from), $to = doc.resolve(to)\n  // Optimization -- avoid work if it's obvious that it's not needed.\n  if (fitsTrivially($from, $to, slice)) return new ReplaceStep(from, to, slice)\n  return new Fitter($from, $to, slice).fit()\n}\n\n// :: (number, ?number, ?Slice) → this\n// Replace the part of the document between `from` and `to` with the\n// given `slice`.\nTransform.prototype.replace = function(from, to = from, slice = Slice.empty) {\n  let step = replaceStep(this.doc, from, to, slice)\n  if (step) this.step(step)\n  return this\n}\n\n// :: (number, number, union<Fragment, Node, [Node]>) → this\n// Replace the given range with the given content, which may be a\n// fragment, node, or array of nodes.\nTransform.prototype.replaceWith = function(from, to, content) {\n  return this.replace(from, to, new Slice(Fragment.from(content), 0, 0))\n}\n\n// :: (number, number) → this\n// Delete the content between the given positions.\nTransform.prototype.delete = function(from, to) {\n  return this.replace(from, to, Slice.empty)\n}\n\n// :: (number, union<Fragment, Node, [Node]>) → this\n// Insert the given content at the given position.\nTransform.prototype.insert = function(pos, content) {\n  return this.replaceWith(pos, pos, content)\n}\n\nfunction fitsTrivially($from, $to, slice) {\n  return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&\n    $from.parent.canReplace($from.index(), $to.index(), slice.content)\n}\n\n// Algorithm for 'placing' the elements of a slice into a gap:\n//\n// We consider the content of each node that is open to the left to be\n// independently placeable. I.e. in <p(\"foo\"), p(\"bar\")>, when the\n// paragraph on the left is open, \"foo\" can be placed (somewhere on\n// the left side of the replacement gap) independently from p(\"bar\").\n//\n// This class tracks the state of the placement progress in the\n// following properties:\n//\n//  - `frontier` holds a stack of `{type, match}` objects that\n//    represent the open side of the replacement. It starts at\n//    `$from`, then moves forward as content is placed, and is finally\n//    reconciled with `$to`.\n//\n//  - `unplaced` is a slice that represents the content that hasn't\n//    been placed yet.\n//\n//  - `placed` is a fragment of placed content. Its open-start value\n//    is implicit in `$from`, and its open-end value in `frontier`.\nclass Fitter {\n  constructor($from, $to, slice) {\n    this.$to = $to\n    this.$from = $from\n    this.unplaced = slice\n\n    this.frontier = []\n    for (let i = 0; i <= $from.depth; i++) {\n      let node = $from.node(i)\n      this.frontier.push({\n        type: node.type,\n        match: node.contentMatchAt($from.indexAfter(i))\n      })\n    }\n\n    this.placed = Fragment.empty\n    for (let i = $from.depth; i > 0; i--)\n      this.placed = Fragment.from($from.node(i).copy(this.placed))\n  }\n\n  get depth() { return this.frontier.length - 1 }\n\n  fit() {\n    // As long as there's unplaced content, try to place some of it.\n    // If that fails, either increase the open score of the unplaced\n    // slice, or drop nodes from it, and then try again.\n    while (this.unplaced.size) {\n      let fit = this.findFittable()\n      if (fit) this.placeNodes(fit)\n      else this.openMore() || this.dropNode()\n    }\n    // When there's inline content directly after the frontier _and_\n    // directly after `this.$to`, we must generate a `ReplaceAround`\n    // step that pulls that content into the node after the frontier.\n    // That means the fitting must be done to the end of the textblock\n    // node after `this.$to`, not `this.$to` itself.\n    let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth\n    let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline))\n    if (!$to) return null\n\n    // If closing to `$to` succeeded, create a step\n    let content = this.placed, openStart = $from.depth, openEnd = $to.depth\n    while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes\n      content = content.firstChild.content\n      openStart--; openEnd--\n    }\n    let slice = new Slice(content, openStart, openEnd)\n    if (moveInline > -1)\n      return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize)\n    if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps\n      return new ReplaceStep($from.pos, $to.pos, slice)\n  }\n\n  // Find a position on the start spine of `this.unplaced` that has\n  // content that can be moved somewhere on the frontier. Returns two\n  // depths, one for the slice and one for the frontier.\n  findFittable() {\n    // Only try wrapping nodes (pass 2) after finding a place without\n    // wrapping failed.\n    for (let pass = 1; pass <= 2; pass++) {\n      for (let sliceDepth = this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {\n        let fragment, parent\n        if (sliceDepth) {\n          parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild\n          fragment = parent.content\n        } else {\n          fragment = this.unplaced.content\n        }\n        let first = fragment.firstChild\n        for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {\n          let {type, match} = this.frontier[frontierDepth], wrap, inject\n          // In pass 1, if the next node matches, or there is no next\n          // node but the parents look compatible, we've found a\n          // place.\n          if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))\n                            : type.compatibleContent(parent.type)))\n            return {sliceDepth, frontierDepth, parent, inject}\n          // In pass 2, look for a set of wrapping nodes that make\n          // `first` fit here.\n          else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))\n            return {sliceDepth, frontierDepth, parent, wrap}\n          // Don't continue looking further up if the parent node\n          // would fit here.\n          if (parent && match.matchType(parent.type)) break\n        }\n      }\n    }\n  }\n\n  openMore() {\n    let {content, openStart, openEnd} = this.unplaced\n    let inner = contentAt(content, openStart)\n    if (!inner.childCount || inner.firstChild.isLeaf) return false\n    this.unplaced = new Slice(content, openStart + 1,\n                              Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0))\n    return true\n  }\n\n  dropNode() {\n    let {content, openStart, openEnd} = this.unplaced\n    let inner = contentAt(content, openStart)\n    if (inner.childCount <= 1 && openStart > 0) {\n      let openAtEnd = content.size - openStart <= openStart + inner.size\n      this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1,\n                                openAtEnd ? openStart - 1 : openEnd)\n    } else {\n      this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd)\n    }\n  }\n\n  // : ({sliceDepth: number, frontierDepth: number, parent: ?Node, wrap: ?[NodeType], inject: ?Fragment})\n  // Move content from the unplaced slice at `sliceDepth` to the\n  // frontier node at `frontierDepth`. Close that frontier node when\n  // applicable.\n  placeNodes({sliceDepth, frontierDepth, parent, inject, wrap}) {\n    while (this.depth > frontierDepth) this.closeFrontierNode()\n    if (wrap) for (let i = 0; i < wrap.length; i++) this.openFrontierNode(wrap[i])\n\n    let slice = this.unplaced, fragment = parent ? parent.content : slice.content\n    let openStart = slice.openStart - sliceDepth\n    let taken = 0, add = []\n    let {match, type} = this.frontier[frontierDepth]\n    if (inject) {\n      for (let i = 0; i < inject.childCount; i++) add.push(inject.child(i))\n      match = match.matchFragment(inject)\n    }\n    // Computes the amount of (end) open nodes at the end of the\n    // fragment. When 0, the parent is open, but no more. When\n    // negative, nothing is open.\n    let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd)\n    // Scan over the fragment, fitting as many child nodes as\n    // possible.\n    while (taken < fragment.childCount) {\n      let next = fragment.child(taken), matches = match.matchType(next.type)\n      if (!matches) break\n      taken++\n      if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes\n        match = matches\n        add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0,\n                                taken == fragment.childCount ? openEndCount : -1))\n      }\n    }\n    let toEnd = taken == fragment.childCount\n    if (!toEnd) openEndCount = -1\n\n    this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add))\n    this.frontier[frontierDepth].match = match\n\n    // If the parent types match, and the entire node was moved, and\n    // it's not open, close this frontier node right away.\n    if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)\n      this.closeFrontierNode()\n\n    // Add new frontier nodes for any open nodes at the end.\n    for (let i = 0, cur = fragment; i < openEndCount; i++) {\n      let node = cur.lastChild\n      this.frontier.push({type: node.type, match: node.contentMatchAt(node.childCount)})\n      cur = node.content\n    }\n\n    // Update `this.unplaced`. Drop the entire node from which we\n    // placed it we got to its end, otherwise just drop the placed\n    // nodes.\n    this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)\n      : sliceDepth == 0 ? Slice.empty\n      : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1),\n                  sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1)\n  }\n\n  mustMoveInline() {\n    if (!this.$to.parent.isTextblock || this.$to.end() == this.$to.pos) return -1\n    let top = this.frontier[this.depth], level\n    if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||\n        (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth)) return -1\n\n    let {depth} = this.$to, after = this.$to.after(depth)\n    while (depth > 1 && after == this.$to.end(--depth)) ++after\n    return after\n  }\n\n  findCloseLevel($to) {\n    scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {\n      let {match, type} = this.frontier[i]\n      let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1))\n      let fit = contentAfterFits($to, i, type, match, dropInner)\n      if (!fit) continue\n      for (let d = i - 1; d >= 0; d--) {\n        let {match, type} = this.frontier[d]\n        let matches = contentAfterFits($to, d, type, match, true)\n        if (!matches || matches.childCount) continue scan\n      }\n      return {depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to}\n    }\n  }\n\n  close($to) {\n    let close = this.findCloseLevel($to)\n    if (!close) return null\n\n    while (this.depth > close.depth) this.closeFrontierNode()\n    if (close.fit.childCount) this.placed = addToFragment(this.placed, close.depth, close.fit)\n    $to = close.move\n    for (let d = close.depth + 1; d <= $to.depth; d++) {\n      let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d))\n      this.openFrontierNode(node.type, node.attrs, add)\n    }\n    return $to\n  }\n\n  openFrontierNode(type, attrs, content) {\n    let top = this.frontier[this.depth]\n    top.match = top.match.matchType(type)\n    this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)))\n    this.frontier.push({type, match: type.contentMatch})\n  }\n\n  closeFrontierNode() {\n    let open = this.frontier.pop()\n    let add = open.match.fillBefore(Fragment.empty, true)\n    if (add.childCount) this.placed = addToFragment(this.placed, this.frontier.length, add)\n  }\n}\n\nfunction dropFromFragment(fragment, depth, count) {\n  if (depth == 0) return fragment.cutByIndex(count)\n  return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)))\n}\n\nfunction addToFragment(fragment, depth, content) {\n  if (depth == 0) return fragment.append(content)\n  return fragment.replaceChild(fragment.childCount - 1,\n                               fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)))\n}\n\nfunction contentAt(fragment, depth) {\n  for (let i = 0; i < depth; i++) fragment = fragment.firstChild.content\n  return fragment\n}\n\nfunction closeNodeStart(node, openStart, openEnd) {\n  if (openStart <= 0) return node\n  let frag = node.content\n  if (openStart > 1)\n    frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0))\n  if (openStart > 0) {\n    frag = node.type.contentMatch.fillBefore(frag).append(frag)\n    if (openEnd <= 0) frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true))\n  }\n  return node.copy(frag)\n}\n\nfunction contentAfterFits($to, depth, type, match, open) {\n  let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth)\n  if (index == node.childCount && !type.compatibleContent(node.type)) return null\n  let fit = match.fillBefore(node.content, true, index)\n  return fit && !invalidMarks(type, node.content, index) ? fit : null\n}\n\nfunction invalidMarks(type, fragment, start) {\n  for (let i = start; i < fragment.childCount; i++)\n    if (!type.allowsMarks(fragment.child(i).marks)) return true\n  return false\n}\n\n// :: (number, number, Slice) → this\n// Replace a range of the document with a given slice, using `from`,\n// `to`, and the slice's [`openStart`](#model.Slice.openStart) property\n// as hints, rather than fixed start and end points. This method may\n// grow the replaced area or close open nodes in the slice in order to\n// get a fit that is more in line with WYSIWYG expectations, by\n// dropping fully covered parent nodes of the replaced region when\n// they are marked [non-defining](#model.NodeSpec.defining), or\n// including an open parent node from the slice that _is_ marked as\n// [defining](#model.NodeSpec.defining).\n//\n// This is the method, for example, to handle paste. The similar\n// [`replace`](#transform.Transform.replace) method is a more\n// primitive tool which will _not_ move the start and end of its given\n// range, and is useful in situations where you need more precise\n// control over what happens.\nTransform.prototype.replaceRange = function(from, to, slice) {\n  if (!slice.size) return this.deleteRange(from, to)\n\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  if (fitsTrivially($from, $to, slice))\n    return this.step(new ReplaceStep(from, to, slice))\n\n  let targetDepths = coveredDepths($from, this.doc.resolve(to))\n  // Can't replace the whole document, so remove 0 if it's present\n  if (targetDepths[targetDepths.length - 1] == 0) targetDepths.pop()\n  // Negative numbers represent not expansion over the whole node at\n  // that depth, but replacing from $from.before(-D) to $to.pos.\n  let preferredTarget = -($from.depth + 1)\n  targetDepths.unshift(preferredTarget)\n  // This loop picks a preferred target depth, if one of the covering\n  // depths is not outside of a defining node, and adds negative\n  // depths for any depth that has $from at its start and does not\n  // cross a defining node.\n  for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {\n    let spec = $from.node(d).type.spec\n    if (spec.defining || spec.isolating) break\n    if (targetDepths.indexOf(d) > -1) preferredTarget = d\n    else if ($from.before(d) == pos) targetDepths.splice(1, 0, -d)\n  }\n  // Try to fit each possible depth of the slice into each possible\n  // target depth, starting with the preferred depths.\n  let preferredTargetIndex = targetDepths.indexOf(preferredTarget)\n\n  let leftNodes = [], preferredDepth = slice.openStart\n  for (let content = slice.content, i = 0;; i++) {\n    let node = content.firstChild\n    leftNodes.push(node)\n    if (i == slice.openStart) break\n    content = node.content\n  }\n  // Back up if the node directly above openStart, or the node above\n  // that separated only by a non-defining textblock node, is defining.\n  if (preferredDepth > 0 && leftNodes[preferredDepth - 1].type.spec.defining &&\n      $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 1].type)\n    preferredDepth -= 1\n  else if (preferredDepth >= 2 && leftNodes[preferredDepth - 1].isTextblock && leftNodes[preferredDepth - 2].type.spec.defining &&\n           $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 2].type)\n    preferredDepth -= 2\n\n  for (let j = slice.openStart; j >= 0; j--) {\n    let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1)\n    let insert = leftNodes[openDepth]\n    if (!insert) continue\n    for (let i = 0; i < targetDepths.length; i++) {\n      // Loop over possible expansion levels, starting with the\n      // preferred one\n      let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true\n      if (targetDepth < 0) { expand = false; targetDepth = -targetDepth }\n      let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1)\n      if (parent.canReplaceWith(index, index, insert.type, insert.marks))\n        return this.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to,\n                            new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth),\n                                      openDepth, slice.openEnd))\n    }\n  }\n\n  let startSteps = this.steps.length\n  for (let i = targetDepths.length - 1; i >= 0; i--) {\n    this.replace(from, to, slice)\n    if (this.steps.length > startSteps) break\n    let depth = targetDepths[i]\n    if (depth < 0) continue\n    from = $from.before(depth); to = $to.after(depth)\n  }\n  return this\n}\n\nfunction closeFragment(fragment, depth, oldOpen, newOpen, parent) {\n  if (depth < oldOpen) {\n    let first = fragment.firstChild\n    fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)))\n  }\n  if (depth > newOpen) {\n    let match = parent.contentMatchAt(0)\n    let start = match.fillBefore(fragment).append(fragment)\n    fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true))\n  }\n  return fragment\n}\n\n// :: (number, number, Node) → this\n// Replace the given range with a node, but use `from` and `to` as\n// hints, rather than precise positions. When from and to are the same\n// and are at the start or end of a parent node in which the given\n// node doesn't fit, this method may _move_ them out towards a parent\n// that does allow the given node to be placed. When the given range\n// completely covers a parent node, this method may completely replace\n// that parent node.\nTransform.prototype.replaceRangeWith = function(from, to, node) {\n  if (!node.isInline && from == to && this.doc.resolve(from).parent.content.size) {\n    let point = insertPoint(this.doc, from, node.type)\n    if (point != null) from = to = point\n  }\n  return this.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0))\n}\n\n// :: (number, number) → this\n// Delete the given range, expanding it to cover fully covered\n// parent nodes until a valid replace is found.\nTransform.prototype.deleteRange = function(from, to) {\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  let covered = coveredDepths($from, $to)\n  for (let i = 0; i < covered.length; i++) {\n    let depth = covered[i], last = i == covered.length - 1\n    if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)\n      return this.delete($from.start(depth), $to.end(depth))\n    if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))\n      return this.delete($from.before(depth), $to.after(depth))\n  }\n  for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {\n    if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)\n      return this.delete($from.before(d), to)\n  }\n  return this.delete(from, to)\n}\n\n// : (ResolvedPos, ResolvedPos) → [number]\n// Returns an array of all depths for which $from - $to spans the\n// whole content of the nodes at that depth.\nfunction coveredDepths($from, $to) {\n  let result = [], minDepth = Math.min($from.depth, $to.depth)\n  for (let d = minDepth; d >= 0; d--) {\n    let start = $from.start(d)\n    if (start < $from.pos - ($from.depth - d) ||\n        $to.end(d) > $to.pos + ($to.depth - d) ||\n        $from.node(d).type.spec.isolating ||\n        $to.node(d).type.spec.isolating) break\n    if (start == $to.start(d) ||\n        (d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent &&\n         d && $to.start(d - 1) == start - 1))\n      result.push(d)\n  }\n  return result\n}\n","import {Mark} from \"./mark\"\n\n// ::- You can [_resolve_](#model.Node.resolve) a position to get more\n// information about it. Objects of this class represent such a\n// resolved position, providing various pieces of context information,\n// and some helper methods.\n//\n// Throughout this interface, methods that take an optional `depth`\n// parameter will interpret undefined as `this.depth` and negative\n// numbers as `this.depth + value`.\nexport class ResolvedPos {\n  constructor(pos, path, parentOffset) {\n    // :: number The position that was resolved.\n    this.pos = pos\n    this.path = path\n    // :: number\n    // The number of levels the parent node is from the root. If this\n    // position points directly into the root node, it is 0. If it\n    // points into a top-level paragraph, 1, and so on.\n    this.depth = path.length / 3 - 1\n    // :: number The offset this position has into its parent node.\n    this.parentOffset = parentOffset\n  }\n\n  resolveDepth(val) {\n    if (val == null) return this.depth\n    if (val < 0) return this.depth + val\n    return val\n  }\n\n  // :: Node\n  // The parent node that the position points into. Note that even if\n  // a position points into a text node, that node is not considered\n  // the parent—text nodes are ‘flat’ in this model, and have no content.\n  get parent() { return this.node(this.depth) }\n\n  // :: Node\n  // The root node in which the position was resolved.\n  get doc() { return this.node(0) }\n\n  // :: (?number) → Node\n  // The ancestor node at the given level. `p.node(p.depth)` is the\n  // same as `p.parent`.\n  node(depth) { return this.path[this.resolveDepth(depth) * 3] }\n\n  // :: (?number) → number\n  // The index into the ancestor at the given level. If this points at\n  // the 3rd node in the 2nd paragraph on the top level, for example,\n  // `p.index(0)` is 1 and `p.index(1)` is 2.\n  index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1] }\n\n  // :: (?number) → number\n  // The index pointing after this position into the ancestor at the\n  // given level.\n  indexAfter(depth) {\n    depth = this.resolveDepth(depth)\n    return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1)\n  }\n\n  // :: (?number) → number\n  // The (absolute) position at the start of the node at the given\n  // level.\n  start(depth) {\n    depth = this.resolveDepth(depth)\n    return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n  }\n\n  // :: (?number) → number\n  // The (absolute) position at the end of the node at the given\n  // level.\n  end(depth) {\n    depth = this.resolveDepth(depth)\n    return this.start(depth) + this.node(depth).content.size\n  }\n\n  // :: (?number) → number\n  // The (absolute) position directly before the wrapping node at the\n  // given level, or, when `depth` is `this.depth + 1`, the original\n  // position.\n  before(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position before the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1]\n  }\n\n  // :: (?number) → number\n  // The (absolute) position directly after the wrapping node at the\n  // given level, or the original position when `depth` is `this.depth + 1`.\n  after(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position after the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize\n  }\n\n  // :: number\n  // When this position points into a text node, this returns the\n  // distance between the position and the start of the text node.\n  // Will be zero for positions that point between nodes.\n  get textOffset() { return this.pos - this.path[this.path.length - 1] }\n\n  // :: ?Node\n  // Get the node directly after the position, if any. If the position\n  // points into a text node, only the part of that node after the\n  // position is returned.\n  get nodeAfter() {\n    let parent = this.parent, index = this.index(this.depth)\n    if (index == parent.childCount) return null\n    let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index)\n    return dOff ? parent.child(index).cut(dOff) : child\n  }\n\n  // :: ?Node\n  // Get the node directly before the position, if any. If the\n  // position points into a text node, only the part of that node\n  // before the position is returned.\n  get nodeBefore() {\n    let index = this.index(this.depth)\n    let dOff = this.pos - this.path[this.path.length - 1]\n    if (dOff) return this.parent.child(index).cut(0, dOff)\n    return index == 0 ? null : this.parent.child(index - 1)\n  }\n\n  // :: (number, ?number) → number\n  // Get the position at the given index in the parent node at the\n  // given depth (which defaults to `this.depth`).\n  posAtIndex(index, depth) {\n    depth = this.resolveDepth(depth)\n    let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n    for (let i = 0; i < index; i++) pos += node.child(i).nodeSize\n    return pos\n  }\n\n  // :: () → [Mark]\n  // Get the marks at this position, factoring in the surrounding\n  // marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the\n  // position is at the start of a non-empty node, the marks of the\n  // node after it (if any) are returned.\n  marks() {\n    let parent = this.parent, index = this.index()\n\n    // In an empty parent, return the empty array\n    if (parent.content.size == 0) return Mark.none\n\n    // When inside a text node, just return the text node's marks\n    if (this.textOffset) return parent.child(index).marks\n\n    let main = parent.maybeChild(index - 1), other = parent.maybeChild(index)\n    // If the `after` flag is true of there is no node before, make\n    // the node after this position the main reference.\n    if (!main) { let tmp = main; main = other; other = tmp }\n\n    // Use all marks in the main node, except those that have\n    // `inclusive` set to false and are not present in the other node.\n    let marks = main.marks\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))\n        marks = marks[i--].removeFromSet(marks)\n\n    return marks\n  }\n\n  // :: (ResolvedPos) → ?[Mark]\n  // Get the marks after the current position, if any, except those\n  // that are non-inclusive and not present at position `$end`. This\n  // is mostly useful for getting the set of marks to preserve after a\n  // deletion. Will return `null` if this position is at the end of\n  // its parent node or its parent node isn't a textblock (in which\n  // case no marks should be preserved).\n  marksAcross($end) {\n    let after = this.parent.maybeChild(this.index())\n    if (!after || !after.isInline) return null\n\n    let marks = after.marks, next = $end.parent.maybeChild($end.index())\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))\n        marks = marks[i--].removeFromSet(marks)\n    return marks\n  }\n\n  // :: (number) → number\n  // The depth up to which this position and the given (non-resolved)\n  // position share the same parent nodes.\n  sharedDepth(pos) {\n    for (let depth = this.depth; depth > 0; depth--)\n      if (this.start(depth) <= pos && this.end(depth) >= pos) return depth\n    return 0\n  }\n\n  // :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange\n  // Returns a range based on the place where this position and the\n  // given position diverge around block content. If both point into\n  // the same textblock, for example, a range around that textblock\n  // will be returned. If they point into different blocks, the range\n  // around those blocks in their shared ancestor is returned. You can\n  // pass in an optional predicate that will be called with a parent\n  // node to see if a range into that parent is acceptable.\n  blockRange(other = this, pred) {\n    if (other.pos < this.pos) return other.blockRange(this)\n    for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)\n      if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))\n        return new NodeRange(this, other, d)\n  }\n\n  // :: (ResolvedPos) → bool\n  // Query whether the given position shares the same parent node.\n  sameParent(other) {\n    return this.pos - this.parentOffset == other.pos - other.parentOffset\n  }\n\n  // :: (ResolvedPos) → ResolvedPos\n  // Return the greater of this and the given position.\n  max(other) {\n    return other.pos > this.pos ? other : this\n  }\n\n  // :: (ResolvedPos) → ResolvedPos\n  // Return the smaller of this and the given position.\n  min(other) {\n    return other.pos < this.pos ? other : this\n  }\n\n  toString() {\n    let str = \"\"\n    for (let i = 1; i <= this.depth; i++)\n      str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1)\n    return str + \":\" + this.parentOffset\n  }\n\n  static resolve(doc, pos) {\n    if (!(pos >= 0 && pos <= doc.content.size)) throw new RangeError(\"Position \" + pos + \" out of range\")\n    let path = []\n    let start = 0, parentOffset = pos\n    for (let node = doc;;) {\n      let {index, offset} = node.content.findIndex(parentOffset)\n      let rem = parentOffset - offset\n      path.push(node, index, start + offset)\n      if (!rem) break\n      node = node.child(index)\n      if (node.isText) break\n      parentOffset = rem - 1\n      start += offset + 1\n    }\n    return new ResolvedPos(pos, path, parentOffset)\n  }\n\n  static resolveCached(doc, pos) {\n    for (let i = 0; i < resolveCache.length; i++) {\n      let cached = resolveCache[i]\n      if (cached.pos == pos && cached.doc == doc) return cached\n    }\n    let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos)\n    resolveCachePos = (resolveCachePos + 1) % resolveCacheSize\n    return result\n  }\n}\n\nlet resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12\n\n// ::- Represents a flat range of content, i.e. one that starts and\n// ends in the same node.\nexport class NodeRange {\n  // :: (ResolvedPos, ResolvedPos, number)\n  // Construct a node range. `$from` and `$to` should point into the\n  // same node until at least the given `depth`, since a node range\n  // denotes an adjacent set of nodes in a single parent node.\n  constructor($from, $to, depth) {\n    // :: ResolvedPos A resolved position along the start of the\n    // content. May have a `depth` greater than this object's `depth`\n    // property, since these are the positions that were used to\n    // compute the range, not re-resolved positions directly at its\n    // boundaries.\n    this.$from = $from\n    // :: ResolvedPos A position along the end of the content. See\n    // caveat for [`$from`](#model.NodeRange.$from).\n    this.$to = $to\n    // :: number The depth of the node that this range points into.\n    this.depth = depth\n  }\n\n  // :: number The position at the start of the range.\n  get start() { return this.$from.before(this.depth + 1) }\n  // :: number The position at the end of the range.\n  get end() { return this.$to.after(this.depth + 1) }\n\n  // :: Node The parent node that the range points into.\n  get parent() { return this.$from.node(this.depth) }\n  // :: number The start index of the range in the parent node.\n  get startIndex() { return this.$from.index(this.depth) }\n  // :: number The end index of the range in the parent node.\n  get endIndex() { return this.$to.indexAfter(this.depth) }\n}\n","import {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {Slice, replace} from \"./replace\"\nimport {ResolvedPos} from \"./resolvedpos\"\nimport {compareDeep} from \"./comparedeep\"\n\nconst emptyAttrs = Object.create(null)\n\n// ::- This class represents a node in the tree that makes up a\n// ProseMirror document. So a document is an instance of `Node`, with\n// children that are also instances of `Node`.\n//\n// Nodes are persistent data structures. Instead of changing them, you\n// create new ones with the content you want. Old ones keep pointing\n// at the old document shape. This is made cheaper by sharing\n// structure between the old and new data as much as possible, which a\n// tree shape like this (without back pointers) makes easy.\n//\n// **Do not** directly mutate the properties of a `Node` object. See\n// [the guide](/docs/guide/#doc) for more information.\nexport class Node {\n  constructor(type, attrs, content, marks) {\n    // :: NodeType\n    // The type of node that this is.\n    this.type = type\n\n    // :: Object\n    // An object mapping attribute names to values. The kind of\n    // attributes allowed and required are\n    // [determined](#model.NodeSpec.attrs) by the node type.\n    this.attrs = attrs\n\n    // :: Fragment\n    // A container holding the node's children.\n    this.content = content || Fragment.empty\n\n    // :: [Mark]\n    // The marks (things like whether it is emphasized or part of a\n    // link) applied to this node.\n    this.marks = marks || Mark.none\n  }\n\n  // text:: ?string\n  // For text nodes, this contains the node's text content.\n\n  // :: number\n  // The size of this node, as defined by the integer-based [indexing\n  // scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n  // amount of characters. For other leaf nodes, it is one. For\n  // non-leaf nodes, it is the size of the content plus two (the start\n  // and end token).\n  get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size }\n\n  // :: number\n  // The number of children that the node has.\n  get childCount() { return this.content.childCount }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raises an error when the\n  // index is out of range.\n  child(index) { return this.content.child(index) }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) { return this.content.maybeChild(index) }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) { this.content.forEach(f) }\n\n  // :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes recursively between\n  // the given two positions that are relative to start of this node's\n  // content. The callback is invoked with the node, its\n  // parent-relative position, its parent node, and its child index.\n  // When the callback returns false for a given node, that node's\n  // children will not be recursed over. The last parameter can be\n  // used to specify a starting position to count from.\n  nodesBetween(from, to, f, startPos = 0) {\n    this.content.nodesBetween(from, to, f, startPos, this)\n  }\n\n  // :: ((node: Node, pos: number, parent: Node, index: number) → ?bool)\n  // Call the given callback for every descendant node. Doesn't\n  // descend into a node when the callback returns `false`.\n  descendants(f) {\n    this.nodesBetween(0, this.content.size, f)\n  }\n\n  // :: string\n  // Concatenates all the text nodes found in this fragment and its\n  // children.\n  get textContent() { return this.textBetween(0, this.content.size, \"\") }\n\n  // :: (number, number, ?string, ?union<string, ?(leafNode: Node) -> string>) → string\n  // Get all text between positions `from` and `to`. When\n  // `blockSeparator` is given, it will be inserted to separate text\n  // from different block nodes. When `leafText` is given, it'll be\n  // inserted for every non-text leaf node encountered.\n  textBetween(from, to, blockSeparator, leafText) {\n    return this.content.textBetween(from, to, blockSeparator, leafText)\n  }\n\n  // :: ?Node\n  // Returns this node's first child, or `null` if there are no\n  // children.\n  get firstChild() { return this.content.firstChild }\n\n  // :: ?Node\n  // Returns this node's last child, or `null` if there are no\n  // children.\n  get lastChild() { return this.content.lastChild }\n\n  // :: (Node) → bool\n  // Test whether two nodes represent the same piece of document.\n  eq(other) {\n    return this == other || (this.sameMarkup(other) && this.content.eq(other.content))\n  }\n\n  // :: (Node) → bool\n  // Compare the markup (type, attributes, and marks) of this node to\n  // those of another. Returns `true` if both have the same markup.\n  sameMarkup(other) {\n    return this.hasMarkup(other.type, other.attrs, other.marks)\n  }\n\n  // :: (NodeType, ?Object, ?[Mark]) → bool\n  // Check whether this node's markup correspond to the given type,\n  // attributes, and marks.\n  hasMarkup(type, attrs, marks) {\n    return this.type == type &&\n      compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\n      Mark.sameSet(this.marks, marks || Mark.none)\n  }\n\n  // :: (?Fragment) → Node\n  // Create a new node with the same markup as this node, containing\n  // the given content (or empty, if no content is given).\n  copy(content = null) {\n    if (content == this.content) return this\n    return new this.constructor(this.type, this.attrs, content, this.marks)\n  }\n\n  // :: ([Mark]) → Node\n  // Create a copy of this node, with the given set of marks instead\n  // of the node's own marks.\n  mark(marks) {\n    return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks)\n  }\n\n  // :: (number, ?number) → Node\n  // Create a copy of this node with only the content between the\n  // given positions. If `to` is not given, it defaults to the end of\n  // the node.\n  cut(from, to) {\n    if (from == 0 && to == this.content.size) return this\n    return this.copy(this.content.cut(from, to))\n  }\n\n  // :: (number, ?number) → Slice\n  // Cut out the part of the document between the given positions, and\n  // return it as a `Slice` object.\n  slice(from, to = this.content.size, includeParents = false) {\n    if (from == to) return Slice.empty\n\n    let $from = this.resolve(from), $to = this.resolve(to)\n    let depth = includeParents ? 0 : $from.sharedDepth(to)\n    let start = $from.start(depth), node = $from.node(depth)\n    let content = node.content.cut($from.pos - start, $to.pos - start)\n    return new Slice(content, $from.depth - depth, $to.depth - depth)\n  }\n\n  // :: (number, number, Slice) → Node\n  // Replace the part of the document between the given positions with\n  // the given slice. The slice must 'fit', meaning its open sides\n  // must be able to connect to the surrounding content, and its\n  // content nodes must be valid children for the node they are placed\n  // into. If any of this is violated, an error of type\n  // [`ReplaceError`](#model.ReplaceError) is thrown.\n  replace(from, to, slice) {\n    return replace(this.resolve(from), this.resolve(to), slice)\n  }\n\n  // :: (number) → ?Node\n  // Find the node directly after the given position.\n  nodeAt(pos) {\n    for (let node = this;;) {\n      let {index, offset} = node.content.findIndex(pos)\n      node = node.maybeChild(index)\n      if (!node) return null\n      if (offset == pos || node.isText) return node\n      pos -= offset + 1\n    }\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node after the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childAfter(pos) {\n    let {index, offset} = this.content.findIndex(pos)\n    return {node: this.content.maybeChild(index), index, offset}\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node before the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childBefore(pos) {\n    if (pos == 0) return {node: null, index: 0, offset: 0}\n    let {index, offset} = this.content.findIndex(pos)\n    if (offset < pos) return {node: this.content.child(index), index, offset}\n    let node = this.content.child(index - 1)\n    return {node, index: index - 1, offset: offset - node.nodeSize}\n  }\n\n  // :: (number) → ResolvedPos\n  // Resolve the given position in the document, returning an\n  // [object](#model.ResolvedPos) with information about its context.\n  resolve(pos) { return ResolvedPos.resolveCached(this, pos) }\n\n  resolveNoCache(pos) { return ResolvedPos.resolve(this, pos) }\n\n  // :: (number, number, union<Mark, MarkType>) → bool\n  // Test whether a given mark or mark type occurs in this document\n  // between the two given positions.\n  rangeHasMark(from, to, type) {\n    let found = false\n    if (to > from) this.nodesBetween(from, to, node => {\n      if (type.isInSet(node.marks)) found = true\n      return !found\n    })\n    return found\n  }\n\n  // :: bool\n  // True when this is a block (non-inline node)\n  get isBlock() { return this.type.isBlock }\n\n  // :: bool\n  // True when this is a textblock node, a block node with inline\n  // content.\n  get isTextblock() { return this.type.isTextblock }\n\n  // :: bool\n  // True when this node allows inline content.\n  get inlineContent() { return this.type.inlineContent }\n\n  // :: bool\n  // True when this is an inline node (a text node or a node that can\n  // appear among text).\n  get isInline() { return this.type.isInline }\n\n  // :: bool\n  // True when this is a text node.\n  get isText() { return this.type.isText }\n\n  // :: bool\n  // True when this is a leaf node.\n  get isLeaf() { return this.type.isLeaf }\n\n  // :: bool\n  // True when this is an atom, i.e. when it does not have directly\n  // editable content. This is usually the same as `isLeaf`, but can\n  // be configured with the [`atom` property](#model.NodeSpec.atom) on\n  // a node's spec (typically used when the node is displayed as an\n  // uneditable [node view](#view.NodeView)).\n  get isAtom() { return this.type.isAtom }\n\n  // :: () → string\n  // Return a string representation of this node for debugging\n  // purposes.\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    let name = this.type.name\n    if (this.content.size)\n      name += \"(\" + this.content.toStringInner() + \")\"\n    return wrapMarks(this.marks, name)\n  }\n\n  // :: (number) → ContentMatch\n  // Get the content match in this node at the given index.\n  contentMatchAt(index) {\n    let match = this.type.contentMatch.matchFragment(this.content, 0, index)\n    if (!match) throw new Error(\"Called contentMatchAt on a node with invalid content\")\n    return match\n  }\n\n  // :: (number, number, ?Fragment, ?number, ?number) → bool\n  // Test whether replacing the range between `from` and `to` (by\n  // child index) with the given replacement fragment (which defaults\n  // to the empty fragment) would leave the node's content valid. You\n  // can optionally pass `start` and `end` indices into the\n  // replacement fragment.\n  canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {\n    let one = this.contentMatchAt(from).matchFragment(replacement, start, end)\n    let two = one && one.matchFragment(this.content, to)\n    if (!two || !two.validEnd) return false\n    for (let i = start; i < end; i++) if (!this.type.allowsMarks(replacement.child(i).marks)) return false\n    return true\n  }\n\n  // :: (number, number, NodeType, ?[Mark]) → bool\n  // Test whether replacing the range `from` to `to` (by index) with a\n  // node of the given type would leave the node's content valid.\n  canReplaceWith(from, to, type, marks) {\n    if (marks && !this.type.allowsMarks(marks)) return false\n    let start = this.contentMatchAt(from).matchType(type)\n    let end = start && start.matchFragment(this.content, to)\n    return end ? end.validEnd : false\n  }\n\n  // :: (Node) → bool\n  // Test whether the given node's content could be appended to this\n  // node. If that node is empty, this will only return true if there\n  // is at least one node type that can appear in both nodes (to avoid\n  // merging completely incompatible nodes).\n  canAppend(other) {\n    if (other.content.size) return this.canReplace(this.childCount, this.childCount, other.content)\n    else return this.type.compatibleContent(other.type)\n  }\n\n  // :: ()\n  // Check whether this node and its descendants conform to the\n  // schema, and raise error when they do not.\n  check() {\n    if (!this.type.validContent(this.content))\n      throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0, 50)}`)\n    let copy = Mark.none\n    for (let i = 0; i < this.marks.length; i++) copy = this.marks[i].addToSet(copy)\n    if (!Mark.sameSet(copy, this.marks))\n      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`)\n    this.content.forEach(node => node.check())\n  }\n\n  // :: () → Object\n  // Return a JSON-serializeable representation of this node.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    if (this.content.size)\n      obj.content = this.content.toJSON()\n    if (this.marks.length)\n      obj.marks = this.marks.map(n => n.toJSON())\n    return obj\n  }\n\n  // :: (Schema, Object) → Node\n  // Deserialize a node from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Node.fromJSON\")\n    let marks = null\n    if (json.marks) {\n      if (!Array.isArray(json.marks)) throw new RangeError(\"Invalid mark data for Node.fromJSON\")\n      marks = json.marks.map(schema.markFromJSON)\n    }\n    if (json.type == \"text\") {\n      if (typeof json.text != \"string\") throw new RangeError(\"Invalid text node in JSON\")\n      return schema.text(json.text, marks)\n    }\n    let content = Fragment.fromJSON(schema, json.content)\n    return schema.nodeType(json.type).create(json.attrs, content, marks)\n  }\n}\n\nexport class TextNode extends Node {\n  constructor(type, attrs, content, marks) {\n    super(type, attrs, null, marks)\n\n    if (!content) throw new RangeError(\"Empty text nodes are not allowed\")\n\n    this.text = content\n  }\n\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    return wrapMarks(this.marks, JSON.stringify(this.text))\n  }\n\n  get textContent() { return this.text }\n\n  textBetween(from, to) { return this.text.slice(from, to) }\n\n  get nodeSize() { return this.text.length }\n\n  mark(marks) {\n    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks)\n  }\n\n  withText(text) {\n    if (text == this.text) return this\n    return new TextNode(this.type, this.attrs, text, this.marks)\n  }\n\n  cut(from = 0, to = this.text.length) {\n    if (from == 0 && to == this.text.length) return this\n    return this.withText(this.text.slice(from, to))\n  }\n\n  eq(other) {\n    return this.sameMarkup(other) && this.text == other.text\n  }\n\n  toJSON() {\n    let base = super.toJSON()\n    base.text = this.text\n    return base\n  }\n}\n\nfunction wrapMarks(marks, str) {\n  for (let i = marks.length - 1; i >= 0; i--)\n    str = marks[i].type.name + \"(\" + str + \")\"\n  return str\n}\n","import {Fragment} from \"./fragment\"\n\n// ::- Instances of this class represent a match state of a node\n// type's [content expression](#model.NodeSpec.content), and can be\n// used to find out whether further content matches here, and whether\n// a given position is a valid end of the node.\nexport class ContentMatch {\n  constructor(validEnd) {\n    // :: bool\n    // True when this match state represents a valid end of the node.\n    this.validEnd = validEnd\n    this.next = []\n    this.wrapCache = []\n  }\n\n  static parse(string, nodeTypes) {\n    let stream = new TokenStream(string, nodeTypes)\n    if (stream.next == null) return ContentMatch.empty\n    let expr = parseExpr(stream)\n    if (stream.next) stream.err(\"Unexpected trailing text\")\n    let match = dfa(nfa(expr))\n    checkForDeadEnds(match, stream)\n    return match\n  }\n\n  // :: (NodeType) → ?ContentMatch\n  // Match a node type, returning a match after that node if\n  // successful.\n  matchType(type) {\n    for (let i = 0; i < this.next.length; i += 2)\n      if (this.next[i] == type) return this.next[i + 1]\n    return null\n  }\n\n  // :: (Fragment, ?number, ?number) → ?ContentMatch\n  // Try to match a fragment. Returns the resulting match when\n  // successful.\n  matchFragment(frag, start = 0, end = frag.childCount) {\n    let cur = this\n    for (let i = start; cur && i < end; i++)\n      cur = cur.matchType(frag.child(i).type)\n    return cur\n  }\n\n  get inlineContent() {\n    let first = this.next[0]\n    return first ? first.isInline : false\n  }\n\n  // :: ?NodeType\n  // Get the first matching node type at this match position that can\n  // be generated.\n  get defaultType() {\n    for (let i = 0; i < this.next.length; i += 2) {\n      let type = this.next[i]\n      if (!(type.isText || type.hasRequiredAttrs())) return type\n    }\n  }\n\n  compatible(other) {\n    for (let i = 0; i < this.next.length; i += 2)\n      for (let j = 0; j < other.next.length; j += 2)\n        if (this.next[i] == other.next[j]) return true\n    return false\n  }\n\n  // :: (Fragment, bool, ?number) → ?Fragment\n  // Try to match the given fragment, and if that fails, see if it can\n  // be made to match by inserting nodes in front of it. When\n  // successful, return a fragment of inserted nodes (which may be\n  // empty if nothing had to be inserted). When `toEnd` is true, only\n  // return a fragment if the resulting match goes to the end of the\n  // content expression.\n  fillBefore(after, toEnd = false, startIndex = 0) {\n    let seen = [this]\n    function search(match, types) {\n      let finished = match.matchFragment(after, startIndex)\n      if (finished && (!toEnd || finished.validEnd))\n        return Fragment.from(types.map(tp => tp.createAndFill()))\n\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i], next = match.next[i + 1]\n        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n          seen.push(next)\n          let found = search(next, types.concat(type))\n          if (found) return found\n        }\n      }\n    }\n\n    return search(this, [])\n  }\n\n  // :: (NodeType) → ?[NodeType]\n  // Find a set of wrapping node types that would allow a node of the\n  // given type to appear at this position. The result may be empty\n  // (when it fits directly) and will be null when no such wrapping\n  // exists.\n  findWrapping(target) {\n    for (let i = 0; i < this.wrapCache.length; i += 2)\n      if (this.wrapCache[i] == target) return this.wrapCache[i + 1]\n    let computed = this.computeWrapping(target)\n    this.wrapCache.push(target, computed)\n    return computed\n  }\n\n  computeWrapping(target) {\n    let seen = Object.create(null), active = [{match: this, type: null, via: null}]\n    while (active.length) {\n      let current = active.shift(), match = current.match\n      if (match.matchType(target)) {\n        let result = []\n        for (let obj = current; obj.type; obj = obj.via)\n          result.push(obj.type)\n        return result.reverse()\n      }\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i]\n        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {\n          active.push({match: type.contentMatch, type, via: current})\n          seen[type.name] = true\n        }\n      }\n    }\n  }\n\n  // :: number\n  // The number of outgoing edges this node has in the finite\n  // automaton that describes the content expression.\n  get edgeCount() {\n    return this.next.length >> 1\n  }\n\n  // :: (number) → {type: NodeType, next: ContentMatch}\n  // Get the _n_​th outgoing edge from this node in the finite\n  // automaton that describes the content expression.\n  edge(n) {\n    let i = n << 1\n    if (i >= this.next.length) throw new RangeError(`There's no ${n}th edge in this content match`)\n    return {type: this.next[i], next: this.next[i + 1]}\n  }\n\n  toString() {\n    let seen = []\n    function scan(m) {\n      seen.push(m)\n      for (let i = 1; i < m.next.length; i += 2)\n        if (seen.indexOf(m.next[i]) == -1) scan(m.next[i])\n    }\n    scan(this)\n    return seen.map((m, i) => {\n      let out = i + (m.validEnd ? \"*\" : \" \") + \" \"\n      for (let i = 0; i < m.next.length; i += 2)\n        out += (i ? \", \" : \"\") + m.next[i].name + \"->\" + seen.indexOf(m.next[i + 1])\n      return out\n    }).join(\"\\n\")\n  }\n}\n\nContentMatch.empty = new ContentMatch(true)\n\nclass TokenStream {\n  constructor(string, nodeTypes) {\n    this.string = string\n    this.nodeTypes = nodeTypes\n    this.inline = null\n    this.pos = 0\n    this.tokens = string.split(/\\s*(?=\\b|\\W|$)/)\n    if (this.tokens[this.tokens.length - 1] == \"\") this.tokens.pop()\n    if (this.tokens[0] == \"\") this.tokens.shift()\n  }\n\n  get next() { return this.tokens[this.pos] }\n\n  eat(tok) { return this.next == tok && (this.pos++ || true) }\n\n  err(str) { throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\") }\n}\n\nfunction parseExpr(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSeq(stream)) }\n  while (stream.eat(\"|\"))\n  return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n}\n\nfunction parseExprSeq(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSubscript(stream)) }\n  while (stream.next && stream.next != \")\" && stream.next != \"|\")\n  return exprs.length == 1 ? exprs[0] : {type: \"seq\", exprs}\n}\n\nfunction parseExprSubscript(stream) {\n  let expr = parseExprAtom(stream)\n  for (;;) {\n    if (stream.eat(\"+\"))\n      expr = {type: \"plus\", expr}\n    else if (stream.eat(\"*\"))\n      expr = {type: \"star\", expr}\n    else if (stream.eat(\"?\"))\n      expr = {type: \"opt\", expr}\n    else if (stream.eat(\"{\"))\n      expr = parseExprRange(stream, expr)\n    else break\n  }\n  return expr\n}\n\nfunction parseNum(stream) {\n  if (/\\D/.test(stream.next)) stream.err(\"Expected number, got '\" + stream.next + \"'\")\n  let result = Number(stream.next)\n  stream.pos++\n  return result\n}\n\nfunction parseExprRange(stream, expr) {\n  let min = parseNum(stream), max = min\n  if (stream.eat(\",\")) {\n    if (stream.next != \"}\") max = parseNum(stream)\n    else max = -1\n  }\n  if (!stream.eat(\"}\")) stream.err(\"Unclosed braced range\")\n  return {type: \"range\", min, max, expr}\n}\n\nfunction resolveName(stream, name) {\n  let types = stream.nodeTypes, type = types[name]\n  if (type) return [type]\n  let result = []\n  for (let typeName in types) {\n    let type = types[typeName]\n    if (type.groups.indexOf(name) > -1) result.push(type)\n  }\n  if (result.length == 0) stream.err(\"No node type or group '\" + name + \"' found\")\n  return result\n}\n\nfunction parseExprAtom(stream) {\n  if (stream.eat(\"(\")) {\n    let expr = parseExpr(stream)\n    if (!stream.eat(\")\")) stream.err(\"Missing closing paren\")\n    return expr\n  } else if (!/\\W/.test(stream.next)) {\n    let exprs = resolveName(stream, stream.next).map(type => {\n      if (stream.inline == null) stream.inline = type.isInline\n      else if (stream.inline != type.isInline) stream.err(\"Mixing inline and block content\")\n      return {type: \"name\", value: type}\n    })\n    stream.pos++\n    return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n  } else {\n    stream.err(\"Unexpected token '\" + stream.next + \"'\")\n  }\n}\n\n// The code below helps compile a regular-expression-like language\n// into a deterministic finite automaton. For a good introduction to\n// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html\n\n// : (Object) → [[{term: ?any, to: number}]]\n// Construct an NFA from an expression as returned by the parser. The\n// NFA is represented as an array of states, which are themselves\n// arrays of edges, which are `{term, to}` objects. The first state is\n// the entry state and the last node is the success state.\n//\n// Note that unlike typical NFAs, the edge ordering in this one is\n// significant, in that it is used to contruct filler content when\n// necessary.\nfunction nfa(expr) {\n  let nfa = [[]]\n  connect(compile(expr, 0), node())\n  return nfa\n\n  function node() { return nfa.push([]) - 1 }\n  function edge(from, to, term) {\n    let edge = {term, to}\n    nfa[from].push(edge)\n    return edge\n  }\n  function connect(edges, to) { edges.forEach(edge => edge.to = to) }\n\n  function compile(expr, from) {\n    if (expr.type == \"choice\") {\n      return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), [])\n    } else if (expr.type == \"seq\") {\n      for (let i = 0;; i++) {\n        let next = compile(expr.exprs[i], from)\n        if (i == expr.exprs.length - 1) return next\n        connect(next, from = node())\n      }\n    } else if (expr.type == \"star\") {\n      let loop = node()\n      edge(from, loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"plus\") {\n      let loop = node()\n      connect(compile(expr.expr, from), loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"opt\") {\n      return [edge(from)].concat(compile(expr.expr, from))\n    } else if (expr.type == \"range\") {\n      let cur = from\n      for (let i = 0; i < expr.min; i++) {\n        let next = node()\n        connect(compile(expr.expr, cur), next)\n        cur = next\n      }\n      if (expr.max == -1) {\n        connect(compile(expr.expr, cur), cur)\n      } else {\n        for (let i = expr.min; i < expr.max; i++) {\n          let next = node()\n          edge(cur, next)\n          connect(compile(expr.expr, cur), next)\n          cur = next\n        }\n      }\n      return [edge(cur)]\n    } else if (expr.type == \"name\") {\n      return [edge(from, null, expr.value)]\n    }\n  }\n}\n\nfunction cmp(a, b) { return b - a }\n\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n  let result = []\n  scan(node)\n  return result.sort(cmp)\n\n  function scan(node) {\n    let edges = nfa[node]\n    if (edges.length == 1 && !edges[0].term) return scan(edges[0].to)\n    result.push(node)\n    for (let i = 0; i < edges.length; i++) {\n      let {term, to} = edges[i]\n      if (!term && result.indexOf(to) == -1) scan(to)\n    }\n  }\n}\n\n// : ([[{term: ?any, to: number}]]) → ContentMatch\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n  let labeled = Object.create(null)\n  return explore(nullFrom(nfa, 0))\n\n  function explore(states) {\n    let out = []\n    states.forEach(node => {\n      nfa[node].forEach(({term, to}) => {\n        if (!term) return\n        let known = out.indexOf(term), set = known > -1 && out[known + 1]\n        nullFrom(nfa, to).forEach(node => {\n          if (!set) out.push(term, set = [])\n          if (set.indexOf(node) == -1) set.push(node)\n        })\n      })\n    })\n    let state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1)\n    for (let i = 0; i < out.length; i += 2) {\n      let states = out[i + 1].sort(cmp)\n      state.next.push(out[i], labeled[states.join(\",\")] || explore(states))\n    }\n    return state\n  }\n}\n\nfunction checkForDeadEnds(match, stream) {\n  for (let i = 0, work = [match]; i < work.length; i++) {\n    let state = work[i], dead = !state.validEnd, nodes = []\n    for (let j = 0; j < state.next.length; j += 2) {\n      let node = state.next[j], next = state.next[j + 1]\n      nodes.push(node.name)\n      if (dead && !(node.isText || node.hasRequiredAttrs())) dead = false\n      if (work.indexOf(next) == -1) work.push(next)\n    }\n    if (dead) stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position (see https://prosemirror.net/docs/guide/#generatable)\")\n  }\n}\n","import OrderedMap from \"orderedmap\"\n\nimport {Node, TextNode} from \"./node\"\nimport {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {ContentMatch} from \"./content\"\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n  let defaults = Object.create(null)\n  for (let attrName in attrs) {\n    let attr = attrs[attrName]\n    if (!attr.hasDefault) return null\n    defaults[attrName] = attr.default\n  }\n  return defaults\n}\n\nfunction computeAttrs(attrs, value) {\n  let built = Object.create(null)\n  for (let name in attrs) {\n    let given = value && value[name]\n    if (given === undefined) {\n      let attr = attrs[name]\n      if (attr.hasDefault) given = attr.default\n      else throw new RangeError(\"No value supplied for attribute \" + name)\n    }\n    built[name] = given\n  }\n  return built\n}\n\nfunction initAttrs(attrs) {\n  let result = Object.create(null)\n  if (attrs) for (let name in attrs) result[name] = new Attribute(attrs[name])\n  return result\n}\n\n// ::- Node types are objects allocated once per `Schema` and used to\n// [tag](#model.Node.type) `Node` instances. They contain information\n// about the node type, such as its name and what kind of node it\n// represents.\nexport class NodeType {\n  constructor(name, schema, spec) {\n    // :: string\n    // The name the node type has in this schema.\n    this.name = name\n\n    // :: Schema\n    // A link back to the `Schema` the node type belongs to.\n    this.schema = schema\n\n    // :: NodeSpec\n    // The spec that this type is based on\n    this.spec = spec\n\n    this.groups = spec.group ? spec.group.split(\" \") : []\n    this.attrs = initAttrs(spec.attrs)\n\n    this.defaultAttrs = defaultAttrs(this.attrs)\n\n    // :: ContentMatch\n    // The starting match of the node type's content expression.\n    this.contentMatch = null\n\n    // : ?[MarkType]\n    // The set of marks allowed in this node. `null` means all marks\n    // are allowed.\n    this.markSet = null\n\n    // :: bool\n    // True if this node type has inline content.\n    this.inlineContent = null\n\n    // :: bool\n    // True if this is a block type\n    this.isBlock = !(spec.inline || name == \"text\")\n\n    // :: bool\n    // True if this is the text node type.\n    this.isText = name == \"text\"\n  }\n\n  // :: bool\n  // True if this is an inline type.\n  get isInline() { return !this.isBlock }\n\n  // :: bool\n  // True if this is a textblock type, a block that contains inline\n  // content.\n  get isTextblock() { return this.isBlock && this.inlineContent }\n\n  // :: bool\n  // True for node types that allow no content.\n  get isLeaf() { return this.contentMatch == ContentMatch.empty }\n\n  // :: bool\n  // True when this node is an atom, i.e. when it does not have\n  // directly editable content.\n  get isAtom() { return this.isLeaf || this.spec.atom }\n\n  // :: union<\"pre\", \"normal\">\n  // The node type's [whitespace](#view.NodeSpec.whitespace) option.\n  get whitespace() { return this.spec.whitespace || (this.spec.code ? \"pre\" : \"normal\") }\n\n  // :: () → bool\n  // Tells you whether this node type has any required attributes.\n  hasRequiredAttrs() {\n    for (let n in this.attrs) if (this.attrs[n].isRequired) return true\n    return false\n  }\n\n  compatibleContent(other) {\n    return this == other || this.contentMatch.compatible(other.contentMatch)\n  }\n\n  computeAttrs(attrs) {\n    if (!attrs && this.defaultAttrs) return this.defaultAttrs\n    else return computeAttrs(this.attrs, attrs)\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a `Node` of this type. The given attributes are\n  // checked and defaulted (you can pass `null` to use the type's\n  // defaults entirely, if no required attributes exist). `content`\n  // may be a `Fragment`, a node, an array of nodes, or\n  // `null`. Similarly `marks` may be `null` to default to the empty\n  // set of marks.\n  create(attrs, content, marks) {\n    if (this.isText) throw new Error(\"NodeType.create can't construct text nodes\")\n    return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Like [`create`](#model.NodeType.create), but check the given content\n  // against the node type's content restrictions, and throw an error\n  // if it doesn't match.\n  createChecked(attrs, content, marks) {\n    content = Fragment.from(content)\n    if (!this.validContent(content))\n      throw new RangeError(\"Invalid content for node \" + this.name)\n    return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node\n  // Like [`create`](#model.NodeType.create), but see if it is necessary to\n  // add nodes to the start or end of the given fragment to make it\n  // fit the node. If no fitting wrapping can be found, return null.\n  // Note that, due to the fact that required nodes can always be\n  // created, this will always succeed if you pass null or\n  // `Fragment.empty` as content.\n  createAndFill(attrs, content, marks) {\n    attrs = this.computeAttrs(attrs)\n    content = Fragment.from(content)\n    if (content.size) {\n      let before = this.contentMatch.fillBefore(content)\n      if (!before) return null\n      content = before.append(content)\n    }\n    let after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true)\n    if (!after) return null\n    return new Node(this, attrs, content.append(after), Mark.setFrom(marks))\n  }\n\n  // :: (Fragment) → bool\n  // Returns true if the given fragment is valid content for this node\n  // type with the given attributes.\n  validContent(content) {\n    let result = this.contentMatch.matchFragment(content)\n    if (!result || !result.validEnd) return false\n    for (let i = 0; i < content.childCount; i++)\n      if (!this.allowsMarks(content.child(i).marks)) return false\n    return true\n  }\n\n  // :: (MarkType) → bool\n  // Check whether the given mark type is allowed in this node.\n  allowsMarkType(markType) {\n    return this.markSet == null || this.markSet.indexOf(markType) > -1\n  }\n\n  // :: ([Mark]) → bool\n  // Test whether the given set of marks are allowed in this node.\n  allowsMarks(marks) {\n    if (this.markSet == null) return true\n    for (let i = 0; i < marks.length; i++) if (!this.allowsMarkType(marks[i].type)) return false\n    return true\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Removes the marks that are not allowed in this node from the given set.\n  allowedMarks(marks) {\n    if (this.markSet == null) return marks\n    let copy\n    for (let i = 0; i < marks.length; i++) {\n      if (!this.allowsMarkType(marks[i].type)) {\n        if (!copy) copy = marks.slice(0, i)\n      } else if (copy) {\n        copy.push(marks[i])\n      }\n    }\n    return !copy ? marks : copy.length ? copy : Mark.empty\n  }\n\n  static compile(nodes, schema) {\n    let result = Object.create(null)\n    nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec))\n\n    let topType = schema.spec.topNode || \"doc\"\n    if (!result[topType]) throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\")\n    if (!result.text) throw new RangeError(\"Every schema needs a 'text' type\")\n    for (let _ in result.text.attrs) throw new RangeError(\"The text node type should not have attributes\")\n\n    return result\n  }\n}\n\n// Attribute descriptors\n\nclass Attribute {\n  constructor(options) {\n    this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\")\n    this.default = options.default\n  }\n\n  get isRequired() {\n    return !this.hasDefault\n  }\n}\n\n// Marks\n\n// ::- Like nodes, marks (which are associated with nodes to signify\n// things like emphasis or being part of a link) are\n// [tagged](#model.Mark.type) with type objects, which are\n// instantiated once per `Schema`.\nexport class MarkType {\n  constructor(name, rank, schema, spec) {\n    // :: string\n    // The name of the mark type.\n    this.name = name\n\n    // :: Schema\n    // The schema that this mark type instance is part of.\n    this.schema = schema\n\n    // :: MarkSpec\n    // The spec on which the type is based.\n    this.spec = spec\n\n    this.attrs = initAttrs(spec.attrs)\n\n    this.rank = rank\n    this.excluded = null\n    let defaults = defaultAttrs(this.attrs)\n    this.instance = defaults && new Mark(this, defaults)\n  }\n\n  // :: (?Object) → Mark\n  // Create a mark of this type. `attrs` may be `null` or an object\n  // containing only some of the mark's attributes. The others, if\n  // they have defaults, will be added.\n  create(attrs) {\n    if (!attrs && this.instance) return this.instance\n    return new Mark(this, computeAttrs(this.attrs, attrs))\n  }\n\n  static compile(marks, schema) {\n    let result = Object.create(null), rank = 0\n    marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec))\n    return result\n  }\n\n  // :: ([Mark]) → [Mark]\n  // When there is a mark of this type in the given set, a new set\n  // without it is returned. Otherwise, the input set is returned.\n  removeFromSet(set) {\n    for (var i = 0; i < set.length; i++) if (set[i].type == this) {\n      set = set.slice(0, i).concat(set.slice(i + 1))\n      i--\n    }\n    return set\n  }\n\n  // :: ([Mark]) → ?Mark\n  // Tests whether there is a mark of this type in the given set.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (set[i].type == this) return set[i]\n  }\n\n  // :: (MarkType) → bool\n  // Queries whether a given mark type is\n  // [excluded](#model.MarkSpec.excludes) by this one.\n  excludes(other) {\n    return this.excluded.indexOf(other) > -1\n  }\n}\n\n// SchemaSpec:: interface\n// An object describing a schema, as passed to the [`Schema`](#model.Schema)\n// constructor.\n//\n//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>\n//   The node types in this schema. Maps names to\n//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type\n//   associated with that name. Their order is significant—it\n//   determines which [parse rules](#model.NodeSpec.parseDOM) take\n//   precedence by default, and which nodes come first in a given\n//   [group](#model.NodeSpec.group).\n//\n//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>\n//   The mark types that exist in this schema. The order in which they\n//   are provided determines the order in which [mark\n//   sets](#model.Mark.addToSet) are sorted and in which [parse\n//   rules](#model.MarkSpec.parseDOM) are tried.\n//\n//   topNode:: ?string\n//   The name of the default top-level node for the schema. Defaults\n//   to `\"doc\"`.\n\n// NodeSpec:: interface\n//\n//   content:: ?string\n//   The content expression for this node, as described in the [schema\n//   guide](/docs/guide/#schema.content_expressions). When not given,\n//   the node does not allow any content.\n//\n//   marks:: ?string\n//   The marks that are allowed inside of this node. May be a\n//   space-separated string referring to mark names or groups, `\"_\"`\n//   to explicitly allow all marks, or `\"\"` to disallow marks. When\n//   not given, nodes with inline content default to allowing all\n//   marks, other nodes default to not allowing marks.\n//\n//   group:: ?string\n//   The group or space-separated groups to which this node belongs,\n//   which can be referred to in the content expressions for the\n//   schema.\n//\n//   inline:: ?bool\n//   Should be set to true for inline nodes. (Implied for text nodes.)\n//\n//   atom:: ?bool\n//   Can be set to true to indicate that, though this isn't a [leaf\n//   node](#model.NodeType.isLeaf), it doesn't have directly editable\n//   content and should be treated as a single unit in the view.\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that nodes of this type get.\n//\n//   selectable:: ?bool\n//   Controls whether nodes of this type can be selected as a [node\n//   selection](#state.NodeSelection). Defaults to true for non-text\n//   nodes.\n//\n//   draggable:: ?bool\n//   Determines whether nodes of this type can be dragged without\n//   being selected. Defaults to false.\n//\n//   code:: ?bool\n//   Can be used to indicate that this node contains code, which\n//   causes some commands to behave differently.\n//\n//   whitespace:: ?union<\"pre\", \"normal\">\n//   Controls way whitespace in this a node is parsed. The default is\n//   `\"normal\"`, which causes the [DOM parser](#model.DOMParser) to\n//   collapse whitespace in normal mode, and normalize it (replacing\n//   newlines and such with spaces) otherwise. `\"pre\"` causes the\n//   parser to preserve spaces inside the node. When this option isn't\n//   given, but [`code`](#model.NodeSpec.code) is true, `whitespace`\n//   will default to `\"pre\"`. Note that this option doesn't influence\n//   the way the node is rendered—that should be handled by `toDOM`\n//   and/or styling.\n//\n//   defining:: ?bool\n//   Determines whether this node is considered an important parent\n//   node during replace operations (such as paste). Non-defining (the\n//   default) nodes get dropped when their entire content is replaced,\n//   whereas defining nodes persist and wrap the inserted content.\n//   Likewise, in _inserted_ content the defining parents of the\n//   content are preserved when possible. Typically,\n//   non-default-paragraph textblock types, and possibly list items,\n//   are marked as defining.\n//\n//   isolating:: ?bool\n//   When enabled (default is false), the sides of nodes of this type\n//   count as boundaries that regular editing operations, like\n//   backspacing or lifting, won't cross. An example of a node that\n//   should probably have this enabled is a table cell.\n//\n//   toDOM:: ?(node: Node) → DOMOutputSpec\n//   Defines the default way a node of this type should be serialized\n//   to DOM/HTML (as used by\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\n//   Should return a DOM node or an [array\n//   structure](#model.DOMOutputSpec) that describes one, with an\n//   optional number zero (“hole”) in it to indicate where the node's\n//   content should be inserted.\n//\n//   For text nodes, the default is to create a text DOM node. Though\n//   it is possible to create a serializer where text is rendered\n//   differently, this is not supported inside the editor, so you\n//   shouldn't override that in your text node spec.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this node, which can be\n//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\n//   automatically derive a parser. The `node` field in the rules is\n//   implied (the name of this node will be filled in automatically).\n//   If you supply your own parser, you do not need to also specify\n//   parsing rules in your schema.\n//\n//   toDebugString:: ?(node: Node) -> string\n//   Defines the default way a node of this type should be serialized\n//   to a string representation for debugging (e.g. in error messages).\n\n// MarkSpec:: interface\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that marks of this type get.\n//\n//   inclusive:: ?bool\n//   Whether this mark should be active when the cursor is positioned\n//   at its end (or at its start when that is also the start of the\n//   parent node). Defaults to true.\n//\n//   excludes:: ?string\n//   Determines which other marks this mark can coexist with. Should\n//   be a space-separated strings naming other marks or groups of marks.\n//   When a mark is [added](#model.Mark.addToSet) to a set, all marks\n//   that it excludes are removed in the process. If the set contains\n//   any mark that excludes the new mark but is not, itself, excluded\n//   by the new mark, the mark can not be added an the set. You can\n//   use the value `\"_\"` to indicate that the mark excludes all\n//   marks in the schema.\n//\n//   Defaults to only being exclusive with marks of the same type. You\n//   can set it to an empty string (or any string not containing the\n//   mark's own name) to allow multiple marks of a given type to\n//   coexist (as long as they have different attributes).\n//\n//   group:: ?string\n//   The group or space-separated groups to which this mark belongs.\n//\n//   spanning:: ?bool\n//   Determines whether marks of this type can span multiple adjacent\n//   nodes when serialized to DOM/HTML. Defaults to true.\n//\n//   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec\n//   Defines the default way marks of this type should be serialized\n//   to DOM/HTML. When the resulting spec contains a hole, that is\n//   where the marked content is placed. Otherwise, it is appended to\n//   the top node.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this mark (see the\n//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The\n//   `mark` field in the rules is implied.\n\n// AttributeSpec:: interface\n//\n// Used to [define](#model.NodeSpec.attrs) attributes on nodes or\n// marks.\n//\n//   default:: ?any\n//   The default value for this attribute, to use when no explicit\n//   value is provided. Attributes that have no default must be\n//   provided whenever a node or mark of a type that has them is\n//   created.\n\n// ::- A document schema. Holds [node](#model.NodeType) and [mark\n// type](#model.MarkType) objects for the nodes and marks that may\n// occur in conforming documents, and provides functionality for\n// creating and deserializing such documents.\nexport class Schema {\n  // :: (SchemaSpec)\n  // Construct a schema from a schema [specification](#model.SchemaSpec).\n  constructor(spec) {\n    // :: SchemaSpec\n    // The [spec](#model.SchemaSpec) on which the schema is based,\n    // with the added guarantee that its `nodes` and `marks`\n    // properties are\n    // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\n    // (not raw objects).\n    this.spec = {}\n    for (let prop in spec) this.spec[prop] = spec[prop]\n    this.spec.nodes = OrderedMap.from(spec.nodes)\n    this.spec.marks = OrderedMap.from(spec.marks)\n\n    // :: Object<NodeType>\n    // An object mapping the schema's node names to node type objects.\n    this.nodes = NodeType.compile(this.spec.nodes, this)\n\n    // :: Object<MarkType>\n    // A map from mark names to mark type objects.\n    this.marks = MarkType.compile(this.spec.marks, this)\n\n    let contentExprCache = Object.create(null)\n    for (let prop in this.nodes) {\n      if (prop in this.marks)\n        throw new RangeError(prop + \" can not be both a node and a mark\")\n      let type = this.nodes[prop], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks\n      type.contentMatch = contentExprCache[contentExpr] ||\n        (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes))\n      type.inlineContent = type.contentMatch.inlineContent\n      type.markSet = markExpr == \"_\" ? null :\n        markExpr ? gatherMarks(this, markExpr.split(\" \")) :\n        markExpr == \"\" || !type.inlineContent ? [] : null\n    }\n    for (let prop in this.marks) {\n      let type = this.marks[prop], excl = type.spec.excludes\n      type.excluded = excl == null ? [type] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"))\n    }\n\n    this.nodeFromJSON = this.nodeFromJSON.bind(this)\n    this.markFromJSON = this.markFromJSON.bind(this)\n\n    // :: NodeType\n    // The type of the [default top node](#model.SchemaSpec.topNode)\n    // for this schema.\n    this.topNodeType = this.nodes[this.spec.topNode || \"doc\"]\n\n    // :: Object\n    // An object for storing whatever values modules may want to\n    // compute and cache per schema. (If you want to store something\n    // in it, try to use property names unlikely to clash.)\n    this.cached = Object.create(null)\n    this.cached.wrappings = Object.create(null)\n  }\n\n  // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a node in this schema. The `type` may be a string or a\n  // `NodeType` instance. Attributes will be extended\n  // with defaults, `content` may be a `Fragment`,\n  // `null`, a `Node`, or an array of nodes.\n  node(type, attrs, content, marks) {\n    if (typeof type == \"string\")\n      type = this.nodeType(type)\n    else if (!(type instanceof NodeType))\n      throw new RangeError(\"Invalid node type: \" + type)\n    else if (type.schema != this)\n      throw new RangeError(\"Node type from different schema used (\" + type.name + \")\")\n\n    return type.createChecked(attrs, content, marks)\n  }\n\n  // :: (string, ?[Mark]) → Node\n  // Create a text node in the schema. Empty text nodes are not\n  // allowed.\n  text(text, marks) {\n    let type = this.nodes.text\n    return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks))\n  }\n\n  // :: (union<string, MarkType>, ?Object) → Mark\n  // Create a mark with the given type and attributes.\n  mark(type, attrs) {\n    if (typeof type == \"string\") type = this.marks[type]\n    return type.create(attrs)\n  }\n\n  // :: (Object) → Node\n  // Deserialize a node from its JSON representation. This method is\n  // bound.\n  nodeFromJSON(json) {\n    return Node.fromJSON(this, json)\n  }\n\n  // :: (Object) → Mark\n  // Deserialize a mark from its JSON representation. This method is\n  // bound.\n  markFromJSON(json) {\n    return Mark.fromJSON(this, json)\n  }\n\n  nodeType(name) {\n    let found = this.nodes[name]\n    if (!found) throw new RangeError(\"Unknown node type: \" + name)\n    return found\n  }\n}\n\nfunction gatherMarks(schema, marks) {\n  let found = []\n  for (let i = 0; i < marks.length; i++) {\n    let name = marks[i], mark = schema.marks[name], ok = mark\n    if (mark) {\n      found.push(mark)\n    } else {\n      for (let prop in schema.marks) {\n        let mark = schema.marks[prop]\n        if (name == \"_\" || (mark.spec.group && mark.spec.group.split(\" \").indexOf(name) > -1))\n          found.push(ok = mark)\n      }\n    }\n    if (!ok) throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\")\n  }\n  return found\n}\n","import {Fragment} from \"./fragment\"\nimport {Slice} from \"./replace\"\nimport {Mark} from \"./mark\"\n\n// ParseOptions:: interface\n// These are the options recognized by the\n// [`parse`](#model.DOMParser.parse) and\n// [`parseSlice`](#model.DOMParser.parseSlice) methods.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   By default, whitespace is collapsed as per HTML's rules. Pass\n//   `true` to preserve whitespace, but normalize newlines to\n//   spaces, and `\"full\"` to preserve whitespace entirely.\n//\n//   findPositions:: ?[{node: dom.Node, offset: number}]\n//   When given, the parser will, beside parsing the content,\n//   record the document positions of the given DOM positions. It\n//   will do so by writing to the objects, adding a `pos` property\n//   that holds the document position. DOM positions that are not\n//   in the parsed content will not be written to.\n//\n//   from:: ?number\n//   The child node index to start parsing from.\n//\n//   to:: ?number\n//   The child node index to stop parsing at.\n//\n//   topNode:: ?Node\n//   By default, the content is parsed into the schema's default\n//   [top node type](#model.Schema.topNodeType). You can pass this\n//   option to use the type and attributes from a different node\n//   as the top container.\n//\n//   topMatch:: ?ContentMatch\n//   Provide the starting content match that content parsed into the\n//   top node is matched against.\n//\n//   context:: ?ResolvedPos\n//   A set of additional nodes to count as\n//   [context](#model.ParseRule.context) when parsing, above the\n//   given [top node](#model.ParseOptions.topNode).\n\n// ParseRule:: interface\n// A value that describes how to parse a given DOM node or inline\n// style as a ProseMirror node or mark.\n//\n//   tag:: ?string\n//   A CSS selector describing the kind of DOM elements to match. A\n//   single rule should have _either_ a `tag` or a `style` property.\n//\n//   namespace:: ?string\n//   The namespace to match. This should be used with `tag`.\n//   Nodes are only matched when the namespace matches or this property\n//   is null.\n//\n//   style:: ?string\n//   A CSS property name to match. When given, this rule matches\n//   inline styles that list that property. May also have the form\n//   `\"property=value\"`, in which case the rule only matches if the\n//   property's value exactly matches the given value. (For more\n//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)\n//   and return false to indicate that the match failed.) Rules\n//   matching styles may only produce [marks](#model.ParseRule.mark),\n//   not nodes.\n//\n//   priority:: ?number\n//   Can be used to change the order in which the parse rules in a\n//   schema are tried. Those with higher priority come first. Rules\n//   without a priority are counted as having priority 50. This\n//   property is only meaningful in a schema—when directly\n//   constructing a parser, the order of the rule array is used.\n//\n//   consuming:: ?boolean\n//   By default, when a rule matches an element or style, no further\n//   rules get a chance to match it. By setting this to `false`, you\n//   indicate that even when this rule matches, other rules that come\n//   after it should also run.\n//\n//   context:: ?string\n//   When given, restricts this rule to only match when the current\n//   context—the parent nodes into which the content is being\n//   parsed—matches this expression. Should contain one or more node\n//   names or node group names followed by single or double slashes.\n//   For example `\"paragraph/\"` means the rule only matches when the\n//   parent node is a paragraph, `\"blockquote/paragraph/\"` restricts\n//   it to be in a paragraph that is inside a blockquote, and\n//   `\"section//\"` matches any position inside a section—a double\n//   slash matches any sequence of ancestor nodes. To allow multiple\n//   different contexts, they can be separated by a pipe (`|`)\n//   character, as in `\"blockquote/|list_item/\"`.\n//\n//   node:: ?string\n//   The name of the node type to create when this rule matches. Only\n//   valid for rules with a `tag` property, not for style rules. Each\n//   rule should have one of a `node`, `mark`, or `ignore` property\n//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or\n//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`\n//   or `mark` property will be derived from its position).\n//\n//   mark:: ?string\n//   The name of the mark type to wrap the matched content in.\n//\n//   ignore:: ?bool\n//   When true, ignore content that matches this rule.\n//\n//   closeParent:: ?bool\n//   When true, finding an element that matches this rule will close\n//   the current node.\n//\n//   skip:: ?bool\n//   When true, ignore the node that matches this rule, but do parse\n//   its content.\n//\n//   attrs:: ?Object\n//   Attributes for the node or mark created by this rule. When\n//   `getAttrs` is provided, it takes precedence.\n//\n//   getAttrs:: ?(union<dom.Node, string>) → ?union<Object, false>\n//   A function used to compute the attributes for the node or mark\n//   created by this rule. Can also be used to describe further\n//   conditions the DOM element or style must match. When it returns\n//   `false`, the rule won't match. When it returns null or undefined,\n//   that is interpreted as an empty/default set of attributes.\n//\n//   Called with a DOM Element for `tag` rules, and with a string (the\n//   style's value) for `style` rules.\n//\n//   contentElement:: ?union<string, (dom.Node) → dom.Node>\n//   For `tag` rules that produce non-leaf nodes or marks, by default\n//   the content of the DOM element is parsed as content of the mark\n//   or node. If the child nodes are in a descendent node, this may be\n//   a CSS selector string that the parser must use to find the actual\n//   content element, or a function that returns the actual content\n//   element to the parser.\n//\n//   getContent:: ?(dom.Node, schema: Schema) → Fragment\n//   Can be used to override the content of a matched node. When\n//   present, instead of parsing the node's child nodes, the result of\n//   this function is used.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   Controls whether whitespace should be preserved when parsing the\n//   content inside the matched element. `false` means whitespace may\n//   be collapsed, `true` means that whitespace should be preserved\n//   but newlines normalized to spaces, and `\"full\"` means that\n//   newlines should also be preserved.\n\n// ::- A DOM parser represents a strategy for parsing DOM content into\n// a ProseMirror document conforming to a given schema. Its behavior\n// is defined by an array of [rules](#model.ParseRule).\nexport class DOMParser {\n  // :: (Schema, [ParseRule])\n  // Create a parser that targets the given schema, using the given\n  // parsing rules.\n  constructor(schema, rules) {\n    // :: Schema\n    // The schema into which the parser parses.\n    this.schema = schema\n    // :: [ParseRule]\n    // The set of [parse rules](#model.ParseRule) that the parser\n    // uses, in order of precedence.\n    this.rules = rules\n    this.tags = []\n    this.styles = []\n\n    rules.forEach(rule => {\n      if (rule.tag) this.tags.push(rule)\n      else if (rule.style) this.styles.push(rule)\n    })\n\n    // Only normalize list elements when lists in the schema can't directly contain themselves\n    this.normalizeLists = !this.tags.some(r => {\n      if (!/^(ul|ol)\\b/.test(r.tag) || !r.node) return false\n      let node = schema.nodes[r.node]\n      return node.contentMatch.matchType(node)\n    })\n  }\n\n  // :: (dom.Node, ?ParseOptions) → Node\n  // Parse a document from the content of a DOM node.\n  parse(dom, options = {}) {\n    let context = new ParseContext(this, options, false)\n    context.addAll(dom, null, options.from, options.to)\n    return context.finish()\n  }\n\n  // :: (dom.Node, ?ParseOptions) → Slice\n  // Parses the content of the given DOM node, like\n  // [`parse`](#model.DOMParser.parse), and takes the same set of\n  // options. But unlike that method, which produces a whole node,\n  // this one returns a slice that is open at the sides, meaning that\n  // the schema constraints aren't applied to the start of nodes to\n  // the left of the input and the end of nodes at the end.\n  parseSlice(dom, options = {}) {\n    let context = new ParseContext(this, options, true)\n    context.addAll(dom, null, options.from, options.to)\n    return Slice.maxOpen(context.finish())\n  }\n\n  matchTag(dom, context, after) {\n    for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {\n      let rule = this.tags[i]\n      if (matches(dom, rule.tag) &&\n          (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&\n          (!rule.context || context.matchesContext(rule.context))) {\n        if (rule.getAttrs) {\n          let result = rule.getAttrs(dom)\n          if (result === false) continue\n          rule.attrs = result\n        }\n        return rule\n      }\n    }\n  }\n\n  matchStyle(prop, value, context, after) {\n    for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {\n      let rule = this.styles[i]\n      if (rule.style.indexOf(prop) != 0 ||\n          rule.context && !context.matchesContext(rule.context) ||\n          // Test that the style string either precisely matches the prop,\n          // or has an '=' sign after the prop, followed by the given\n          // value.\n          rule.style.length > prop.length &&\n          (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value))\n        continue\n      if (rule.getAttrs) {\n        let result = rule.getAttrs(value)\n        if (result === false) continue\n        rule.attrs = result\n      }\n      return rule\n    }\n  }\n\n  // : (Schema) → [ParseRule]\n  static schemaRules(schema) {\n    let result = []\n    function insert(rule) {\n      let priority = rule.priority == null ? 50 : rule.priority, i = 0\n      for (; i < result.length; i++) {\n        let next = result[i], nextPriority = next.priority == null ? 50 : next.priority\n        if (nextPriority < priority) break\n      }\n      result.splice(i, 0, rule)\n    }\n\n    for (let name in schema.marks) {\n      let rules = schema.marks[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.mark = name\n      })\n    }\n    for (let name in schema.nodes) {\n      let rules = schema.nodes[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.node = name\n      })\n    }\n    return result\n  }\n\n  // :: (Schema) → DOMParser\n  // Construct a DOM parser using the parsing rules listed in a\n  // schema's [node specs](#model.NodeSpec.parseDOM), reordered by\n  // [priority](#model.ParseRule.priority).\n  static fromSchema(schema) {\n    return schema.cached.domParser ||\n      (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)))\n  }\n}\n\n// : Object<bool> The block-level tags in HTML5\nconst blockTags = {\n  address: true, article: true, aside: true, blockquote: true, canvas: true,\n  dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,\n  footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,\n  h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,\n  output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true\n}\n\n// : Object<bool> The tags that we normally ignore.\nconst ignoreTags = {\n  head: true, noscript: true, object: true, script: true, style: true, title: true\n}\n\n// : Object<bool> List tags.\nconst listTags = {ol: true, ul: true}\n\n// Using a bitfield for node context options\nconst OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4\n\nfunction wsOptionsFor(type, preserveWhitespace, base) {\n  if (preserveWhitespace != null) return (preserveWhitespace ? OPT_PRESERVE_WS : 0) |\n    (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0)\n  return type && type.whitespace == \"pre\" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base & ~OPT_OPEN_LEFT\n}\n\nclass NodeContext {\n  constructor(type, attrs, marks, pendingMarks, solid, match, options) {\n    this.type = type\n    this.attrs = attrs\n    this.solid = solid\n    this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch)\n    this.options = options\n    this.content = []\n    // Marks applied to this node itself\n    this.marks = marks\n    // Marks applied to its children\n    this.activeMarks = Mark.none\n    // Marks that can't apply here, but will be used in children if possible\n    this.pendingMarks = pendingMarks\n    // Nested Marks with same type\n    this.stashMarks = []\n  }\n\n  findWrapping(node) {\n    if (!this.match) {\n      if (!this.type) return []\n      let fill = this.type.contentMatch.fillBefore(Fragment.from(node))\n      if (fill) {\n        this.match = this.type.contentMatch.matchFragment(fill)\n      } else {\n        let start = this.type.contentMatch, wrap\n        if (wrap = start.findWrapping(node.type)) {\n          this.match = start\n          return wrap\n        } else {\n          return null\n        }\n      }\n    }\n    return this.match.findWrapping(node.type)\n  }\n\n  finish(openEnd) {\n    if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace\n      let last = this.content[this.content.length - 1], m\n      if (last && last.isText && (m = /[ \\t\\r\\n\\u000c]+$/.exec(last.text))) {\n        if (last.text.length == m[0].length) this.content.pop()\n        else this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length))\n      }\n    }\n    let content = Fragment.from(this.content)\n    if (!openEnd && this.match)\n      content = content.append(this.match.fillBefore(Fragment.empty, true))\n    return this.type ? this.type.create(this.attrs, content, this.marks) : content\n  }\n\n  popFromStashMark(mark) {\n    for (let i = this.stashMarks.length - 1; i >= 0; i--)\n      if (mark.eq(this.stashMarks[i])) return this.stashMarks.splice(i, 1)[0]\n  }\n\n  applyPending(nextType) {\n    for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {\n      let mark = pending[i]\n      if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&\n          !mark.isInSet(this.activeMarks)) {\n        this.activeMarks = mark.addToSet(this.activeMarks)\n        this.pendingMarks = mark.removeFromSet(this.pendingMarks)\n      }\n    }\n  }\n\n  inlineContext(node) {\n    if (this.type) return this.type.inlineContent\n    if (this.content.length) return this.content[0].isInline\n    return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase())\n  }\n}\n\nclass ParseContext {\n  // : (DOMParser, Object)\n  constructor(parser, options, open) {\n    // : DOMParser The parser we are using.\n    this.parser = parser\n    // : Object The options passed to this parse.\n    this.options = options\n    this.isOpen = open\n    let topNode = options.topNode, topContext\n    let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (open ? OPT_OPEN_LEFT : 0)\n    if (topNode)\n      topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true,\n                                   options.topMatch || topNode.type.contentMatch, topOptions)\n    else if (open)\n      topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions)\n    else\n      topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions)\n    this.nodes = [topContext]\n    // : [Mark] The current set of marks\n    this.open = 0\n    this.find = options.findPositions\n    this.needsBlock = false\n  }\n\n  get top() {\n    return this.nodes[this.open]\n  }\n\n  // : (dom.Node)\n  // Add a DOM node to the content. Text is inserted as text node,\n  // otherwise, the node is passed to `addElement` or, if it has a\n  // `style` attribute, `addElementWithStyles`.\n  addDOM(dom) {\n    if (dom.nodeType == 3) {\n      this.addTextNode(dom)\n    } else if (dom.nodeType == 1) {\n      let style = dom.getAttribute(\"style\")\n      let marks = style ? this.readStyles(parseStyles(style)) : null, top = this.top\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.addPendingMark(marks[i])\n      this.addElement(dom)\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.removePendingMark(marks[i], top)\n    }\n  }\n\n  addTextNode(dom) {\n    let value = dom.nodeValue\n    let top = this.top\n    if (top.options & OPT_PRESERVE_WS_FULL ||\n        top.inlineContext(dom) ||\n        /[^ \\t\\r\\n\\u000c]/.test(value)) {\n      if (!(top.options & OPT_PRESERVE_WS)) {\n        value = value.replace(/[ \\t\\r\\n\\u000c]+/g, \" \")\n        // If this starts with whitespace, and there is no node before it, or\n        // a hard break, or a text node that ends with whitespace, strip the\n        // leading space.\n        if (/^[ \\t\\r\\n\\u000c]/.test(value) && this.open == this.nodes.length - 1) {\n          let nodeBefore = top.content[top.content.length - 1]\n          let domNodeBefore = dom.previousSibling\n          if (!nodeBefore ||\n              (domNodeBefore && domNodeBefore.nodeName == 'BR') ||\n              (nodeBefore.isText && /[ \\t\\r\\n\\u000c]$/.test(nodeBefore.text)))\n            value = value.slice(1)\n        }\n      } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n        value = value.replace(/\\r?\\n|\\r/g, \" \")\n      } else {\n        value = value.replace(/\\r\\n?/g, \"\\n\")\n      }\n      if (value) this.insertNode(this.parser.schema.text(value))\n      this.findInText(dom)\n    } else {\n      this.findInside(dom)\n    }\n  }\n\n  // : (dom.Element, ?ParseRule)\n  // Try to find a handler for the given tag and use that to parse. If\n  // none is found, the element's content nodes are added directly.\n  addElement(dom, matchAfter) {\n    let name = dom.nodeName.toLowerCase(), ruleID\n    if (listTags.hasOwnProperty(name) && this.parser.normalizeLists) normalizeList(dom)\n    let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||\n        (ruleID = this.parser.matchTag(dom, this, matchAfter))\n    if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n      this.findInside(dom)\n      this.ignoreFallback(dom)\n    } else if (!rule || rule.skip || rule.closeParent) {\n      if (rule && rule.closeParent) this.open = Math.max(0, this.open - 1)\n      else if (rule && rule.skip.nodeType) dom = rule.skip\n      let sync, top = this.top, oldNeedsBlock = this.needsBlock\n      if (blockTags.hasOwnProperty(name)) {\n        sync = true\n        if (!top.type) this.needsBlock = true\n      } else if (!dom.firstChild) {\n        this.leafFallback(dom)\n        return\n      }\n      this.addAll(dom)\n      if (sync) this.sync(top)\n      this.needsBlock = oldNeedsBlock\n    } else {\n      this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : null)\n    }\n  }\n\n  // Called for leaf DOM nodes that would otherwise be ignored\n  leafFallback(dom) {\n    if (dom.nodeName == \"BR\" && this.top.type && this.top.type.inlineContent)\n      this.addTextNode(dom.ownerDocument.createTextNode(\"\\n\"))\n  }\n\n  // Called for ignored nodes\n  ignoreFallback(dom) {\n    // Ignored BR nodes should at least create an inline context\n    if (dom.nodeName == \"BR\" && (!this.top.type || !this.top.type.inlineContent))\n      this.findPlace(this.parser.schema.text(\"-\"))\n  }\n\n  // Run any style parser associated with the node's styles. Either\n  // return an array of marks, or null to indicate some of the styles\n  // had a rule with `ignore` set.\n  readStyles(styles) {\n    let marks = Mark.none\n    style: for (let i = 0; i < styles.length; i += 2) {\n      for (let after = null;;) {\n        let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after)\n        if (!rule) continue style\n        if (rule.ignore) return null\n        marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks)\n        if (rule.consuming === false) after = rule\n        else break\n      }\n    }\n    return marks\n  }\n\n  // : (dom.Element, ParseRule) → bool\n  // Look up a handler for the given node. If none are found, return\n  // false. Otherwise, apply it, use its return value to drive the way\n  // the node's content is wrapped, and return true.\n  addElementByRule(dom, rule, continueAfter) {\n    let sync, nodeType, markType, mark\n    if (rule.node) {\n      nodeType = this.parser.schema.nodes[rule.node]\n      if (!nodeType.isLeaf) {\n        sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace)\n      } else if (!this.insertNode(nodeType.create(rule.attrs))) {\n        this.leafFallback(dom)\n      }\n    } else {\n      markType = this.parser.schema.marks[rule.mark]\n      mark = markType.create(rule.attrs)\n      this.addPendingMark(mark)\n    }\n    let startIn = this.top\n\n    if (nodeType && nodeType.isLeaf) {\n      this.findInside(dom)\n    } else if (continueAfter) {\n      this.addElement(dom, continueAfter)\n    } else if (rule.getContent) {\n      this.findInside(dom)\n      rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node))\n    } else {\n      let contentDOM = rule.contentElement\n      if (typeof contentDOM == \"string\") contentDOM = dom.querySelector(contentDOM)\n      else if (typeof contentDOM == \"function\") contentDOM = contentDOM(dom)\n      if (!contentDOM) contentDOM = dom\n      this.findAround(dom, contentDOM, true)\n      this.addAll(contentDOM, sync)\n    }\n    if (sync) { this.sync(startIn); this.open-- }\n    if (mark) this.removePendingMark(mark, startIn)\n  }\n\n  // : (dom.Node, ?NodeBuilder, ?number, ?number)\n  // Add all child nodes between `startIndex` and `endIndex` (or the\n  // whole node, if not given). If `sync` is passed, use it to\n  // synchronize after every block element.\n  addAll(parent, sync, startIndex, endIndex) {\n    let index = startIndex || 0\n    for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild,\n             end = endIndex == null ? null : parent.childNodes[endIndex];\n         dom != end; dom = dom.nextSibling, ++index) {\n      this.findAtPoint(parent, index)\n      this.addDOM(dom)\n      if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase()))\n        this.sync(sync)\n    }\n    this.findAtPoint(parent, index)\n  }\n\n  // Try to find a way to fit the given node type into the current\n  // context. May add intermediate wrappers and/or leave non-solid\n  // nodes that we're in.\n  findPlace(node) {\n    let route, sync\n    for (let depth = this.open; depth >= 0; depth--) {\n      let cx = this.nodes[depth]\n      let found = cx.findWrapping(node)\n      if (found && (!route || route.length > found.length)) {\n        route = found\n        sync = cx\n        if (!found.length) break\n      }\n      if (cx.solid) break\n    }\n    if (!route) return false\n    this.sync(sync)\n    for (let i = 0; i < route.length; i++)\n      this.enterInner(route[i], null, false)\n    return true\n  }\n\n  // : (Node) → ?Node\n  // Try to insert the given node, adjusting the context when needed.\n  insertNode(node) {\n    if (node.isInline && this.needsBlock && !this.top.type) {\n      let block = this.textblockFromContext()\n      if (block) this.enterInner(block)\n    }\n    if (this.findPlace(node)) {\n      this.closeExtra()\n      let top = this.top\n      top.applyPending(node.type)\n      if (top.match) top.match = top.match.matchType(node.type)\n      let marks = top.activeMarks\n      for (let i = 0; i < node.marks.length; i++)\n        if (!top.type || top.type.allowsMarkType(node.marks[i].type))\n          marks = node.marks[i].addToSet(marks)\n      top.content.push(node.mark(marks))\n      return true\n    }\n    return false\n  }\n\n  // : (NodeType, ?Object) → bool\n  // Try to start a node of the given type, adjusting the context when\n  // necessary.\n  enter(type, attrs, preserveWS) {\n    let ok = this.findPlace(type.create(attrs))\n    if (ok) this.enterInner(type, attrs, true, preserveWS)\n    return ok\n  }\n\n  // Open a node of the given type\n  enterInner(type, attrs, solid, preserveWS) {\n    this.closeExtra()\n    let top = this.top\n    top.applyPending(type)\n    top.match = top.match && top.match.matchType(type, attrs)\n    let options = wsOptionsFor(type, preserveWS, top.options)\n    if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0) options |= OPT_OPEN_LEFT\n    this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options))\n    this.open++\n  }\n\n  // Make sure all nodes above this.open are finished and added to\n  // their parents\n  closeExtra(openEnd) {\n    let i = this.nodes.length - 1\n    if (i > this.open) {\n      for (; i > this.open; i--) this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd))\n      this.nodes.length = this.open + 1\n    }\n  }\n\n  finish() {\n    this.open = 0\n    this.closeExtra(this.isOpen)\n    return this.nodes[0].finish(this.isOpen || this.options.topOpen)\n  }\n\n  sync(to) {\n    for (let i = this.open; i >= 0; i--) if (this.nodes[i] == to) {\n      this.open = i\n      return\n    }\n  }\n\n  get currentPos() {\n    this.closeExtra()\n    let pos = 0\n    for (let i = this.open; i >= 0; i--) {\n      let content = this.nodes[i].content\n      for (let j = content.length - 1; j >= 0; j--)\n        pos += content[j].nodeSize\n      if (i) pos++\n    }\n    return pos\n  }\n\n  findAtPoint(parent, offset) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == parent && this.find[i].offset == offset)\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findInside(parent) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findAround(parent, content, before) {\n    if (parent != content && this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n        let pos = content.compareDocumentPosition(this.find[i].node)\n        if (pos & (before ? 2 : 4))\n          this.find[i].pos = this.currentPos\n      }\n    }\n  }\n\n  findInText(textNode) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == textNode)\n        this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset)\n    }\n  }\n\n  // : (string) → bool\n  // Determines whether the given [context\n  // string](#ParseRule.context) matches this context.\n  matchesContext(context) {\n    if (context.indexOf(\"|\") > -1)\n      return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this)\n\n    let parts = context.split(\"/\")\n    let option = this.options.context\n    let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type)\n    let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1)\n    let match = (i, depth) => {\n      for (; i >= 0; i--) {\n        let part = parts[i]\n        if (part == \"\") {\n          if (i == parts.length - 1 || i == 0) continue\n          for (; depth >= minDepth; depth--)\n            if (match(i - 1, depth)) return true\n          return false\n        } else {\n          let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type\n              : option && depth >= minDepth ? option.node(depth - minDepth).type\n              : null\n          if (!next || (next.name != part && next.groups.indexOf(part) == -1))\n            return false\n          depth--\n        }\n      }\n      return true\n    }\n    return match(parts.length - 1, this.open)\n  }\n\n  textblockFromContext() {\n    let $context = this.options.context\n    if ($context) for (let d = $context.depth; d >= 0; d--) {\n      let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType\n      if (deflt && deflt.isTextblock && deflt.defaultAttrs) return deflt\n    }\n    for (let name in this.parser.schema.nodes) {\n      let type = this.parser.schema.nodes[name]\n      if (type.isTextblock && type.defaultAttrs) return type\n    }\n  }\n\n  addPendingMark(mark) {\n    let found = findSameMarkInSet(mark, this.top.pendingMarks)\n    if (found) this.top.stashMarks.push(found)\n    this.top.pendingMarks = mark.addToSet(this.top.pendingMarks)\n  }\n\n  removePendingMark(mark, upto) {\n    for (let depth = this.open; depth >= 0; depth--) {\n      let level = this.nodes[depth]\n      let found = level.pendingMarks.lastIndexOf(mark)\n      if (found > -1) {\n        level.pendingMarks = mark.removeFromSet(level.pendingMarks)\n      } else {\n        level.activeMarks = mark.removeFromSet(level.activeMarks)\n        let stashMark = level.popFromStashMark(mark)\n        if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))\n          level.activeMarks = stashMark.addToSet(level.activeMarks)\n      }\n      if (level == upto) break\n    }\n  }\n}\n\n// Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n  for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n    let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null\n    if (name && listTags.hasOwnProperty(name) && prevItem) {\n      prevItem.appendChild(child)\n      child = prevItem\n    } else if (name == \"li\") {\n      prevItem = child\n    } else if (name) {\n      prevItem = null\n    }\n  }\n}\n\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector)\n}\n\n// : (string) → [string]\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n  let re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g, m, result = []\n  while (m = re.exec(style)) result.push(m[1], m[2].trim())\n  return result\n}\n\nfunction copy(obj) {\n  let copy = {}\n  for (let prop in obj) copy[prop] = obj[prop]\n  return copy\n}\n\n// Used when finding a mark at the top level of a fragment parse.\n// Checks whether it would be reasonable to apply a given mark type to\n// a given node, by looking at the way the mark occurs in the schema.\nfunction markMayApply(markType, nodeType) {\n  let nodes = nodeType.schema.nodes\n  for (let name in nodes) {\n    let parent = nodes[name]\n    if (!parent.allowsMarkType(markType)) continue\n    let seen = [], scan = match => {\n      seen.push(match)\n      for (let i = 0; i < match.edgeCount; i++) {\n        let {type, next} = match.edge(i)\n        if (type == nodeType) return true\n        if (seen.indexOf(next) < 0 && scan(next)) return true\n      }\n    }\n    if (scan(parent.contentMatch)) return true\n  }\n}\n\nfunction findSameMarkInSet(mark, set) {\n  for (let i = 0; i < set.length; i++) {\n    if (mark.eq(set[i])) return set[i]\n  }\n}\n","// DOMOutputSpec:: interface\n// A description of a DOM structure. Can be either a string, which is\n// interpreted as a text node, a DOM node, which is interpreted as\n// itself, a `{dom: Node, contentDOM: ?Node}` object, or an array.\n//\n// An array describes a DOM element. The first value in the array\n// should be a string—the name of the DOM element, optionally prefixed\n// by a namespace URL and a space. If the second element is plain\n// object, it is interpreted as a set of attributes for the element.\n// Any elements after that (including the 2nd if it's not an attribute\n// object) are interpreted as children of the DOM elements, and must\n// either be valid `DOMOutputSpec` values, or the number zero.\n//\n// The number zero (pronounced “hole”) is used to indicate the place\n// where a node's child nodes should be inserted. If it occurs in an\n// output spec, it should be the only child element in its parent\n// node.\n\n// ::- A DOM serializer knows how to convert ProseMirror nodes and\n// marks of various types to DOM nodes.\nexport class DOMSerializer {\n  // :: (Object<(node: Node) → DOMOutputSpec>, Object<?(mark: Mark, inline: bool) → DOMOutputSpec>)\n  // Create a serializer. `nodes` should map node names to functions\n  // that take a node and return a description of the corresponding\n  // DOM. `marks` does the same for mark names, but also gets an\n  // argument that tells it whether the mark's content is block or\n  // inline content (for typical use, it'll always be inline). A mark\n  // serializer may be `null` to indicate that marks of that type\n  // should not be serialized.\n  constructor(nodes, marks) {\n    // :: Object<(node: Node) → DOMOutputSpec>\n    // The node serialization functions.\n    this.nodes = nodes || {}\n    // :: Object<?(mark: Mark, inline: bool) → DOMOutputSpec>\n    // The mark serialization functions.\n    this.marks = marks || {}\n  }\n\n  // :: (Fragment, ?Object) → dom.DocumentFragment\n  // Serialize the content of this fragment to a DOM fragment. When\n  // not in the browser, the `document` option, containing a DOM\n  // document, should be passed so that the serializer can create\n  // nodes.\n  serializeFragment(fragment, options = {}, target) {\n    if (!target) target = doc(options).createDocumentFragment()\n\n    let top = target, active = null\n    fragment.forEach(node => {\n      if (active || node.marks.length) {\n        if (!active) active = []\n        let keep = 0, rendered = 0\n        while (keep < active.length && rendered < node.marks.length) {\n          let next = node.marks[rendered]\n          if (!this.marks[next.type.name]) { rendered++; continue }\n          if (!next.eq(active[keep]) || next.type.spec.spanning === false) break\n          keep += 2; rendered++\n        }\n        while (keep < active.length) {\n          top = active.pop()\n          active.pop()\n        }\n        while (rendered < node.marks.length) {\n          let add = node.marks[rendered++]\n          let markDOM = this.serializeMark(add, node.isInline, options)\n          if (markDOM) {\n            active.push(add, top)\n            top.appendChild(markDOM.dom)\n            top = markDOM.contentDOM || markDOM.dom\n          }\n        }\n      }\n      top.appendChild(this.serializeNodeInner(node, options))\n    })\n\n    return target\n  }\n\n  serializeNodeInner(node, options = {}) {\n    let {dom, contentDOM} =\n        DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node))\n    if (contentDOM) {\n      if (node.isLeaf)\n        throw new RangeError(\"Content hole not allowed in a leaf node spec\")\n      if (options.onContent)\n        options.onContent(node, contentDOM, options)\n      else\n        this.serializeFragment(node.content, options, contentDOM)\n    }\n    return dom\n  }\n\n  // :: (Node, ?Object) → dom.Node\n  // Serialize this node to a DOM node. This can be useful when you\n  // need to serialize a part of a document, as opposed to the whole\n  // document. To serialize a whole document, use\n  // [`serializeFragment`](#model.DOMSerializer.serializeFragment) on\n  // its [content](#model.Node.content).\n  serializeNode(node, options = {}) {\n    let dom = this.serializeNodeInner(node, options)\n    for (let i = node.marks.length - 1; i >= 0; i--) {\n      let wrap = this.serializeMark(node.marks[i], node.isInline, options)\n      if (wrap) {\n        ;(wrap.contentDOM || wrap.dom).appendChild(dom)\n        dom = wrap.dom\n      }\n    }\n    return dom\n  }\n\n  serializeMark(mark, inline, options = {}) {\n    let toDOM = this.marks[mark.type.name]\n    return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline))\n  }\n\n  // :: (dom.Document, DOMOutputSpec) → {dom: dom.Node, contentDOM: ?dom.Node}\n  // Render an [output spec](#model.DOMOutputSpec) to a DOM node. If\n  // the spec has a hole (zero) in it, `contentDOM` will point at the\n  // node with the hole.\n  static renderSpec(doc, structure, xmlNS = null) {\n    if (typeof structure == \"string\")\n      return {dom: doc.createTextNode(structure)}\n    if (structure.nodeType != null)\n      return {dom: structure}\n    if (structure.dom && structure.dom.nodeType != null)\n      return structure\n    let tagName = structure[0], space = tagName.indexOf(\" \")\n    if (space > 0) {\n      xmlNS = tagName.slice(0, space)\n      tagName = tagName.slice(space + 1)\n    }\n    let contentDOM = null, dom = xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName)\n    let attrs = structure[1], start = 1\n    if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n      start = 2\n      for (let name in attrs) if (attrs[name] != null) {\n        let space = name.indexOf(\" \")\n        if (space > 0) dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name])\n        else dom.setAttribute(name, attrs[name])\n      }\n    }\n    for (let i = start; i < structure.length; i++) {\n      let child = structure[i]\n      if (child === 0) {\n        if (i < structure.length - 1 || i > start)\n          throw new RangeError(\"Content hole must be the only child of its parent node\")\n        return {dom, contentDOM: dom}\n      } else {\n        let {dom: inner, contentDOM: innerContent} = DOMSerializer.renderSpec(doc, child, xmlNS)\n        dom.appendChild(inner)\n        if (innerContent) {\n          if (contentDOM) throw new RangeError(\"Multiple content holes\")\n          contentDOM = innerContent\n        }\n      }\n    }\n    return {dom, contentDOM}\n  }\n\n  // :: (Schema) → DOMSerializer\n  // Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)\n  // properties in a schema's node and mark specs.\n  static fromSchema(schema) {\n    return schema.cached.domSerializer ||\n      (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)))\n  }\n\n  // : (Schema) → Object<(node: Node) → DOMOutputSpec>\n  // Gather the serializers in a schema's node specs into an object.\n  // This can be useful as a base to build a custom serializer from.\n  static nodesFromSchema(schema) {\n    let result = gatherToDOM(schema.nodes)\n    if (!result.text) result.text = node => node.text\n    return result\n  }\n\n  // : (Schema) → Object<(mark: Mark) → DOMOutputSpec>\n  // Gather the serializers in a schema's mark specs into an object.\n  static marksFromSchema(schema) {\n    return gatherToDOM(schema.marks)\n  }\n}\n\nfunction gatherToDOM(obj) {\n  let result = {}\n  for (let name in obj) {\n    let toDOM = obj[name].spec.toDOM\n    if (toDOM) result[name] = toDOM\n  }\n  return result\n}\n\nfunction doc(options) {\n  // declare global: window\n  return options.document || window.document\n}\n","// Mappable:: interface\n// There are several things that positions can be mapped through.\n// Such objects conform to this interface.\n//\n//   map:: (pos: number, assoc: ?number) → number\n//   Map a position through this object. When given, `assoc` (should\n//   be -1 or 1, defaults to 1) determines with which side the\n//   position is associated, which determines in which direction to\n//   move when a chunk of content is inserted at the mapped position.\n//\n//   mapResult:: (pos: number, assoc: ?number) → MapResult\n//   Map a position, and return an object containing additional\n//   information about the mapping. The result's `deleted` field tells\n//   you whether the position was deleted (completely enclosed in a\n//   replaced range) during the mapping. When content on only one side\n//   is deleted, the position itself is only considered deleted when\n//   `assoc` points in the direction of the deleted content.\n\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\n\nconst lower16 = 0xffff\nconst factor16 = Math.pow(2, 16)\n\nfunction makeRecover(index, offset) { return index + offset * factor16 }\nfunction recoverIndex(value) { return value & lower16 }\nfunction recoverOffset(value) { return (value - (value & lower16)) / factor16 }\n\n// ::- An object representing a mapped position with extra\n// information.\nexport class MapResult {\n  constructor(pos, deleted = false, recover = null) {\n    // :: number The mapped version of the position.\n    this.pos = pos\n    // :: bool Tells you whether the position was deleted, that is,\n    // whether the step removed its surroundings from the document.\n    this.deleted = deleted\n    this.recover = recover\n  }\n}\n\n// :: class extends Mappable\n// A map describing the deletions and insertions made by a step, which\n// can be used to find the correspondence between positions in the\n// pre-step version of a document and the same position in the\n// post-step version.\nexport class StepMap {\n  // :: ([number])\n  // Create a position map. The modifications to the document are\n  // represented as an array of numbers, in which each group of three\n  // represents a modified chunk as `[start, oldSize, newSize]`.\n  constructor(ranges, inverted = false) {\n    if (!ranges.length && StepMap.empty) return StepMap.empty\n    this.ranges = ranges\n    this.inverted = inverted\n  }\n\n  recover(value) {\n    let diff = 0, index = recoverIndex(value)\n    if (!this.inverted) for (let i = 0; i < index; i++)\n      diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1]\n    return this.ranges[index * 3] + diff + recoverOffset(value)\n  }\n\n  // : (number, ?number) → MapResult\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  // : (number, ?number) → number\n  map(pos, assoc = 1) { return this._map(pos, assoc, true) }\n\n  _map(pos, assoc, simple) {\n    let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize\n      if (pos <= end) {\n        let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc\n        let result = start + diff + (side < 0 ? 0 : newSize)\n        if (simple) return result\n        let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start)\n        return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover)\n      }\n      diff += newSize - oldSize\n    }\n    return simple ? pos + diff : new MapResult(pos + diff)\n  }\n\n  touches(pos, recover) {\n    let diff = 0, index = recoverIndex(recover)\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], end = start + oldSize\n      if (pos <= end && i == index * 3) return true\n      diff += this.ranges[i + newIndex] - oldSize\n    }\n    return false\n  }\n\n  // :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))\n  // Calls the given function on each of the changed ranges included in\n  // this map.\n  forEach(f) {\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff)\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex]\n      f(oldStart, oldStart + oldSize, newStart, newStart + newSize)\n      diff += newSize - oldSize\n    }\n  }\n\n  // :: () → StepMap\n  // Create an inverted version of this map. The result can be used to\n  // map positions in the post-step document to the pre-step document.\n  invert() {\n    return new StepMap(this.ranges, !this.inverted)\n  }\n\n  toString() {\n    return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges)\n  }\n\n  // :: (n: number) → StepMap\n  // Create a map that moves all positions by offset `n` (which may be\n  // negative). This can be useful when applying steps meant for a\n  // sub-document to a larger document, or vice-versa.\n  static offset(n) {\n    return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n])\n  }\n}\n\nStepMap.empty = new StepMap([])\n\n// :: class extends Mappable\n// A mapping represents a pipeline of zero or more [step\n// maps](#transform.StepMap). It has special provisions for losslessly\n// handling mapping positions through a series of steps in which some\n// steps are inverted versions of earlier steps. (This comes up when\n// ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for\n// collaboration or history management.)\nexport class Mapping {\n  // :: (?[StepMap])\n  // Create a new mapping with the given position maps.\n  constructor(maps, mirror, from, to) {\n    // :: [StepMap]\n    // The step maps in this mapping.\n    this.maps = maps || []\n    // :: number\n    // The starting position in the `maps` array, used when `map` or\n    // `mapResult` is called.\n    this.from = from || 0\n    // :: number\n    // The end position in the `maps` array.\n    this.to = to == null ? this.maps.length : to\n    this.mirror = mirror\n  }\n\n  // :: (?number, ?number) → Mapping\n  // Create a mapping that maps only through a part of this one.\n  slice(from = 0, to = this.maps.length) {\n    return new Mapping(this.maps, this.mirror, from, to)\n  }\n\n  copy() {\n    return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to)\n  }\n\n  // :: (StepMap, ?number)\n  // Add a step map to the end of this mapping. If `mirrors` is\n  // given, it should be the index of the step map that is the mirror\n  // image of this one.\n  appendMap(map, mirrors) {\n    this.to = this.maps.push(map)\n    if (mirrors != null) this.setMirror(this.maps.length - 1, mirrors)\n  }\n\n  // :: (Mapping)\n  // Add all the step maps in a given mapping to this one (preserving\n  // mirroring information).\n  appendMapping(mapping) {\n    for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null)\n    }\n  }\n\n  // :: (number) → ?number\n  // Finds the offset of the step map that mirrors the map at the\n  // given offset, in this mapping (as per the second argument to\n  // `appendMap`).\n  getMirror(n) {\n    if (this.mirror) for (let i = 0; i < this.mirror.length; i++)\n      if (this.mirror[i] == n) return this.mirror[i + (i % 2 ? -1 : 1)]\n  }\n\n  setMirror(n, m) {\n    if (!this.mirror) this.mirror = []\n    this.mirror.push(n, m)\n  }\n\n  // :: (Mapping)\n  // Append the inverse of the given mapping to this one.\n  appendMappingInverted(mapping) {\n    for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null)\n    }\n  }\n\n  // :: () → Mapping\n  // Create an inverted version of this mapping.\n  invert() {\n    let inverse = new Mapping\n    inverse.appendMappingInverted(this)\n    return inverse\n  }\n\n  // : (number, ?number) → number\n  // Map a position through this mapping.\n  map(pos, assoc = 1) {\n    if (this.mirror) return this._map(pos, assoc, true)\n    for (let i = this.from; i < this.to; i++)\n      pos = this.maps[i].map(pos, assoc)\n    return pos\n  }\n\n  // : (number, ?number) → MapResult\n  // Map a position through this mapping, returning a mapping\n  // result.\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  _map(pos, assoc, simple) {\n    let deleted = false\n\n    for (let i = this.from; i < this.to; i++) {\n      let map = this.maps[i], result = map.mapResult(pos, assoc)\n      if (result.recover != null) {\n        let corr = this.getMirror(i)\n        if (corr != null && corr > i && corr < this.to) {\n          i = corr\n          pos = this.maps[corr].recover(result.recover)\n          continue\n        }\n      }\n\n      if (result.deleted) deleted = true\n      pos = result.pos\n    }\n\n    return simple ? pos : new MapResult(pos, deleted)\n  }\n}\n","import {Mapping} from \"./map\"\n\nexport function TransformError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = TransformError.prototype\n  return err\n}\n\nTransformError.prototype = Object.create(Error.prototype)\nTransformError.prototype.constructor = TransformError\nTransformError.prototype.name = \"TransformError\"\n\n// ::- Abstraction to build up and track an array of\n// [steps](#transform.Step) representing a document transformation.\n//\n// Most transforming methods return the `Transform` object itself, so\n// that they can be chained.\nexport class Transform {\n  // :: (Node)\n  // Create a transform that starts with the given document.\n  constructor(doc) {\n    // :: Node\n    // The current document (the result of applying the steps in the\n    // transform).\n    this.doc = doc\n    // :: [Step]\n    // The steps in this transform.\n    this.steps = []\n    // :: [Node]\n    // The documents before each of the steps.\n    this.docs = []\n    // :: Mapping\n    // A mapping with the maps for each of the steps in this transform.\n    this.mapping = new Mapping\n  }\n\n  // :: Node The starting document.\n  get before() { return this.docs.length ? this.docs[0] : this.doc }\n\n  // :: (step: Step) → this\n  // Apply a new step in this transform, saving the result. Throws an\n  // error when the step fails.\n  step(object) {\n    let result = this.maybeStep(object)\n    if (result.failed) throw new TransformError(result.failed)\n    return this\n  }\n\n  // :: (Step) → StepResult\n  // Try to apply a step in this transformation, ignoring it if it\n  // fails. Returns the step result.\n  maybeStep(step) {\n    let result = step.apply(this.doc)\n    if (!result.failed) this.addStep(step, result.doc)\n    return result\n  }\n\n  // :: bool\n  // True when the document has been changed (when there are any\n  // steps).\n  get docChanged() {\n    return this.steps.length > 0\n  }\n\n  addStep(step, doc) {\n    this.docs.push(this.doc)\n    this.steps.push(step)\n    this.mapping.appendMap(step.getMap())\n    this.doc = doc\n  }\n}\n","import {ReplaceError} from \"prosemirror-model\"\n\nimport {StepMap} from \"./map\"\n\nfunction mustOverride() { throw new Error(\"Override me\") }\n\nconst stepsByID = Object.create(null)\n\n// ::- A step object represents an atomic change. It generally applies\n// only to the document it was created for, since the positions\n// stored in it will only make sense for that document.\n//\n// New steps are defined by creating classes that extend `Step`,\n// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\n// methods, and registering your class with a unique\n// JSON-serialization identifier using\n// [`Step.jsonID`](#transform.Step^jsonID).\nexport class Step {\n  // :: (doc: Node) → StepResult\n  // Applies this step to the given document, returning a result\n  // object that either indicates failure, if the step can not be\n  // applied to this document, or indicates success by containing a\n  // transformed document.\n  apply(_doc) { return mustOverride() }\n\n  // :: () → StepMap\n  // Get the step map that represents the changes made by this step,\n  // and which can be used to transform between positions in the old\n  // and the new document.\n  getMap() { return StepMap.empty }\n\n  // :: (doc: Node) → Step\n  // Create an inverted version of this step. Needs the document as it\n  // was before the step as argument.\n  invert(_doc) { return mustOverride() }\n\n  // :: (mapping: Mappable) → ?Step\n  // Map this step through a mappable thing, returning either a\n  // version of that step with its positions adjusted, or `null` if\n  // the step was entirely deleted by the mapping.\n  map(_mapping) { return mustOverride() }\n\n  // :: (other: Step) → ?Step\n  // Try to merge this step with another one, to be applied directly\n  // after it. Returns the merged step when possible, null if the\n  // steps can't be merged.\n  merge(_other) { return null }\n\n  // :: () → Object\n  // Create a JSON-serializeable representation of this step. When\n  // defining this for a custom subclass, make sure the result object\n  // includes the step type's [JSON id](#transform.Step^jsonID) under\n  // the `stepType` property.\n  toJSON() { return mustOverride() }\n\n  // :: (Schema, Object) → Step\n  // Deserialize a step from its JSON representation. Will call\n  // through to the step class' own implementation of this method.\n  static fromJSON(schema, json) {\n    if (!json || !json.stepType) throw new RangeError(\"Invalid input for Step.fromJSON\")\n    let type = stepsByID[json.stepType]\n    if (!type) throw new RangeError(`No step type ${json.stepType} defined`)\n    return type.fromJSON(schema, json)\n  }\n\n  // :: (string, constructor<Step>)\n  // To be able to serialize steps to JSON, each step needs a string\n  // ID to attach to its JSON representation. Use this method to\n  // register an ID for your step classes. Try to pick something\n  // that's unlikely to clash with steps from other modules.\n  static jsonID(id, stepClass) {\n    if (id in stepsByID) throw new RangeError(\"Duplicate use of step JSON ID \" + id)\n    stepsByID[id] = stepClass\n    stepClass.prototype.jsonID = id\n    return stepClass\n  }\n}\n\n// ::- The result of [applying](#transform.Step.apply) a step. Contains either a\n// new document or a failure value.\nexport class StepResult {\n  // : (?Node, ?string)\n  constructor(doc, failed) {\n    // :: ?Node The transformed document.\n    this.doc = doc\n    // :: ?string Text providing information about a failed step.\n    this.failed = failed\n  }\n\n  // :: (Node) → StepResult\n  // Create a successful step result.\n  static ok(doc) { return new StepResult(doc, null) }\n\n  // :: (string) → StepResult\n  // Create a failed step result.\n  static fail(message) { return new StepResult(null, message) }\n\n  // :: (Node, number, number, Slice) → StepResult\n  // Call [`Node.replace`](#model.Node.replace) with the given\n  // arguments. Create a successful result if it succeeds, and a\n  // failed one if it throws a `ReplaceError`.\n  static fromReplace(doc, from, to, slice) {\n    try {\n      return StepResult.ok(doc.replace(from, to, slice))\n    } catch (e) {\n      if (e instanceof ReplaceError) return StepResult.fail(e.message)\n      throw e\n    }\n  }\n}\n","import {Slice} from \"prosemirror-model\"\n\nimport {Step, StepResult} from \"./step\"\nimport {StepMap} from \"./map\"\n\n// ::- Replace a part of the document with a slice of new content.\nexport class ReplaceStep extends Step {\n  // :: (number, number, Slice, ?bool)\n  // The given `slice` should fit the 'gap' between `from` and\n  // `to`—the depths must line up, and the surrounding nodes must be\n  // able to be joined with the open sides of the slice. When\n  // `structure` is true, the step will fail if the content between\n  // from and to is not just a sequence of closing and then opening\n  // tokens (this is to guard against rebased replace steps\n  // overwriting something they weren't supposed to).\n  constructor(from, to, slice, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && contentBetween(doc, this.from, this.to))\n      return StepResult.fail(\"Structure replace would overwrite content\")\n    return StepResult.fromReplace(doc, this.from, this.to, this.slice)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.to - this.from, this.slice.size])\n  }\n\n  invert(doc) {\n    return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to))\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted) return null\n    return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice)\n  }\n\n  merge(other) {\n    if (!(other instanceof ReplaceStep) || other.structure || this.structure) return null\n\n    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd)\n      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure)\n    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd)\n      return new ReplaceStep(other.from, this.to, slice, this.structure)\n    } else {\n      return null\n    }\n  }\n\n  toJSON() {\n    let json = {stepType: \"replace\", from: this.from, to: this.to}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\")\n    return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure)\n  }\n}\n\nStep.jsonID(\"replace\", ReplaceStep)\n\n// ::- Replace a part of the document with a slice of content, but\n// preserve a range of the replaced content by moving it into the\n// slice.\nexport class ReplaceAroundStep extends Step {\n  // :: (number, number, number, number, Slice, number, ?bool)\n  // Create a replace-around step with the given range and gap.\n  // `insert` should be the point in the slice into which the content\n  // of the gap should be moved. `structure` has the same meaning as\n  // it has in the [`ReplaceStep`](#transform.ReplaceStep) class.\n  constructor(from, to, gapFrom, gapTo, slice, insert, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: number\n    // The start of preserved range.\n    this.gapFrom = gapFrom\n    // :: number\n    // The end of preserved range.\n    this.gapTo = gapTo\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    // :: number\n    // The position in the slice where the preserved range should be\n    // inserted.\n    this.insert = insert\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||\n                           contentBetween(doc, this.gapTo, this.to)))\n      return StepResult.fail(\"Structure gap-replace would overwrite content\")\n\n    let gap = doc.slice(this.gapFrom, this.gapTo)\n    if (gap.openStart || gap.openEnd)\n      return StepResult.fail(\"Gap is not a flat range\")\n    let inserted = this.slice.insertAt(this.insert, gap.content)\n    if (!inserted) return StepResult.fail(\"Content does not fit in gap\")\n    return StepResult.fromReplace(doc, this.from, this.to, inserted)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.gapFrom - this.from, this.insert,\n                        this.gapTo, this.to - this.gapTo, this.slice.size - this.insert])\n  }\n\n  invert(doc) {\n    let gap = this.gapTo - this.gapFrom\n    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap,\n                                 this.from + this.insert, this.from + this.insert + gap,\n                                 doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from),\n                                 this.gapFrom - this.from, this.structure)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1)\n    if ((from.deleted && to.deleted) || gapFrom < from.pos || gapTo > to.pos) return null\n    return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure)\n  }\n\n  toJSON() {\n    let json = {stepType: \"replaceAround\", from: this.from, to: this.to,\n                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\" ||\n        typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\")\n    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo,\n                                 Slice.fromJSON(schema, json.slice), json.insert, !!json.structure)\n  }\n}\n\nStep.jsonID(\"replaceAround\", ReplaceAroundStep)\n\nfunction contentBetween(doc, from, to) {\n  let $from = doc.resolve(from), dist = to - from, depth = $from.depth\n  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n    depth--\n    dist--\n  }\n  if (dist > 0) {\n    let next = $from.node(depth).maybeChild($from.indexAfter(depth))\n    while (dist > 0) {\n      if (!next || next.isLeaf) return true\n      next = next.firstChild\n      dist--\n    }\n  }\n  return false\n}\n","import {Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\n\nfunction canCut(node, start, end) {\n  return (start == 0 || node.canReplace(start, node.childCount)) &&\n    (end == node.childCount || node.canReplace(0, end))\n}\n\n// :: (NodeRange) → ?number\n// Try to find a target depth to which the content in the given range\n// can be lifted. Will not go across\n// [isolating](#model.NodeSpec.isolating) parent nodes.\nexport function liftTarget(range) {\n  let parent = range.parent\n  let content = parent.content.cutByIndex(range.startIndex, range.endIndex)\n  for (let depth = range.depth;; --depth) {\n    let node = range.$from.node(depth)\n    let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth)\n    if (depth < range.depth && node.canReplace(index, endIndex, content))\n      return depth\n    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) break\n  }\n}\n\n// :: (NodeRange, number) → this\n// Split the content in the given range off from its parent, if there\n// is sibling content before or after it, and move it up the tree to\n// the depth specified by `target`. You'll probably want to use\n// [`liftTarget`](#transform.liftTarget) to compute `target`, to make\n// sure the lift is valid.\nTransform.prototype.lift = function(range, target) {\n  let {$from, $to, depth} = range\n\n  let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1)\n  let start = gapStart, end = gapEnd\n\n  let before = Fragment.empty, openStart = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $from.index(d) > 0) {\n      splitting = true\n      before = Fragment.from($from.node(d).copy(before))\n      openStart++\n    } else {\n      start--\n    }\n  let after = Fragment.empty, openEnd = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $to.after(d + 1) < $to.end(d)) {\n      splitting = true\n      after = Fragment.from($to.node(d).copy(after))\n      openEnd++\n    } else {\n      end++\n    }\n\n  return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd,\n                                         new Slice(before.append(after), openStart, openEnd),\n                                         before.size - openStart, true))\n}\n\n// :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]\n// Try to find a valid way to wrap the content in the given range in a\n// node of the given type. May introduce extra nodes around and inside\n// the wrapper node, if necessary. Returns null if no valid wrapping\n// could be found. When `innerRange` is given, that range's content is\n// used as the content to fit into the wrapping, instead of the\n// content of `range`.\nexport function findWrapping(range, nodeType, attrs, innerRange = range) {\n  let around = findWrappingOutside(range, nodeType)\n  let inner = around && findWrappingInside(innerRange, nodeType)\n  if (!inner) return null\n  return around.map(withAttrs).concat({type: nodeType, attrs}).concat(inner.map(withAttrs))\n}\n\nfunction withAttrs(type) { return {type, attrs: null} }\n\nfunction findWrappingOutside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let around = parent.contentMatchAt(startIndex).findWrapping(type)\n  if (!around) return null\n  let outer = around.length ? around[0] : type\n  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null\n}\n\nfunction findWrappingInside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let inner = parent.child(startIndex)\n  let inside = type.contentMatch.findWrapping(inner.type)\n  if (!inside) return null\n  let lastType = inside.length ? inside[inside.length - 1] : type\n  let innerMatch = lastType.contentMatch\n  for (let i = startIndex; innerMatch && i < endIndex; i++)\n    innerMatch = innerMatch.matchType(parent.child(i).type)\n  if (!innerMatch || !innerMatch.validEnd) return null\n  return inside\n}\n\n// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this\n// Wrap the given [range](#model.NodeRange) in the given set of wrappers.\n// The wrappers are assumed to be valid in this position, and should\n// probably be computed with [`findWrapping`](#transform.findWrapping).\nTransform.prototype.wrap = function(range, wrappers) {\n  let content = Fragment.empty\n  for (let i = wrappers.length - 1; i >= 0; i--) {\n    if (content.size) {\n      let match = wrappers[i].type.contentMatch.matchFragment(content)\n      if (!match || !match.validEnd)\n        throw new RangeError(\"Wrapper type given to Transform.wrap does not form valid content of its parent wrapper\")\n    }\n    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content))\n  }\n\n  let start = range.start, end = range.end\n  return this.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true))\n}\n\n// :: (number, ?number, NodeType, ?Object) → this\n// Set the type of all textblocks (partly) between `from` and `to` to\n// the given node type with the given attributes.\nTransform.prototype.setBlockType = function(from, to = from, type, attrs) {\n  if (!type.isTextblock) throw new RangeError(\"Type given to setBlockType should be a textblock\")\n  let mapFrom = this.steps.length\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this.doc, this.mapping.slice(mapFrom).map(pos), type)) {\n      // Ensure all markup that isn't allowed in the new node type is cleared\n      this.clearIncompatible(this.mapping.slice(mapFrom).map(pos, 1), type)\n      let mapping = this.mapping.slice(mapFrom)\n      let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1)\n      this.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1,\n                                      new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true))\n      return false\n    }\n  })\n  return this\n}\n\nfunction canChangeType(doc, pos, type) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return $pos.parent.canReplaceWith(index, index + 1, type)\n}\n\n// :: (number, ?NodeType, ?Object, ?[Mark]) → this\n// Change the type, attributes, and/or marks of the node at `pos`.\n// When `type` isn't given, the existing node type is preserved,\nTransform.prototype.setNodeMarkup = function(pos, type, attrs, marks) {\n  let node = this.doc.nodeAt(pos)\n  if (!node) throw new RangeError(\"No node at given position\")\n  if (!type) type = node.type\n  let newNode = type.create(attrs, null, marks || node.marks)\n  if (node.isLeaf)\n    return this.replaceWith(pos, pos + node.nodeSize, newNode)\n\n  if (!type.validContent(node.content))\n    throw new RangeError(\"Invalid content for node type \" + type.name)\n\n  return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1,\n                                         new Slice(Fragment.from(newNode), 0, 0), 1, true))\n}\n\n// :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool\n// Check whether splitting at the given position is allowed.\nexport function canSplit(doc, pos, depth = 1, typesAfter) {\n  let $pos = doc.resolve(pos), base = $pos.depth - depth\n  let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent\n  if (base < 0 || $pos.parent.type.spec.isolating ||\n      !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||\n      !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))\n    return false\n  for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n    let node = $pos.node(d), index = $pos.index(d)\n    if (node.type.spec.isolating) return false\n    let rest = node.content.cutByIndex(index, node.childCount)\n    let after = (typesAfter && typesAfter[i]) || node\n    if (after != node) rest = rest.replaceChild(0, after.type.create(after.attrs))\n    if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))\n      return false\n  }\n  let index = $pos.indexAfter(base)\n  let baseType = typesAfter && typesAfter[0]\n  return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type)\n}\n\n// :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this\n// Split the node at the given position, and optionally, if `depth` is\n// greater than one, any number of nodes above that. By default, the\n// parts split off will inherit the node type of the original node.\n// This can be changed by passing an array of types and attributes to\n// use after the split.\nTransform.prototype.split = function(pos, depth = 1, typesAfter) {\n  let $pos = this.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty\n  for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n    before = Fragment.from($pos.node(d).copy(before))\n    let typeAfter = typesAfter && typesAfter[i]\n    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after))\n  }\n  return this.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true))\n}\n\n// :: (Node, number) → bool\n// Test whether the blocks before and after a given position can be\n// joined.\nexport function canJoin(doc, pos) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return joinable($pos.nodeBefore, $pos.nodeAfter) &&\n    $pos.parent.canReplace(index, index + 1)\n}\n\nfunction joinable(a, b) {\n  return a && b && !a.isLeaf && a.canAppend(b)\n}\n\n// :: (Node, number, ?number) → ?number\n// Find an ancestor of the given position that can be joined to the\n// block before (or after if `dir` is positive). Returns the joinable\n// point, if any.\nexport function joinPoint(doc, pos, dir = -1) {\n  let $pos = doc.resolve(pos)\n  for (let d = $pos.depth;; d--) {\n    let before, after, index = $pos.index(d)\n    if (d == $pos.depth) {\n      before = $pos.nodeBefore\n      after = $pos.nodeAfter\n    } else if (dir > 0) {\n      before = $pos.node(d + 1)\n      index++\n      after = $pos.node(d).maybeChild(index)\n    } else {\n      before = $pos.node(d).maybeChild(index - 1)\n      after = $pos.node(d + 1)\n    }\n    if (before && !before.isTextblock && joinable(before, after) &&\n        $pos.node(d).canReplace(index, index + 1)) return pos\n    if (d == 0) break\n    pos = dir < 0 ? $pos.before(d) : $pos.after(d)\n  }\n}\n\n// :: (number, ?number) → this\n// Join the blocks around the given position. If depth is 2, their\n// last and first siblings are also joined, and so on.\nTransform.prototype.join = function(pos, depth = 1) {\n  let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true)\n  return this.step(step)\n}\n\n// :: (Node, number, NodeType) → ?number\n// Try to find a point where a node of the given type can be inserted\n// near `pos`, by searching up the node hierarchy when `pos` itself\n// isn't a valid place but is at the start or end of a node. Return\n// null if no position was found.\nexport function insertPoint(doc, pos, nodeType) {\n  let $pos = doc.resolve(pos)\n  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) return pos\n\n  if ($pos.parentOffset == 0)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.index(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.before(d + 1)\n      if (index > 0) return null\n    }\n  if ($pos.parentOffset == $pos.parent.content.size)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.indexAfter(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.after(d + 1)\n      if (index < $pos.node(d).childCount) return null\n    }\n}\n\n// :: (Node, number, Slice) → ?number\n// Finds a position at or around the given position where the given\n// slice can be inserted. Will look at parent nodes' nearest boundary\n// and try there, even if the original position wasn't directly at the\n// start or end of that node. Returns null when no position was found.\nexport function dropPoint(doc, pos, slice) {\n  let $pos = doc.resolve(pos)\n  if (!slice.content.size) return pos\n  let content = slice.content\n  for (let i = 0; i < slice.openStart; i++) content = content.firstChild.content\n  for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n    for (let d = $pos.depth; d >= 0; d--) {\n      let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1\n      let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0)\n      let parent = $pos.node(d), fits = false\n      if (pass == 1) {\n        fits = parent.canReplace(insertPos, insertPos, content)\n      } else {\n        let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type)\n        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0])\n      }\n      if (fits)\n        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1)\n    }\n  }\n  return null\n}\n","import {Fragment, Slice} from \"prosemirror-model\"\nimport {Step, StepResult} from \"./step\"\n\nfunction mapFragment(fragment, f, parent) {\n  let mapped = []\n  for (let i = 0; i < fragment.childCount; i++) {\n    let child = fragment.child(i)\n    if (child.content.size) child = child.copy(mapFragment(child.content, f, child))\n    if (child.isInline) child = f(child, parent, i)\n    mapped.push(child)\n  }\n  return Fragment.fromArray(mapped)\n}\n\n// ::- Add a mark to all inline content between two positions.\nexport class AddMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the marked range.\n    this.from = from\n    // :: number\n    // The end of the marked range.\n    this.to = to\n    // :: Mark\n    // The mark to add.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from)\n    let parent = $from.node($from.sharedDepth(this.to))\n    let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {\n      if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type)) return node\n      return node.mark(this.mark.addToSet(node.marks))\n    }, parent), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new RemoveMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new AddMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof AddMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new AddMarkStep(Math.min(this.from, other.from),\n                             Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"addMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\")\n    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"addMark\", AddMarkStep)\n\n// ::- Remove a mark from all inline content between two positions.\nexport class RemoveMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the unmarked range.\n    this.from = from\n    // :: number\n    // The end of the unmarked range.\n    this.to = to\n    // :: Mark\n    // The mark to remove.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to)\n    let slice = new Slice(mapFragment(oldSlice.content, node => {\n      return node.mark(this.mark.removeFromSet(node.marks))\n    }), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new AddMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new RemoveMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof RemoveMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new RemoveMarkStep(Math.min(this.from, other.from),\n                                Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"removeMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\")\n    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"removeMark\", RemoveMarkStep)\n","import {Slice, Fragment} from \"prosemirror-model\"\nimport {ReplaceStep, ReplaceAroundStep} from \"prosemirror-transform\"\n\nconst classesById = Object.create(null)\n\n// ::- Superclass for editor selections. Every selection type should\n// extend this. Should not be instantiated directly.\nexport class Selection {\n  // :: (ResolvedPos, ResolvedPos, ?[SelectionRange])\n  // Initialize a selection with the head and anchor and ranges. If no\n  // ranges are given, constructs a single range across `$anchor` and\n  // `$head`.\n  constructor($anchor, $head, ranges) {\n    // :: [SelectionRange]\n    // The ranges covered by the selection.\n    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))]\n    // :: ResolvedPos\n    // The resolved anchor of the selection (the side that stays in\n    // place when the selection is modified).\n    this.$anchor = $anchor\n    // :: ResolvedPos\n    // The resolved head of the selection (the side that moves when\n    // the selection is modified).\n    this.$head = $head\n  }\n\n  // :: number\n  // The selection's anchor, as an unresolved position.\n  get anchor() { return this.$anchor.pos }\n\n  // :: number\n  // The selection's head.\n  get head() { return this.$head.pos }\n\n  // :: number\n  // The lower bound of the selection's main range.\n  get from() { return this.$from.pos }\n\n  // :: number\n  // The upper bound of the selection's main range.\n  get to() { return this.$to.pos }\n\n  // :: ResolvedPos\n  // The resolved lower  bound of the selection's main range.\n  get $from() {\n    return this.ranges[0].$from\n  }\n\n  // :: ResolvedPos\n  // The resolved upper bound of the selection's main range.\n  get $to() {\n    return this.ranges[0].$to\n  }\n\n  // :: bool\n  // Indicates whether the selection contains any content.\n  get empty() {\n    let ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++)\n      if (ranges[i].$from.pos != ranges[i].$to.pos) return false\n    return true\n  }\n\n  // eq:: (Selection) → bool\n  // Test whether the selection is the same as another selection.\n\n  // map:: (doc: Node, mapping: Mappable) → Selection\n  // Map this selection through a [mappable](#transform.Mappable) thing. `doc`\n  // should be the new document to which we are mapping.\n\n  // :: () → Slice\n  // Get the content of this selection as a slice.\n  content() {\n    return this.$from.node(0).slice(this.from, this.to, true)\n  }\n\n  // :: (Transaction, ?Slice)\n  // Replace the selection with a slice or, if no slice is given,\n  // delete the selection. Will append to the given transaction.\n  replace(tr, content = Slice.empty) {\n    // Put the new selection at the position after the inserted\n    // content. When that ended in an inline node, search backwards,\n    // to get the position after that node. If not, search forward.\n    let lastNode = content.content.lastChild, lastParent = null\n    for (let i = 0; i < content.openEnd; i++) {\n      lastParent = lastNode\n      lastNode = lastNode.lastChild\n    }\n\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content)\n      if (i == 0)\n        selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1)\n    }\n  }\n\n  // :: (Transaction, Node)\n  // Replace the selection with the given node, appending the changes\n  // to the given transaction.\n  replaceWith(tr, node) {\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      let from = mapping.map($from.pos), to = mapping.map($to.pos)\n      if (i) {\n        tr.deleteRange(from, to)\n      } else {\n        tr.replaceRangeWith(from, to, node)\n        selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1)\n      }\n    }\n  }\n\n  // toJSON:: () → Object\n  // Convert the selection to a JSON representation. When implementing\n  // this for a custom selection class, make sure to give the object a\n  // `type` property whose value matches the ID under which you\n  // [registered](#state.Selection^jsonID) your class.\n\n  // :: (ResolvedPos, number, ?bool) → ?Selection\n  // Find a valid cursor or leaf node selection starting at the given\n  // position and searching back if `dir` is negative, and forward if\n  // positive. When `textOnly` is true, only consider cursor\n  // selections. Will return null when no valid selection position is\n  // found.\n  static findFrom($pos, dir, textOnly) {\n    let inner = $pos.parent.inlineContent ? new TextSelection($pos)\n        : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly)\n    if (inner) return inner\n\n    for (let depth = $pos.depth - 1; depth >= 0; depth--) {\n      let found = dir < 0\n          ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)\n          : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly)\n      if (found) return found\n    }\n  }\n\n  // :: (ResolvedPos, ?number) → Selection\n  // Find a valid cursor or leaf node selection near the given\n  // position. Searches forward first by default, but if `bias` is\n  // negative, it will search backwards first.\n  static near($pos, bias = 1) {\n    return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0))\n  }\n\n  // :: (Node) → Selection\n  // Find the cursor or leaf node selection closest to the start of\n  // the given document. Will return an\n  // [`AllSelection`](#state.AllSelection) if no valid position\n  // exists.\n  static atStart(doc) {\n    return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc)\n  }\n\n  // :: (Node) → Selection\n  // Find the cursor or leaf node selection closest to the end of the\n  // given document.\n  static atEnd(doc) {\n    return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc)\n  }\n\n  // :: (Node, Object) → Selection\n  // Deserialize the JSON representation of a selection. Must be\n  // implemented for custom classes (as a static class method).\n  static fromJSON(doc, json) {\n    if (!json || !json.type) throw new RangeError(\"Invalid input for Selection.fromJSON\")\n    let cls = classesById[json.type]\n    if (!cls) throw new RangeError(`No selection type ${json.type} defined`)\n    return cls.fromJSON(doc, json)\n  }\n\n  // :: (string, constructor<Selection>)\n  // To be able to deserialize selections from JSON, custom selection\n  // classes must register themselves with an ID string, so that they\n  // can be disambiguated. Try to pick something that's unlikely to\n  // clash with classes from other modules.\n  static jsonID(id, selectionClass) {\n    if (id in classesById) throw new RangeError(\"Duplicate use of selection JSON ID \" + id)\n    classesById[id] = selectionClass\n    selectionClass.prototype.jsonID = id\n    return selectionClass\n  }\n\n  // :: () → SelectionBookmark\n  // Get a [bookmark](#state.SelectionBookmark) for this selection,\n  // which is a value that can be mapped without having access to a\n  // current document, and later resolved to a real selection for a\n  // given document again. (This is used mostly by the history to\n  // track and restore old selections.) The default implementation of\n  // this method just converts the selection to a text selection and\n  // returns the bookmark for that.\n  getBookmark() {\n    return TextSelection.between(this.$anchor, this.$head).getBookmark()\n  }\n}\n\n// :: bool\n// Controls whether, when a selection of this type is active in the\n// browser, the selected range should be visible to the user. Defaults\n// to `true`.\nSelection.prototype.visible = true\n\n// SelectionBookmark:: interface\n// A lightweight, document-independent representation of a selection.\n// You can define a custom bookmark type for a custom selection class\n// to make the history handle it well.\n//\n//   map:: (mapping: Mapping) → SelectionBookmark\n//   Map the bookmark through a set of changes.\n//\n//   resolve:: (doc: Node) → Selection\n//   Resolve the bookmark to a real selection again. This may need to\n//   do some error checking and may fall back to a default (usually\n//   [`TextSelection.between`](#state.TextSelection^between)) if\n//   mapping made the bookmark invalid.\n\n// ::- Represents a selected range in a document.\nexport class SelectionRange {\n  // :: (ResolvedPos, ResolvedPos)\n  constructor($from, $to) {\n    // :: ResolvedPos\n    // The lower bound of the range.\n    this.$from = $from\n    // :: ResolvedPos\n    // The upper bound of the range.\n    this.$to = $to\n  }\n}\n\n// ::- A text selection represents a classical editor selection, with\n// a head (the moving side) and anchor (immobile side), both of which\n// point into textblock nodes. It can be empty (a regular cursor\n// position).\nexport class TextSelection extends Selection {\n  // :: (ResolvedPos, ?ResolvedPos)\n  // Construct a text selection between the given points.\n  constructor($anchor, $head = $anchor) {\n    super($anchor, $head)\n  }\n\n  // :: ?ResolvedPos\n  // Returns a resolved position if this is a cursor selection (an\n  // empty text selection), and null otherwise.\n  get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null }\n\n  map(doc, mapping) {\n    let $head = doc.resolve(mapping.map(this.head))\n    if (!$head.parent.inlineContent) return Selection.near($head)\n    let $anchor = doc.resolve(mapping.map(this.anchor))\n    return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head)\n  }\n\n  replace(tr, content = Slice.empty) {\n    super.replace(tr, content)\n    if (content == Slice.empty) {\n      let marks = this.$from.marksAcross(this.$to)\n      if (marks) tr.ensureMarks(marks)\n    }\n  }\n\n  eq(other) {\n    return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head\n  }\n\n  getBookmark() {\n    return new TextBookmark(this.anchor, this.head)\n  }\n\n  toJSON() {\n    return {type: \"text\", anchor: this.anchor, head: this.head}\n  }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\" || typeof json.head != \"number\")\n      throw new RangeError(\"Invalid input for TextSelection.fromJSON\")\n    return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head))\n  }\n\n  // :: (Node, number, ?number) → TextSelection\n  // Create a text selection from non-resolved positions.\n  static create(doc, anchor, head = anchor) {\n    let $anchor = doc.resolve(anchor)\n    return new this($anchor, head == anchor ? $anchor : doc.resolve(head))\n  }\n\n  // :: (ResolvedPos, ResolvedPos, ?number) → Selection\n  // Return a text selection that spans the given positions or, if\n  // they aren't text positions, find a text selection near them.\n  // `bias` determines whether the method searches forward (default)\n  // or backwards (negative number) first. Will fall back to calling\n  // [`Selection.near`](#state.Selection^near) when the document\n  // doesn't contain a valid text position.\n  static between($anchor, $head, bias) {\n    let dPos = $anchor.pos - $head.pos\n    if (!bias || dPos) bias = dPos >= 0 ? 1 : -1\n    if (!$head.parent.inlineContent) {\n      let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true)\n      if (found) $head = found.$head\n      else return Selection.near($head, bias)\n    }\n    if (!$anchor.parent.inlineContent) {\n      if (dPos == 0) {\n        $anchor = $head\n      } else {\n        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor\n        if (($anchor.pos < $head.pos) != (dPos < 0)) $anchor = $head\n      }\n    }\n    return new TextSelection($anchor, $head)\n  }\n}\n\nSelection.jsonID(\"text\", TextSelection)\n\nclass TextBookmark {\n  constructor(anchor, head) {\n    this.anchor = anchor\n    this.head = head\n  }\n  map(mapping) {\n    return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head))\n  }\n  resolve(doc) {\n    return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head))\n  }\n}\n\n// ::- A node selection is a selection that points at a single node.\n// All nodes marked [selectable](#model.NodeSpec.selectable) can be\n// the target of a node selection. In such a selection, `from` and\n// `to` point directly before and after the selected node, `anchor`\n// equals `from`, and `head` equals `to`..\nexport class NodeSelection extends Selection {\n  // :: (ResolvedPos)\n  // Create a node selection. Does not verify the validity of its\n  // argument.\n  constructor($pos) {\n    let node = $pos.nodeAfter\n    let $end = $pos.node(0).resolve($pos.pos + node.nodeSize)\n    super($pos, $end)\n    // :: Node The selected node.\n    this.node = node\n  }\n\n  map(doc, mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    let $pos = doc.resolve(pos)\n    if (deleted) return Selection.near($pos)\n    return new NodeSelection($pos)\n  }\n\n  content() {\n    return new Slice(Fragment.from(this.node), 0, 0)\n  }\n\n  eq(other) {\n    return other instanceof NodeSelection && other.anchor == this.anchor\n  }\n\n  toJSON() {\n    return {type: \"node\", anchor: this.anchor}\n  }\n\n  getBookmark() { return new NodeBookmark(this.anchor) }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\")\n      throw new RangeError(\"Invalid input for NodeSelection.fromJSON\")\n    return new NodeSelection(doc.resolve(json.anchor))\n  }\n\n  // :: (Node, number) → NodeSelection\n  // Create a node selection from non-resolved positions.\n  static create(doc, from) {\n    return new this(doc.resolve(from))\n  }\n\n  // :: (Node) → bool\n  // Determines whether the given node may be selected as a node\n  // selection.\n  static isSelectable(node) {\n    return !node.isText && node.type.spec.selectable !== false\n  }\n}\n\nNodeSelection.prototype.visible = false\n\nSelection.jsonID(\"node\", NodeSelection)\n\nclass NodeBookmark {\n  constructor(anchor) {\n    this.anchor = anchor\n  }\n  map(mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos)\n  }\n  resolve(doc) {\n    let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter\n    if (node && NodeSelection.isSelectable(node)) return new NodeSelection($pos)\n    return Selection.near($pos)\n  }\n}\n\n// ::- A selection type that represents selecting the whole document\n// (which can not necessarily be expressed with a text selection, when\n// there are for example leaf block nodes at the start or end of the\n// document).\nexport class AllSelection extends Selection {\n  // :: (Node)\n  // Create an all-selection over the given document.\n  constructor(doc) {\n    super(doc.resolve(0), doc.resolve(doc.content.size))\n  }\n\n  replace(tr, content = Slice.empty) {\n    if (content == Slice.empty) {\n      tr.delete(0, tr.doc.content.size)\n      let sel = Selection.atStart(tr.doc)\n      if (!sel.eq(tr.selection)) tr.setSelection(sel)\n    } else {\n      super.replace(tr, content)\n    }\n  }\n\n  toJSON() { return {type: \"all\"} }\n\n  static fromJSON(doc) { return new AllSelection(doc) }\n\n  map(doc) { return new AllSelection(doc) }\n\n  eq(other) { return other instanceof AllSelection }\n\n  getBookmark() { return AllBookmark }\n}\n\nSelection.jsonID(\"all\", AllSelection)\n\nconst AllBookmark = {\n  map() { return this },\n  resolve(doc) { return new AllSelection(doc) }\n}\n\n// FIXME we'll need some awareness of text direction when scanning for selections\n\n// Try to find a selection inside the given node. `pos` points at the\n// position where the search starts. When `text` is true, only return\n// text selections.\nfunction findSelectionIn(doc, node, pos, index, dir, text) {\n  if (node.inlineContent) return TextSelection.create(doc, pos)\n  for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n    let child = node.child(i)\n    if (!child.isAtom) {\n      let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text)\n      if (inner) return inner\n    } else if (!text && NodeSelection.isSelectable(child)) {\n      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0))\n    }\n    pos += child.nodeSize * dir\n  }\n}\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  let last = tr.steps.length - 1\n  if (last < startLen) return\n  let step = tr.steps[last]\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) return\n  let map = tr.mapping.maps[last], end\n  map.forEach((_from, _to, _newFrom, newTo) => { if (end == null) end = newTo })\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n","import {Transform} from \"prosemirror-transform\"\nimport {Mark} from \"prosemirror-model\"\nimport {Selection} from \"./selection\"\n\nconst UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4\n\n// ::- An editor state transaction, which can be applied to a state to\n// create an updated state. Use\n// [`EditorState.tr`](#state.EditorState.tr) to create an instance.\n//\n// Transactions track changes to the document (they are a subclass of\n// [`Transform`](#transform.Transform)), but also other state changes,\n// like selection updates and adjustments of the set of [stored\n// marks](#state.EditorState.storedMarks). In addition, you can store\n// metadata properties in a transaction, which are extra pieces of\n// information that client code or plugins can use to describe what a\n// transacion represents, so that they can update their [own\n// state](#state.StateField) accordingly.\n//\n// The [editor view](#view.EditorView) uses a few metadata properties:\n// it will attach a property `\"pointer\"` with the value `true` to\n// selection transactions directly caused by mouse or touch input, and\n// a `\"uiEvent\"` property of that may be `\"paste\"`, `\"cut\"`, or `\"drop\"`.\nexport class Transaction extends Transform {\n  constructor(state) {\n    super(state.doc)\n    // :: number\n    // The timestamp associated with this transaction, in the same\n    // format as `Date.now()`.\n    this.time = Date.now()\n    this.curSelection = state.selection\n    // The step count for which the current selection is valid.\n    this.curSelectionFor = 0\n    // :: ?[Mark]\n    // The stored marks set by this transaction, if any.\n    this.storedMarks = state.storedMarks\n    // Bitfield to track which aspects of the state were updated by\n    // this transaction.\n    this.updated = 0\n    // Object used to store metadata properties for the transaction.\n    this.meta = Object.create(null)\n  }\n\n  // :: Selection\n  // The transaction's current selection. This defaults to the editor\n  // selection [mapped](#state.Selection.map) through the steps in the\n  // transaction, but can be overwritten with\n  // [`setSelection`](#state.Transaction.setSelection).\n  get selection() {\n    if (this.curSelectionFor < this.steps.length) {\n      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor))\n      this.curSelectionFor = this.steps.length\n    }\n    return this.curSelection\n  }\n\n  // :: (Selection) → Transaction\n  // Update the transaction's current selection. Will determine the\n  // selection that the editor gets when the transaction is applied.\n  setSelection(selection) {\n    if (selection.$from.doc != this.doc)\n      throw new RangeError(\"Selection passed to setSelection must point at the current document\")\n    this.curSelection = selection\n    this.curSelectionFor = this.steps.length\n    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS\n    this.storedMarks = null\n    return this\n  }\n\n  // :: bool\n  // Whether the selection was explicitly updated by this transaction.\n  get selectionSet() {\n    return (this.updated & UPDATED_SEL) > 0\n  }\n\n  // :: (?[Mark]) → Transaction\n  // Set the current stored marks.\n  setStoredMarks(marks) {\n    this.storedMarks = marks\n    this.updated |= UPDATED_MARKS\n    return this\n  }\n\n  // :: ([Mark]) → Transaction\n  // Make sure the current stored marks or, if that is null, the marks\n  // at the selection, match the given set of marks. Does nothing if\n  // this is already the case.\n  ensureMarks(marks) {\n    if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))\n      this.setStoredMarks(marks)\n    return this\n  }\n\n  // :: (Mark) → Transaction\n  // Add a mark to the set of stored marks.\n  addStoredMark(mark) {\n    return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: (union<Mark, MarkType>) → Transaction\n  // Remove a mark or mark type from the set of stored marks.\n  removeStoredMark(mark) {\n    return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: bool\n  // Whether the stored marks were explicitly set for this transaction.\n  get storedMarksSet() {\n    return (this.updated & UPDATED_MARKS) > 0\n  }\n\n  addStep(step, doc) {\n    super.addStep(step, doc)\n    this.updated = this.updated & ~UPDATED_MARKS\n    this.storedMarks = null\n  }\n\n  // :: (number) → Transaction\n  // Update the timestamp for the transaction.\n  setTime(time) {\n    this.time = time\n    return this\n  }\n\n  // :: (Slice) → Transaction\n  // Replace the current selection with the given slice.\n  replaceSelection(slice) {\n    this.selection.replace(this, slice)\n    return this\n  }\n\n  // :: (Node, ?bool) → Transaction\n  // Replace the selection with the given node. When `inheritMarks` is\n  // true and the content is inline, it inherits the marks from the\n  // place where it is inserted.\n  replaceSelectionWith(node, inheritMarks) {\n    let selection = this.selection\n    if (inheritMarks !== false)\n      node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)))\n    selection.replaceWith(this, node)\n    return this\n  }\n\n  // :: () → Transaction\n  // Delete the selection.\n  deleteSelection() {\n    this.selection.replace(this)\n    return this\n  }\n\n  // :: (string, from: ?number, to: ?number) → Transaction\n  // Replace the given range, or the selection if no range is given,\n  // with a text node containing the given string.\n  insertText(text, from, to = from) {\n    let schema = this.doc.type.schema\n    if (from == null) {\n      if (!text) return this.deleteSelection()\n      return this.replaceSelectionWith(schema.text(text), true)\n    } else {\n      if (!text) return this.deleteRange(from, to)\n      let marks = this.storedMarks\n      if (!marks) {\n        let $from = this.doc.resolve(from)\n        marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to))\n      }\n      this.replaceRangeWith(from, to, schema.text(text, marks))\n      if (!this.selection.empty) this.setSelection(Selection.near(this.selection.$to))\n      return this\n    }\n  }\n\n  // :: (union<string, Plugin, PluginKey>, any) → Transaction\n  // Store a metadata property in this transaction, keyed either by\n  // name or by plugin.\n  setMeta(key, value) {\n    this.meta[typeof key == \"string\" ? key : key.key] = value\n    return this\n  }\n\n  // :: (union<string, Plugin, PluginKey>) → any\n  // Retrieve a metadata property for a given name or plugin.\n  getMeta(key) {\n    return this.meta[typeof key == \"string\" ? key : key.key]\n  }\n\n  // :: bool\n  // Returns true if this transaction doesn't contain any metadata,\n  // and can thus safely be extended.\n  get isGeneric() {\n    for (let _ in this.meta) return false\n    return true\n  }\n\n  // :: () → Transaction\n  // Indicate that the editor should scroll the selection into view\n  // when updated to the state produced by this transaction.\n  scrollIntoView() {\n    this.updated |= UPDATED_SCROLL\n    return this\n  }\n\n  get scrolledIntoView() {\n    return (this.updated & UPDATED_SCROLL) > 0\n  }\n}\n","import {Node} from \"prosemirror-model\"\n\nimport {Selection} from \"./selection\"\nimport {Transaction} from \"./transaction\"\n\nfunction bind(f, self) {\n  return !self || !f ? f : f.bind(self)\n}\n\nclass FieldDesc {\n  constructor(name, desc, self) {\n    this.name = name\n    this.init = bind(desc.init, self)\n    this.apply = bind(desc.apply, self)\n  }\n}\n\nconst baseFields = [\n  new FieldDesc(\"doc\", {\n    init(config) { return config.doc || config.schema.topNodeType.createAndFill() },\n    apply(tr) { return tr.doc }\n  }),\n\n  new FieldDesc(\"selection\", {\n    init(config, instance) { return config.selection || Selection.atStart(instance.doc) },\n    apply(tr) { return tr.selection }\n  }),\n\n  new FieldDesc(\"storedMarks\", {\n    init(config) { return config.storedMarks || null },\n    apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null }\n  }),\n\n  new FieldDesc(\"scrollToSelection\", {\n    init() { return 0 },\n    apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev }\n  })\n]\n\n// Object wrapping the part of a state object that stays the same\n// across transactions. Stored in the state's `config` property.\nclass Configuration {\n  constructor(schema, plugins) {\n    this.schema = schema\n    this.fields = baseFields.concat()\n    this.plugins = []\n    this.pluginsByKey = Object.create(null)\n    if (plugins) plugins.forEach(plugin => {\n      if (this.pluginsByKey[plugin.key])\n        throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\")\n      this.plugins.push(plugin)\n      this.pluginsByKey[plugin.key] = plugin\n      if (plugin.spec.state)\n        this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin))\n    })\n  }\n}\n\n// ::- The state of a ProseMirror editor is represented by an object\n// of this type. A state is a persistent data structure—it isn't\n// updated, but rather a new state value is computed from an old one\n// using the [`apply`](#state.EditorState.apply) method.\n//\n// A state holds a number of built-in fields, and plugins can\n// [define](#state.PluginSpec.state) additional fields.\nexport class EditorState {\n  constructor(config) {\n    this.config = config\n  }\n\n  // doc:: Node\n  // The current document.\n\n  // selection:: Selection\n  // The selection.\n\n  // storedMarks:: ?[Mark]\n  // A set of marks to apply to the next input. Will be null when\n  // no explicit marks have been set.\n\n  // :: Schema\n  // The schema of the state's document.\n  get schema() {\n    return this.config.schema\n  }\n\n  // :: [Plugin]\n  // The plugins that are active in this state.\n  get plugins() {\n    return this.config.plugins\n  }\n\n  // :: (Transaction) → EditorState\n  // Apply the given transaction to produce a new state.\n  apply(tr) {\n    return this.applyTransaction(tr).state\n  }\n\n  // : (Transaction) → bool\n  filterTransaction(tr, ignore = -1) {\n    for (let i = 0; i < this.config.plugins.length; i++) if (i != ignore) {\n      let plugin = this.config.plugins[i]\n      if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))\n        return false\n    }\n    return true\n  }\n\n  // :: (Transaction) → {state: EditorState, transactions: [Transaction]}\n  // Verbose variant of [`apply`](#state.EditorState.apply) that\n  // returns the precise transactions that were applied (which might\n  // be influenced by the [transaction\n  // hooks](#state.PluginSpec.filterTransaction) of\n  // plugins) along with the new state.\n  applyTransaction(rootTr) {\n    if (!this.filterTransaction(rootTr)) return {state: this, transactions: []}\n\n    let trs = [rootTr], newState = this.applyInner(rootTr), seen = null\n    // This loop repeatedly gives plugins a chance to respond to\n    // transactions as new transactions are added, making sure to only\n    // pass the transactions the plugin did not see before.\n    outer: for (;;) {\n      let haveNew = false\n      for (let i = 0; i < this.config.plugins.length; i++) {\n        let plugin = this.config.plugins[i]\n        if (plugin.spec.appendTransaction) {\n          let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this\n          let tr = n < trs.length &&\n              plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState)\n          if (tr && newState.filterTransaction(tr, i)) {\n            tr.setMeta(\"appendedTransaction\", rootTr)\n            if (!seen) {\n              seen = []\n              for (let j = 0; j < this.config.plugins.length; j++)\n                seen.push(j < i ? {state: newState, n: trs.length} : {state: this, n: 0})\n            }\n            trs.push(tr)\n            newState = newState.applyInner(tr)\n            haveNew = true\n          }\n          if (seen) seen[i] = {state: newState, n: trs.length}\n        }\n      }\n      if (!haveNew) return {state: newState, transactions: trs}\n    }\n  }\n\n  // : (Transaction) → EditorState\n  applyInner(tr) {\n    if (!tr.before.eq(this.doc)) throw new RangeError(\"Applying a mismatched transaction\")\n    let newInstance = new EditorState(this.config), fields = this.config.fields\n    for (let i = 0; i < fields.length; i++) {\n      let field = fields[i]\n      newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance)\n    }\n    for (let i = 0; i < applyListeners.length; i++) applyListeners[i](this, tr, newInstance)\n    return newInstance\n  }\n\n  // :: Transaction\n  // Start a [transaction](#state.Transaction) from this state.\n  get tr() { return new Transaction(this) }\n\n  // :: (Object) → EditorState\n  // Create a new state.\n  //\n  //   config::- Configuration options. Must contain `schema` or `doc` (or both).\n  //\n  //      schema:: ?Schema\n  //      The schema to use (only relevant if no `doc` is specified).\n  //\n  //      doc:: ?Node\n  //      The starting document.\n  //\n  //      selection:: ?Selection\n  //      A valid selection in the document.\n  //\n  //      storedMarks:: ?[Mark]\n  //      The initial set of [stored marks](#state.EditorState.storedMarks).\n  //\n  //      plugins:: ?[Plugin]\n  //      The plugins that should be active in this state.\n  static create(config) {\n    let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins)\n    let instance = new EditorState($config)\n    for (let i = 0; i < $config.fields.length; i++)\n      instance[$config.fields[i].name] = $config.fields[i].init(config, instance)\n    return instance\n  }\n\n  // :: (Object) → EditorState\n  // Create a new state based on this one, but with an adjusted set of\n  // active plugins. State fields that exist in both sets of plugins\n  // are kept unchanged. Those that no longer exist are dropped, and\n  // those that are new are initialized using their\n  // [`init`](#state.StateField.init) method, passing in the new\n  // configuration object..\n  //\n  //   config::- configuration options\n  //\n  //     plugins:: [Plugin]\n  //     New set of active plugins.\n  reconfigure(config) {\n    let $config = new Configuration(this.schema, config.plugins)\n    let fields = $config.fields, instance = new EditorState($config)\n    for (let i = 0; i < fields.length; i++) {\n      let name = fields[i].name\n      instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance)\n    }\n    return instance\n  }\n\n  // :: (?union<Object<Plugin>, string, number>) → Object\n  // Serialize this state to JSON. If you want to serialize the state\n  // of plugins, pass an object mapping property names to use in the\n  // resulting JSON object to plugin objects. The argument may also be\n  // a string or number, in which case it is ignored, to support the\n  // way `JSON.stringify` calls `toString` methods.\n  toJSON(pluginFields) {\n    let result = {doc: this.doc.toJSON(), selection: this.selection.toJSON()}\n    if (this.storedMarks) result.storedMarks = this.storedMarks.map(m => m.toJSON())\n    if (pluginFields && typeof pluginFields == 'object') for (let prop in pluginFields) {\n      if (prop == \"doc\" || prop == \"selection\")\n        throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\")\n      let plugin = pluginFields[prop], state = plugin.spec.state\n      if (state && state.toJSON) result[prop] = state.toJSON.call(plugin, this[plugin.key])\n    }\n    return result\n  }\n\n  // :: (Object, Object, ?Object<Plugin>) → EditorState\n  // Deserialize a JSON representation of a state. `config` should\n  // have at least a `schema` field, and should contain array of\n  // plugins to initialize the state with. `pluginFields` can be used\n  // to deserialize the state of plugins, by associating plugin\n  // instances with the property names they use in the JSON object.\n  //\n  //   config::- configuration options\n  //\n  //     schema:: Schema\n  //     The schema to use.\n  //\n  //     plugins:: ?[Plugin]\n  //     The set of active plugins.\n  static fromJSON(config, json, pluginFields) {\n    if (!json) throw new RangeError(\"Invalid input for EditorState.fromJSON\")\n    if (!config.schema) throw new RangeError(\"Required config field 'schema' missing\")\n    let $config = new Configuration(config.schema, config.plugins)\n    let instance = new EditorState($config)\n    $config.fields.forEach(field => {\n      if (field.name == \"doc\") {\n        instance.doc = Node.fromJSON(config.schema, json.doc)\n      } else if (field.name == \"selection\") {\n        instance.selection = Selection.fromJSON(instance.doc, json.selection)\n      } else if (field.name == \"storedMarks\") {\n        if (json.storedMarks) instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON)\n      } else {\n        if (pluginFields) for (let prop in pluginFields) {\n          let plugin = pluginFields[prop], state = plugin.spec.state\n          if (plugin.key == field.name && state && state.fromJSON &&\n              Object.prototype.hasOwnProperty.call(json, prop)) {\n            // This field belongs to a plugin mapped to a JSON field, read it from there.\n            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance)\n            return\n          }\n        }\n        instance[field.name] = field.init(config, instance)\n      }\n    })\n    return instance\n  }\n\n  // Kludge to allow the view to track mappings between different\n  // instances of a state.\n  //\n  // FIXME this is no longer needed as of prosemirror-view 1.9.0,\n  // though due to backwards-compat we should probably keep it around\n  // for a while (if only as a no-op)\n  static addApplyListener(f) {\n    applyListeners.push(f)\n  }\n  static removeApplyListener(f) {\n    let found = applyListeners.indexOf(f)\n    if (found > -1) applyListeners.splice(found, 1)\n  }\n}\n\nconst applyListeners = []\n","// PluginSpec:: interface\n//\n// This is the type passed to the [`Plugin`](#state.Plugin)\n// constructor. It provides a definition for a plugin.\n//\n//   props:: ?EditorProps\n//   The [view props](#view.EditorProps) added by this plugin. Props\n//   that are functions will be bound to have the plugin instance as\n//   their `this` binding.\n//\n//   state:: ?StateField<any>\n//   Allows a plugin to define a [state field](#state.StateField), an\n//   extra slot in the state object in which it can keep its own data.\n//\n//   key:: ?PluginKey\n//   Can be used to make this a keyed plugin. You can have only one\n//   plugin with a given key in a given state, but it is possible to\n//   access the plugin's configuration and state through the key,\n//   without having access to the plugin instance object.\n//\n//   view:: ?(EditorView) → Object\n//   When the plugin needs to interact with the editor view, or\n//   set something up in the DOM, use this field. The function\n//   will be called when the plugin's state is associated with an\n//   editor view.\n//\n//     return::-\n//     Should return an object with the following optional\n//     properties:\n//\n//       update:: ?(view: EditorView, prevState: EditorState)\n//       Called whenever the view's state is updated.\n//\n//       destroy:: ?()\n//       Called when the view is destroyed or receives a state\n//       with different plugins.\n//\n//   filterTransaction:: ?(Transaction, EditorState) → bool\n//   When present, this will be called before a transaction is\n//   applied by the state, allowing the plugin to cancel it (by\n//   returning false).\n//\n//   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) → ?Transaction\n//   Allows the plugin to append another transaction to be applied\n//   after the given array of transactions. When another plugin\n//   appends a transaction after this was called, it is called again\n//   with the new state and new transactions—but only the new\n//   transactions, i.e. it won't be passed transactions that it\n//   already saw.\n\nfunction bindProps(obj, self, target) {\n  for (let prop in obj) {\n    let val = obj[prop]\n    if (val instanceof Function) val = val.bind(self)\n    else if (prop == \"handleDOMEvents\") val = bindProps(val, self, {})\n    target[prop] = val\n  }\n  return target\n}\n\n// ::- Plugins bundle functionality that can be added to an editor.\n// They are part of the [editor state](#state.EditorState) and\n// may influence that state and the view that contains it.\nexport class Plugin {\n  // :: (PluginSpec)\n  // Create a plugin.\n  constructor(spec) {\n    // :: EditorProps\n    // The [props](#view.EditorProps) exported by this plugin.\n    this.props = {}\n    if (spec.props) bindProps(spec.props, this, this.props)\n    // :: Object\n    // The plugin's [spec object](#state.PluginSpec).\n    this.spec = spec\n    this.key = spec.key ? spec.key.key : createKey(\"plugin\")\n  }\n\n  // :: (EditorState) → any\n  // Extract the plugin's state field from an editor state.\n  getState(state) { return state[this.key] }\n}\n\n// StateField:: interface<T>\n// A plugin spec may provide a state field (under its\n// [`state`](#state.PluginSpec.state) property) of this type, which\n// describes the state it wants to keep. Functions provided here are\n// always called with the plugin instance as their `this` binding.\n//\n//   init:: (config: Object, instance: EditorState) → T\n//   Initialize the value of the field. `config` will be the object\n//   passed to [`EditorState.create`](#state.EditorState^create). Note\n//   that `instance` is a half-initialized state instance, and will\n//   not have values for plugin fields initialized after this one.\n//\n//   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) → T\n//   Apply the given transaction to this state field, producing a new\n//   field value. Note that the `newState` argument is again a partially\n//   constructed state does not yet contain the state from plugins\n//   coming after this one.\n//\n//   toJSON:: ?(value: T) → *\n//   Convert this field to JSON. Optional, can be left off to disable\n//   JSON serialization for the field.\n//\n//   fromJSON:: ?(config: Object, value: *, state: EditorState) → T\n//   Deserialize the JSON representation of this field. Note that the\n//   `state` argument is again a half-initialized state.\n\nconst keys = Object.create(null)\n\nfunction createKey(name) {\n  if (name in keys) return name + \"$\" + ++keys[name]\n  keys[name] = 0\n  return name + \"$\"\n}\n\n// ::- A key is used to [tag](#state.PluginSpec.key)\n// plugins in a way that makes it possible to find them, given an\n// editor state. Assigning a key does mean only one plugin of that\n// type can be active in a state.\nexport class PluginKey {\n  // :: (?string)\n  // Create a plugin key.\n  constructor(name = \"key\") { this.key = createKey(name) }\n\n  // :: (EditorState) → ?Plugin\n  // Get the active plugin with this key, if any, from an editor\n  // state.\n  get(state) { return state.config.pluginsByKey[this.key] }\n\n  // :: (EditorState) → ?any\n  // Get the plugin's state from an editor state.\n  getState(state) { return state[this.key] }\n}\n","import {joinPoint, canJoin, findWrapping, liftTarget, canSplit, ReplaceAroundStep, replaceStep} from \"prosemirror-transform\"\nimport {Slice, Fragment} from \"prosemirror-model\"\nimport {Selection, TextSelection, NodeSelection, AllSelection} from \"prosemirror-state\"\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Delete the selection, if there is one.\nexport function deleteSelection(state, dispatch) {\n  if (state.selection.empty) return false\n  if (dispatch) dispatch(state.tr.deleteSelection().scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// If the selection is empty and at the start of a textblock, try to\n// reduce the distance between that block and the one before it—if\n// there's a block directly before it that can be joined, join them.\n// If not, try to move the selected block closer to the next one in\n// the document structure by lifting it out of its parent or moving it\n// into a parent of the previous block. Will use the view for accurate\n// (bidi-aware) start-of-textblock detection if given.\nexport function joinBackward(state, dispatch, view) {\n  let {$cursor} = state.selection\n  if (!$cursor || (view ? !view.endOfTextblock(\"backward\", state)\n                        : $cursor.parentOffset > 0))\n    return false\n\n  let $cut = findCutBefore($cursor)\n\n  // If there is no node before this, try to lift\n  if (!$cut) {\n    let range = $cursor.blockRange(), target = range && liftTarget(range)\n    if (target == null) return false\n    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n    return true\n  }\n\n  let before = $cut.nodeBefore\n  // Apply the joining algorithm\n  if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))\n    return true\n\n  // If the node below has no content and the node above is\n  // selectable, delete the node below and select the one above.\n  if ($cursor.parent.content.size == 0 &&\n      (textblockAt(before, \"end\") || NodeSelection.isSelectable(before))) {\n    let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty)\n    if (delStep.slice.size < delStep.to - delStep.from) {\n      if (dispatch) {\n        let tr = state.tr.step(delStep)\n        tr.setSelection(textblockAt(before, \"end\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)\n                        : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize))\n        dispatch(tr.scrollIntoView())\n      }\n      return true\n    }\n  }\n\n  // If the node before is an atom, delete it\n  if (before.isAtom && $cut.depth == $cursor.depth - 1) {\n    if (dispatch) dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView())\n    return true\n  }\n\n  return false\n}\n\nfunction textblockAt(node, side, only) {\n  for (; node; node = (side == \"start\" ? node.firstChild : node.lastChild)) {\n    if (node.isTextblock) return true\n    if (only && node.childCount != 1) return false\n  }\n  return false\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// When the selection is empty and at the start of a textblock, select\n// the node before that textblock, if possible. This is intended to be\n// bound to keys like backspace, after\n// [`joinBackward`](#commands.joinBackward) or other deleting\n// commands, as a fall-back behavior when the schema doesn't allow\n// deletion at the selected point.\nexport function selectNodeBackward(state, dispatch, view) {\n  let {$head, empty} = state.selection, $cut = $head\n  if (!empty) return false\n\n  if ($head.parent.isTextblock) {\n    if (view ? !view.endOfTextblock(\"backward\", state) : $head.parentOffset > 0) return false\n    $cut = findCutBefore($head)\n  }\n  let node = $cut && $cut.nodeBefore\n  if (!node || !NodeSelection.isSelectable(node)) return false\n  if (dispatch)\n    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView())\n  return true\n}\n\nfunction findCutBefore($pos) {\n  if (!$pos.parent.type.spec.isolating) for (let i = $pos.depth - 1; i >= 0; i--) {\n    if ($pos.index(i) > 0) return $pos.doc.resolve($pos.before(i + 1))\n    if ($pos.node(i).type.spec.isolating) break\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// If the selection is empty and the cursor is at the end of a\n// textblock, try to reduce or remove the boundary between that block\n// and the one after it, either by joining them or by moving the other\n// block closer to this one in the tree structure. Will use the view\n// for accurate start-of-textblock detection if given.\nexport function joinForward(state, dispatch, view) {\n  let {$cursor} = state.selection\n  if (!$cursor || (view ? !view.endOfTextblock(\"forward\", state)\n                        : $cursor.parentOffset < $cursor.parent.content.size))\n    return false\n\n  let $cut = findCutAfter($cursor)\n\n  // If there is no node after this, there's nothing to do\n  if (!$cut) return false\n\n  let after = $cut.nodeAfter\n  // Try the joining algorithm\n  if (deleteBarrier(state, $cut, dispatch)) return true\n\n  // If the node above has no content and the node below is\n  // selectable, delete the node above and select the one below.\n  if ($cursor.parent.content.size == 0 &&\n      (textblockAt(after, \"start\") || NodeSelection.isSelectable(after))) {\n    let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty)\n    if (delStep.slice.size < delStep.to - delStep.from) {\n      if (dispatch) {\n        let tr = state.tr.step(delStep)\n        tr.setSelection(textblockAt(after, \"start\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)\n                        : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)))\n        dispatch(tr.scrollIntoView())\n      }\n      return true\n    }\n  }\n\n  // If the next node is an atom, delete it\n  if (after.isAtom && $cut.depth == $cursor.depth - 1) {\n    if (dispatch) dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView())\n    return true\n  }\n\n  return false\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// When the selection is empty and at the end of a textblock, select\n// the node coming after that textblock, if possible. This is intended\n// to be bound to keys like delete, after\n// [`joinForward`](#commands.joinForward) and similar deleting\n// commands, to provide a fall-back behavior when the schema doesn't\n// allow deletion at the selected point.\nexport function selectNodeForward(state, dispatch, view) {\n  let {$head, empty} = state.selection, $cut = $head\n  if (!empty) return false\n  if ($head.parent.isTextblock) {\n    if (view ? !view.endOfTextblock(\"forward\", state) : $head.parentOffset < $head.parent.content.size)\n      return false\n    $cut = findCutAfter($head)\n  }\n  let node = $cut && $cut.nodeAfter\n  if (!node || !NodeSelection.isSelectable(node)) return false\n  if (dispatch)\n    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView())\n  return true\n}\n\nfunction findCutAfter($pos) {\n  if (!$pos.parent.type.spec.isolating) for (let i = $pos.depth - 1; i >= 0; i--) {\n    let parent = $pos.node(i)\n    if ($pos.index(i) + 1 < parent.childCount) return $pos.doc.resolve($pos.after(i + 1))\n    if (parent.type.spec.isolating) break\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Join the selected block or, if there is a text selection, the\n// closest ancestor block of the selection that can be joined, with\n// the sibling above it.\nexport function joinUp(state, dispatch) {\n  let sel = state.selection, nodeSel = sel instanceof NodeSelection, point\n  if (nodeSel) {\n    if (sel.node.isTextblock || !canJoin(state.doc, sel.from)) return false\n    point = sel.from\n  } else {\n    point = joinPoint(state.doc, sel.from, -1)\n    if (point == null) return false\n  }\n  if (dispatch) {\n    let tr = state.tr.join(point)\n    if (nodeSel) tr.setSelection(NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Join the selected block, or the closest ancestor of the selection\n// that can be joined, with the sibling after it.\nexport function joinDown(state, dispatch) {\n  let sel = state.selection, point\n  if (sel instanceof NodeSelection) {\n    if (sel.node.isTextblock || !canJoin(state.doc, sel.to)) return false\n    point = sel.to\n  } else {\n    point = joinPoint(state.doc, sel.to, 1)\n    if (point == null) return false\n  }\n  if (dispatch)\n    dispatch(state.tr.join(point).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Lift the selected block, or the closest ancestor block of the\n// selection that can be lifted, out of its parent node.\nexport function lift(state, dispatch) {\n  let {$from, $to} = state.selection\n  let range = $from.blockRange($to), target = range && liftTarget(range)\n  if (target == null) return false\n  if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// If the selection is in a node whose type has a truthy\n// [`code`](#model.NodeSpec.code) property in its spec, replace the\n// selection with a newline character.\nexport function newlineInCode(state, dispatch) {\n  let {$head, $anchor} = state.selection\n  if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) return false\n  if (dispatch) dispatch(state.tr.insertText(\"\\n\").scrollIntoView())\n  return true\n}\n\nfunction defaultBlockAt(match) {\n  for (let i = 0; i < match.edgeCount; i++) {\n    let {type} = match.edge(i)\n    if (type.isTextblock && !type.hasRequiredAttrs()) return type\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// When the selection is in a node with a truthy\n// [`code`](#model.NodeSpec.code) property in its spec, create a\n// default block after the code block, and move the cursor there.\nexport function exitCode(state, dispatch) {\n  let {$head, $anchor} = state.selection\n  if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) return false\n  let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after))\n  if (!above.canReplaceWith(after, after, type)) return false\n  if (dispatch) {\n    let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill())\n    tr.setSelection(Selection.near(tr.doc.resolve(pos), 1))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// If a block node is selected, create an empty paragraph before (if\n// it is its parent's first child) or after it.\nexport function createParagraphNear(state, dispatch) {\n  let sel = state.selection, {$from, $to} = sel\n  if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent) return false\n  let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()))\n  if (!type || !type.isTextblock) return false\n  if (dispatch) {\n    let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos\n    let tr = state.tr.insert(side, type.createAndFill())\n    tr.setSelection(TextSelection.create(tr.doc, side + 1))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// If the cursor is in an empty textblock that can be lifted, lift the\n// block.\nexport function liftEmptyBlock(state, dispatch) {\n  let {$cursor} = state.selection\n  if (!$cursor || $cursor.parent.content.size) return false\n  if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {\n    let before = $cursor.before()\n    if (canSplit(state.doc, before)) {\n      if (dispatch) dispatch(state.tr.split(before).scrollIntoView())\n      return true\n    }\n  }\n  let range = $cursor.blockRange(), target = range && liftTarget(range)\n  if (target == null) return false\n  if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Split the parent block of the selection. If the selection is a text\n// selection, also delete its content.\nexport function splitBlock(state, dispatch) {\n  let {$from, $to} = state.selection\n  if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(state.doc, $from.pos)) return false\n    if (dispatch) dispatch(state.tr.split($from.pos).scrollIntoView())\n    return true\n  }\n\n  if (!$from.parent.isBlock) return false\n\n  if (dispatch) {\n    let atEnd = $to.parentOffset == $to.parent.content.size\n    let tr = state.tr\n    if (state.selection instanceof TextSelection || state.selection instanceof AllSelection) tr.deleteSelection()\n    let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)))\n    let types = atEnd && deflt ? [{type: deflt}] : null\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n    if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt && [{type: deflt}])) {\n      types = [{type: deflt}]\n      can = true\n    }\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n      if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {\n        let first = tr.mapping.map($from.before()), $first = tr.doc.resolve(first)\n        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))\n          tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n      }\n    }\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Acts like [`splitBlock`](#commands.splitBlock), but without\n// resetting the set of active marks at the cursor.\nexport function splitBlockKeepMarks(state, dispatch) {\n  return splitBlock(state, dispatch && (tr => {\n    let marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks())\n    if (marks) tr.ensureMarks(marks)\n    dispatch(tr)\n  }))\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Move the selection to the node wrapping the current selection, if\n// any. (Will not select the document node.)\nexport function selectParentNode(state, dispatch) {\n  let {$from, to} = state.selection, pos\n  let same = $from.sharedDepth(to)\n  if (same == 0) return false\n  pos = $from.before(same)\n  if (dispatch) dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)))\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Select the whole document.\nexport function selectAll(state, dispatch) {\n  if (dispatch) dispatch(state.tr.setSelection(new AllSelection(state.doc)))\n  return true\n}\n\nfunction joinMaybeClear(state, $pos, dispatch) {\n  let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index()\n  if (!before || !after || !before.type.compatibleContent(after.type)) return false\n  if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {\n    if (dispatch) dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView())\n    return true\n  }\n  if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))\n    return false\n  if (dispatch)\n    dispatch(state.tr\n             .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))\n             .join($pos.pos)\n             .scrollIntoView())\n  return true\n}\n\nfunction deleteBarrier(state, $cut, dispatch) {\n  let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match\n  if (before.type.spec.isolating || after.type.spec.isolating) return false\n  if (joinMaybeClear(state, $cut, dispatch)) return true\n\n  let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1)\n  if (canDelAfter &&\n      (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&\n      match.matchType(conn[0] || after.type).validEnd) {\n    if (dispatch) {\n      let end = $cut.pos + after.nodeSize, wrap = Fragment.empty\n      for (let i = conn.length - 1; i >= 0; i--)\n        wrap = Fragment.from(conn[i].create(null, wrap))\n      wrap = Fragment.from(before.copy(wrap))\n      let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true))\n      let joinAt = end + 2 * conn.length\n      if (canJoin(tr.doc, joinAt)) tr.join(joinAt)\n      dispatch(tr.scrollIntoView())\n    }\n    return true\n  }\n\n  let selAfter = Selection.findFrom($cut, 1)\n  let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range)\n  if (target != null && target >= $cut.depth) {\n    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n    return true\n  }\n\n  if (canDelAfter && textblockAt(after, \"start\", true) && textblockAt(before, \"end\")) {\n    let at = before, wrap = []\n    for (;;) {\n      wrap.push(at)\n      if (at.isTextblock) break\n      at = at.lastChild\n    }\n    let afterText = after, afterDepth = 1\n    for (; !afterText.isTextblock; afterText = afterText.firstChild) afterDepth++\n    if (at.canReplace(at.childCount, at.childCount, afterText.content)) {\n      if (dispatch) {\n        let end = Fragment.empty\n        for (let i = wrap.length - 1; i >= 0; i--) end = Fragment.from(wrap[i].copy(end))\n        let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize,\n                                                     $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth,\n                                                     new Slice(end, wrap.length, 0), 0, true))\n        dispatch(tr.scrollIntoView())\n      }\n      return true\n    }\n  }\n\n  return false\n}\n\nfunction selectTextblockSide(side) {\n  return function(state, dispatch) {\n    let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to\n    let depth = $pos.depth\n    while ($pos.node(depth).isInline) {\n      if (!depth) return false\n      depth--\n    }\n    if (!$pos.node(depth).isTextblock) return false\n    if (dispatch)\n      dispatch(state.tr.setSelection(TextSelection.create(\n        state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))))\n    return true\n  }\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Moves the cursor to the start of current text block.\nexport const selectTextblockStart = selectTextblockSide(-1)\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Moves the cursor to the end of current text block.\nexport const selectTextblockEnd = selectTextblockSide(1)\n\n// Parameterized commands\n\n// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Wrap the selection in a node of the given type with the given\n// attributes.\nexport function wrapIn(nodeType, attrs) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs)\n    if (!wrapping) return false\n    if (dispatch) dispatch(state.tr.wrap(range, wrapping).scrollIntoView())\n    return true\n  }\n}\n\n// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Returns a command that tries to set the selected textblocks to the\n// given node type with the given attributes.\nexport function setBlockType(nodeType, attrs) {\n  return function(state, dispatch) {\n    let {from, to} = state.selection\n    let applicable = false\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (applicable) return false\n      if (!node.isTextblock || node.hasMarkup(nodeType, attrs)) return\n      if (node.type == nodeType) {\n        applicable = true\n      } else {\n        let $pos = state.doc.resolve(pos), index = $pos.index()\n        applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType)\n      }\n    })\n    if (!applicable) return false\n    if (dispatch) dispatch(state.tr.setBlockType(from, to, nodeType, attrs).scrollIntoView())\n    return true\n  }\n}\n\nfunction markApplies(doc, ranges, type) {\n  for (let i = 0; i < ranges.length; i++) {\n    let {$from, $to} = ranges[i]\n    let can = $from.depth == 0 ? doc.type.allowsMarkType(type) : false\n    doc.nodesBetween($from.pos, $to.pos, node => {\n      if (can) return false\n      can = node.inlineContent && node.type.allowsMarkType(type)\n    })\n    if (can) return true\n  }\n  return false\n}\n\n// :: (MarkType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Create a command function that toggles the given mark with the\n// given attributes. Will return `false` when the current selection\n// doesn't support that mark. This will remove the mark if any marks\n// of that type exist in the selection, or add it otherwise. If the\n// selection is empty, this applies to the [stored\n// marks](#state.EditorState.storedMarks) instead of a range of the\n// document.\nexport function toggleMark(markType, attrs) {\n  return function(state, dispatch) {\n    let {empty, $cursor, ranges} = state.selection\n    if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType)) return false\n    if (dispatch) {\n      if ($cursor) {\n        if (markType.isInSet(state.storedMarks || $cursor.marks()))\n          dispatch(state.tr.removeStoredMark(markType))\n        else\n          dispatch(state.tr.addStoredMark(markType.create(attrs)))\n      } else {\n        let has = false, tr = state.tr\n        for (let i = 0; !has && i < ranges.length; i++) {\n          let {$from, $to} = ranges[i]\n          has = state.doc.rangeHasMark($from.pos, $to.pos, markType)\n        }\n        for (let i = 0; i < ranges.length; i++) {\n          let {$from, $to} = ranges[i]\n          if (has) {\n            tr.removeMark($from.pos, $to.pos, markType)\n          } else {\n            let from = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore\n            let spaceStart = start && start.isText ? /^\\s*/.exec(start.text)[0].length : 0\n            let spaceEnd = end && end.isText ? /\\s*$/.exec(end.text)[0].length : 0\n            if (from + spaceStart < to) { from += spaceStart; to -= spaceEnd }\n            tr.addMark(from, to, markType.create(attrs))\n          }\n        }\n        dispatch(tr.scrollIntoView())\n      }\n    }\n    return true\n  }\n}\n\nfunction wrapDispatchForJoin(dispatch, isJoinable) {\n  return tr => {\n    if (!tr.isGeneric) return dispatch(tr)\n\n    let ranges = []\n    for (let i = 0; i < tr.mapping.maps.length; i++) {\n      let map = tr.mapping.maps[i]\n      for (let j = 0; j < ranges.length; j++)\n        ranges[j] = map.map(ranges[j])\n      map.forEach((_s, _e, from, to) => ranges.push(from, to))\n    }\n\n    // Figure out which joinable points exist inside those ranges,\n    // by checking all node boundaries in their parent nodes.\n    let joinable = []\n    for (let i = 0; i < ranges.length; i += 2) {\n      let from = ranges[i], to = ranges[i + 1]\n      let $from = tr.doc.resolve(from), depth = $from.sharedDepth(to), parent = $from.node(depth)\n      for (let index = $from.indexAfter(depth), pos = $from.after(depth + 1); pos <= to; ++index) {\n        let after = parent.maybeChild(index)\n        if (!after) break\n        if (index && joinable.indexOf(pos) == -1) {\n          let before = parent.child(index - 1)\n          if (before.type == after.type && isJoinable(before, after))\n            joinable.push(pos)\n        }\n        pos += after.nodeSize\n      }\n    }\n    // Join the joinable points\n    joinable.sort((a, b) => a - b)\n    for (let i = joinable.length - 1; i >= 0; i--) {\n      if (canJoin(tr.doc, joinable[i])) tr.join(joinable[i])\n    }\n    dispatch(tr)\n  }\n}\n\n// :: ((state: EditorState, ?(tr: Transaction)) → bool, union<(before: Node, after: Node) → bool, [string]>) → (state: EditorState, ?(tr: Transaction)) → bool\n// Wrap a command so that, when it produces a transform that causes\n// two joinable nodes to end up next to each other, those are joined.\n// Nodes are considered joinable when they are of the same type and\n// when the `isJoinable` predicate returns true for them or, if an\n// array of strings was passed, if their node type name is in that\n// array.\nexport function autoJoin(command, isJoinable) {\n  if (Array.isArray(isJoinable)) {\n    let types = isJoinable\n    isJoinable = node => types.indexOf(node.type.name) > -1\n  }\n  return (state, dispatch, view) => command(state, dispatch && wrapDispatchForJoin(dispatch, isJoinable), view)\n}\n\n// :: (...[(EditorState, ?(tr: Transaction), ?EditorView) → bool]) → (EditorState, ?(tr: Transaction), ?EditorView) → bool\n// Combine a number of command functions into a single function (which\n// calls them one by one until one returns true).\nexport function chainCommands(...commands) {\n  return function(state, dispatch, view) {\n    for (let i = 0; i < commands.length; i++)\n      if (commands[i](state, dispatch, view)) return true\n    return false\n  }\n}\n\nlet backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward)\nlet del = chainCommands(deleteSelection, joinForward, selectNodeForward)\n\n// :: Object\n// A basic keymap containing bindings not specific to any schema.\n// Binds the following keys (when multiple commands are listed, they\n// are chained with [`chainCommands`](#commands.chainCommands)):\n//\n// * **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`\n// * **Mod-Enter** to `exitCode`\n// * **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`\n// * **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n// * **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n// * **Mod-a** to `selectAll`\nexport let pcBaseKeymap = {\n  \"Enter\": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),\n  \"Mod-Enter\": exitCode,\n  \"Backspace\": backspace,\n  \"Mod-Backspace\": backspace,\n  \"Shift-Backspace\": backspace,\n  \"Delete\": del,\n  \"Mod-Delete\": del,\n  \"Mod-a\": selectAll\n}\n\n// :: Object\n// A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,\n// **Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and\n// **Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like\n// Ctrl-Delete.\nexport let macBaseKeymap = {\n  \"Ctrl-h\": pcBaseKeymap[\"Backspace\"],\n  \"Alt-Backspace\": pcBaseKeymap[\"Mod-Backspace\"],\n  \"Ctrl-d\": pcBaseKeymap[\"Delete\"],\n  \"Ctrl-Alt-Backspace\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Alt-Delete\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Alt-d\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Ctrl-a\": selectTextblockStart,\n  \"Ctrl-e\": selectTextblockEnd\n}\nfor (let key in pcBaseKeymap) macBaseKeymap[key] = pcBaseKeymap[key]\n\npcBaseKeymap.Home = selectTextblockStart\npcBaseKeymap.End = selectTextblockEnd\n\n// declare global: os, navigator\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)\n          : typeof os != \"undefined\" ? os.platform() == \"darwin\" : false\n\n// :: Object\n// Depending on the detected platform, this will hold\n// [`pcBasekeymap`](#commands.pcBaseKeymap) or\n// [`macBaseKeymap`](#commands.macBaseKeymap).\nexport let baseKeymap = mac ? macBaseKeymap : pcBaseKeymap\n","import {Plugin} from \"prosemirror-state\"\n\n// ::- Input rules are regular expressions describing a piece of text\n// that, when typed, causes something to happen. This might be\n// changing two dashes into an emdash, wrapping a paragraph starting\n// with `\"> \"` into a blockquote, or something entirely different.\nexport class InputRule {\n  // :: (RegExp, union<string, (state: EditorState, match: [string], start: number, end: number) → ?Transaction>)\n  // Create an input rule. The rule applies when the user typed\n  // something and the text directly in front of the cursor matches\n  // `match`, which should end with `$`.\n  //\n  // The `handler` can be a string, in which case the matched text, or\n  // the first matched group in the regexp, is replaced by that\n  // string.\n  //\n  // Or a it can be a function, which will be called with the match\n  // array produced by\n  // [`RegExp.exec`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec),\n  // as well as the start and end of the matched range, and which can\n  // return a [transaction](#state.Transaction) that describes the\n  // rule's effect, or null to indicate the input was not handled.\n  constructor(match, handler) {\n    this.match = match\n    this.handler = typeof handler == \"string\" ? stringHandler(handler) : handler\n  }\n}\n\nfunction stringHandler(string) {\n  return function(state, match, start, end) {\n    let insert = string\n    if (match[1]) {\n      let offset = match[0].lastIndexOf(match[1])\n      insert += match[0].slice(offset + match[1].length)\n      start += offset\n      let cutOff = start - end\n      if (cutOff > 0) {\n        insert = match[0].slice(offset - cutOff, offset) + insert\n        start = end\n      }\n    }\n    return state.tr.insertText(insert, start, end)\n  }\n}\n\nconst MAX_MATCH = 500\n\n// :: (config: {rules: [InputRule]}) → Plugin\n// Create an input rules plugin. When enabled, it will cause text\n// input that matches any of the given rules to trigger the rule's\n// action.\nexport function inputRules({rules}) {\n  let plugin = new Plugin({\n    state: {\n      init() { return null },\n      apply(tr, prev) {\n        let stored = tr.getMeta(this)\n        if (stored) return stored\n        return tr.selectionSet || tr.docChanged ? null : prev\n      }\n    },\n\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run(view, from, to, text, rules, plugin)\n      },\n      handleDOMEvents: {\n        compositionend: (view) => {\n          setTimeout(() => {\n            let {$cursor} = view.state.selection\n            if ($cursor) run(view, $cursor.pos, $cursor.pos, \"\", rules, plugin)\n          })\n        }\n      }\n    },\n\n    isInputRules: true\n  })\n  return plugin\n}\n\nfunction run(view, from, to, text, rules, plugin) {\n  if (view.composing) return false\n  let state = view.state, $from = state.doc.resolve(from)\n  if ($from.parent.type.spec.code) return false\n  let textBefore = $from.parent.textBetween(Math.max(0, $from.parentOffset - MAX_MATCH), $from.parentOffset,\n                                            null, \"\\ufffc\") + text\n  for (let i = 0; i < rules.length; i++) {\n    let match = rules[i].match.exec(textBefore)\n    let tr = match && rules[i].handler(state, match, from - (match[0].length - text.length), to)\n    if (!tr) continue\n    view.dispatch(tr.setMeta(plugin, {transform: tr, from, to, text}))\n    return true\n  }\n  return false\n}\n\n// :: (EditorState, ?(Transaction)) → bool\n// This is a command that will undo an input rule, if applying such a\n// rule was the last thing that the user did.\nexport function undoInputRule(state, dispatch) {\n  let plugins = state.plugins\n  for (let i = 0; i < plugins.length; i++) {\n    let plugin = plugins[i], undoable\n    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n      if (dispatch) {\n        let tr = state.tr, toUndo = undoable.transform\n        for (let j = toUndo.steps.length - 1; j >= 0; j--)\n          tr.step(toUndo.steps[j].invert(toUndo.docs[j]))\n        if (undoable.text) {\n          let marks = tr.doc.resolve(undoable.from).marks()\n          tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks))\n        } else {\n          tr.delete(undoable.from, undoable.to)\n        }\n        dispatch(tr)\n      }\n      return true\n    }\n  }\n  return false\n}\n","import {InputRule} from \"./inputrules\"\n\n// :: InputRule Converts double dashes to an emdash.\nexport const emDash = new InputRule(/--$/, \"—\")\n// :: InputRule Converts three dots to an ellipsis character.\nexport const ellipsis = new InputRule(/\\.\\.\\.$/, \"…\")\n// :: InputRule “Smart” opening double quotes.\nexport const openDoubleQuote = new InputRule(/(?:^|[\\s\\{\\[\\(\\<'\"\\u2018\\u201C])(\")$/, \"“\")\n// :: InputRule “Smart” closing double quotes.\nexport const closeDoubleQuote = new InputRule(/\"$/, \"”\")\n// :: InputRule “Smart” opening single quotes.\nexport const openSingleQuote = new InputRule(/(?:^|[\\s\\{\\[\\(\\<'\"\\u2018\\u201C])(')$/, \"‘\")\n// :: InputRule “Smart” closing single quotes.\nexport const closeSingleQuote = new InputRule(/'$/, \"’\")\n\n// :: [InputRule] Smart-quote related input rules.\nexport const smartQuotes = [openDoubleQuote, closeDoubleQuote, openSingleQuote, closeSingleQuote]\n","\n    /*!\n    * tiptap-utils v1.13.0\n    * (c) 2021 überdosis GbR (limited liability)\n    * @license MIT\n    */\n  \nimport { NodeSelection } from 'prosemirror-state';\n\nfunction createCell(cellType, cellContent) {\n  if (cellContent) {\n    return cellType.createChecked(null, cellContent);\n  }\n\n  return cellType.createAndFill();\n}\n\nfunction getTableNodeTypes(schema) {\n  if (schema.cached.tableNodeTypes) {\n    return schema.cached.tableNodeTypes;\n  }\n\n  const roles = {};\n  Object.keys(schema.nodes).forEach(type => {\n    const nodeType = schema.nodes[type];\n\n    if (nodeType.spec.tableRole) {\n      roles[nodeType.spec.tableRole] = nodeType;\n    }\n  }); // eslint-disable-next-line\n\n  schema.cached.tableNodeTypes = roles;\n  return roles;\n}\n\nfunction createTable(schema, rowsCount, colsCount, withHeaderRow, cellContent) {\n  const types = getTableNodeTypes(schema);\n  const headerCells = [];\n  const cells = [];\n\n  for (let index = 0; index < colsCount; index += 1) {\n    const cell = createCell(types.cell, cellContent);\n\n    if (cell) {\n      cells.push(cell);\n    }\n\n    if (withHeaderRow) {\n      const headerCell = createCell(types.header_cell, cellContent);\n\n      if (headerCell) {\n        headerCells.push(headerCell);\n      }\n    }\n  }\n\n  const rows = [];\n\n  for (let index = 0; index < rowsCount; index += 1) {\n    rows.push(types.row.createChecked(null, withHeaderRow && index === 0 ? headerCells : cells));\n  }\n\n  return types.table.createChecked(null, rows);\n}\n\nfunction equalNodeType(nodeType, node) {\n  return Array.isArray(nodeType) && nodeType.indexOf(node.type) > -1 || node.type === nodeType;\n}\n\nfunction flatten(node) {\n  // eslint-disable-next-line\n  const descend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (!node) {\n    throw new Error('Invalid \"node\" parameter');\n  }\n\n  const result = []; // eslint-disable-next-line\n\n  node.descendants((child, pos) => {\n    result.push({\n      node: child,\n      pos\n    });\n\n    if (!descend) {\n      return false;\n    }\n  });\n  return result;\n}\n\nfunction findChildren(node, predicate, descend) {\n  if (!node) {\n    throw new Error('Invalid \"node\" parameter');\n  } else if (!predicate) {\n    throw new Error('Invalid \"predicate\" parameter');\n  }\n\n  return flatten(node, descend).filter(child => predicate(child.node));\n}\n\nfunction findBlockNodes(node, descend) {\n  return findChildren(node, child => child.isBlock, descend);\n}\n\n// eslint-disable-next-line\nfunction findParentNodeClosestToPos($pos, predicate) {\n  for (let i = $pos.depth; i > 0; i -= 1) {\n    const node = $pos.node(i);\n\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node\n      };\n    }\n  }\n}\n\nfunction findParentNode(predicate) {\n  return selection => findParentNodeClosestToPos(selection.$from, predicate);\n}\n\nfunction isNodeSelection(selection) {\n  return selection instanceof NodeSelection;\n}\n\nfunction findSelectedNodeOfType(nodeType) {\n  // eslint-disable-next-line\n  return function (selection) {\n    if (isNodeSelection(selection)) {\n      const {\n        node\n      } = selection;\n      const {\n        $from\n      } = selection;\n\n      if (equalNodeType(nodeType, node)) {\n        return {\n          node,\n          pos: $from.pos,\n          depth: $from.depth\n        };\n      }\n    }\n  };\n}\n\nfunction getMarkAttrs(state, type) {\n  const {\n    from,\n    to\n  } = state.selection;\n  let marks = [];\n  state.doc.nodesBetween(from, to, node => {\n    marks = [...marks, ...node.marks];\n  });\n  const mark = marks.find(markItem => markItem.type.name === type.name);\n\n  if (mark) {\n    return mark.attrs;\n  }\n\n  return {};\n}\n\nfunction getMarkRange($pos = null, type = null) {\n  if (!$pos || !type) {\n    return false;\n  }\n\n  const start = $pos.parent.childAfter($pos.parentOffset);\n\n  if (!start.node) {\n    return false;\n  }\n\n  const link = start.node.marks.find(mark => mark.type === type);\n\n  if (!link) {\n    return false;\n  }\n\n  let startIndex = $pos.index();\n  let startPos = $pos.start() + start.offset;\n  let endIndex = startIndex + 1;\n  let endPos = startPos + start.node.nodeSize;\n\n  while (startIndex > 0 && link.isInSet($pos.parent.child(startIndex - 1).marks)) {\n    startIndex -= 1;\n    startPos -= $pos.parent.child(startIndex).nodeSize;\n  }\n\n  while (endIndex < $pos.parent.childCount && link.isInSet($pos.parent.child(endIndex).marks)) {\n    endPos += $pos.parent.child(endIndex).nodeSize;\n    endIndex += 1;\n  }\n\n  return {\n    from: startPos,\n    to: endPos\n  };\n}\n\nfunction getNodeAttrs(state, type) {\n  const {\n    from,\n    to\n  } = state.selection;\n  let nodes = [];\n  state.doc.nodesBetween(from, to, node => {\n    nodes = [...nodes, node];\n  });\n  const node = nodes.reverse().find(nodeItem => nodeItem.type.name === type.name);\n\n  if (node) {\n    return node.attrs;\n  }\n\n  return {};\n}\n\nfunction markIsActive(state, type) {\n  const {\n    from,\n    $from,\n    to,\n    empty\n  } = state.selection;\n\n  if (empty) {\n    return !!type.isInSet(state.storedMarks || $from.marks());\n  }\n\n  return !!state.doc.rangeHasMark(from, to, type);\n}\n\nfunction nodeEqualsType({\n  types,\n  node\n}) {\n  return Array.isArray(types) && types.includes(node.type) || node.type === types;\n}\n\nfunction nodeIsActive(state, type, attrs = {}) {\n  const predicate = node => node.type === type;\n\n  const node = findSelectedNodeOfType(type)(state.selection) || findParentNode(predicate)(state.selection);\n\n  if (!Object.keys(attrs).length || !node) {\n    return !!node;\n  }\n\n  return node.node.hasMarkup(type, { ...node.node.attrs,\n    ...attrs\n  });\n}\n\nexport { createCell, createTable, equalNodeType, findBlockNodes, findChildren, findParentNode, findParentNodeClosestToPos, findSelectedNodeOfType, flatten, getMarkAttrs, getMarkRange, getNodeAttrs, getTableNodeTypes, isNodeSelection, markIsActive, nodeEqualsType, nodeIsActive };\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import Button from 'flarum/common/components/Button';\r\nimport extractText from 'flarum/common/utils/extractText';\r\nimport Stream from 'flarum/common/utils/Stream';\r\nimport Dropdown from 'flarum/common/components/Dropdown';\r\nimport Tooltip from 'flarum/common/components/Tooltip';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport styleSelectedText from 'flarum/common/utils/styleSelectedText';\r\nimport ItemList from 'flarum/common/utils/ItemList';\r\n\r\nimport { removeMark, updateMark } from 'tiptap-commands';\r\n\r\n//borrowed from askvortsov1/flarum-rich-text\r\nexport default class InsertReferenceDropdown extends Dropdown  {\r\n  static initAttrs(attrs) {\r\n    attrs.buttonClassName = 'Button Button--icon Button--link Button--menuDropdown';\r\n  }\r\n  \r\n  oninit(vnode) {\r\n    super.oninit(vnode);\r\n    this.state = this.attrs.state;\r\n\r\n    this.text = Stream('');\r\n    this.href = Stream('');\r\n\r\n    // this.state.addItem(\r\n    //   this.attrs.type,\r\n    //   (state, dispatch) => {\r\n    //     this.command(state, dispatch);\r\n    //   },\r\n    //   this.onEditorUpdate.bind(this)\r\n    // );\r\n\r\n    this.selectionEmpty = true;\r\n  }\r\n\r\n  oncreate(vnode) {\r\n    super.oncreate(vnode);\r\n\r\n    this.$().on('click', (e) => {\r\n      if ($('.App').is('.mobile-safari')) {\r\n        // Mobile Safari doesn't support fixed items\r\n        // So, we wrap them in a modal.\r\n        app.modal.show(SafariModalHack, {\r\n          title: this.attrs.tooltip,\r\n          vnodeContent: this.fields().toArray(),\r\n          onsubmit: this.onsubmit.bind(this),\r\n        });\r\n        e.stopPropagation();\r\n      }\r\n    });\r\n\r\n    this.$().on('shown.bs.dropdown', () => {\r\n      this.$('.Dropdown-menu').find('input, select, textarea').first().focus().select();\r\n    });\r\n  }\r\n\r\n  getButtonContent(children) {\r\n    return (\r\n      <Tooltip text={this.attrs.tooltip}>\r\n        <span>{icon(this.attrs.icon)}</span>\r\n      </Tooltip>\r\n    );\r\n  }\r\n\r\n  getMenu(items) {\r\n    return (\r\n      <ul className={'Dropdown-menu dropdown-menu FormDropdown'}>\r\n        <form className=\"Form\" onsubmit={this.onsubmit.bind(this)}>\r\n          {this.fields().toArray()}\r\n        </form>\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  onsubmit(e) {\r\n    // Here for the safari workaround\r\n    app.modal.close();\r\n    e.preventDefault();\r\n    $('body').trigger('click');\r\n    this.insert(e);\r\n    app.composer.editor.focus();\r\n  }\r\n\r\n  fields() {\r\n    const items = new ItemList();\r\n\r\n    items.add(\r\n      'insert',\r\n      <Button type=\"submit\" className=\"Button Button--primary\">\r\n        {app.translator.trans('flarum-references.forum.composer.insert_button')}\r\n      </Button>\r\n    );\r\n\r\n    if (this.selectionEmpty && !this.active) {\r\n      items.add(\r\n        'text',\r\n        <div className=\"Form-group\">\r\n          <input\r\n            className=\"FormControl\"\r\n            name=\"text\"\r\n            placeholder={extractText(app.translator.trans('flarum-references.forum.composer.insert_link.text_placeholder'))}\r\n            bidi={this.text}\r\n            required\r\n          />\r\n        </div>,\r\n        10\r\n      );\r\n    }\r\n\r\n    items.add(\r\n      'href',\r\n      <div className=\"Form-group\">\r\n        <input\r\n          className=\"FormControl\"\r\n          name=\"href\"\r\n          type=\"url\"\r\n          placeholder={extractText(app.translator.trans('flarum-references.forum.composer.insert_link.href_placeholder'))}\r\n          bidi={this.href}\r\n          required\r\n        />\r\n      </div>,\r\n      10\r\n    );\r\n\r\n    if (this.active) {\r\n      items.add(\r\n        'remove',\r\n        <Button onclick={this.remove.bind(this)} className=\"Button Button--danger\">\r\n          {app.translator.trans('flarum-references.forum.composer.insert_link.remove_button')}\r\n        </Button>,\r\n        -10\r\n      );\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  insert(e) {\r\n    const linkAttrs = { href: this.href(), text: this.text() };\r\n\r\n    if (this.selectionEmpty && !this.active) {\r\n      //this.command = dispatch(state.tr.replaceSelectionWith(state.schema.text(this.text(), [this.attrs.mark.create(linkAttrs)]), false));\r\n\r\n      styleSelectedText(app.composer.editor.el, \r\n        //{ prefix: '![', suffix: '](https://)', replaceNext: 'https://', scanFor: 'https?://' }\r\n        { prefix: '[ref][' + linkAttrs.text, suffix: ']('+ linkAttrs.href +')[/ref]' }\r\n      );\r\n      //$('.TextEditor-editor')\r\n      this.text('');\r\n      this.href('');\r\n    } else {\r\n      this.command = updateMark(this.attrs.mark, linkAttrs);\r\n    }\r\n  }\r\n\r\n  remove(e) {\r\n    $('body').trigger('click');\r\n    this.command = removeMark(this.attrs.mark);\r\n    this.state.run(this.attrs.type);\r\n    app.composer.editor.focus();\r\n  }\r\n\r\n  onEditorUpdate() {\r\n    this.active = !!this.state.markActive(this.attrs.mark);\r\n    this.$('.Dropdown-toggle').toggleClass('active', this.active);\r\n\r\n    const attrs = this.state.markAttrs(this.attrs.mark);\r\n\r\n    this.href(attrs.href);\r\n    this.text(attrs.text);\r\n\r\n    this.selectionEmpty = this.state.selectionEmpty();\r\n  }\r\n}","import Modal from \"flarum/components/Modal\";\r\nimport Button from 'flarum/components/Button';\r\nimport Stream from 'flarum/common/utils/Stream';\r\n\r\nexport default class DefaultRefModal extends Modal {\r\n  oninit(vnode) {\r\n    super.oninit(vnode);\r\n\r\n    this.value = app.composer.fields.content() || '';\r\n    // this.allReferences = this.value.match(/\\[reference\\ id=[\\w]*\\][\\w\\ \\(\\)\\[\\]\\.\\,\\/\\\\\\-_\\+;:\"'?&]*\\[\\/reference\\]/gm);\r\n    this.allReferences = this.value.match(/\\[reference\\ id=[\\w]* type=[\\w]*\\].*\\[\\/reference\\]/gm);\r\n    this.referenceId = this.allReferences?.length || 0;\r\n\r\n    // console.log(this.value);\r\n    // console.log(this.allReferences);\r\n    // console.log(this.referenceId);\r\n    this.fields = {\r\n      title: Stream(''),\r\n      link: Stream(''),\r\n    };\r\n  }\r\n\r\n  className() {\r\n    return \"\";\r\n  }\r\n\r\n  title() {\r\n    return \"De baza\";\r\n  }\r\n\r\n  content() {\r\n    // console.log(this.$('input[required]')[0]?.validity.valid);\r\n    // console.log(app.composer.editor.attrs.menuState.editorView.dom.outerText);\r\n    // console.log(app.composer.editor.attrs.menuState.editorView.dom.outerText.length);\r\n    return [\r\n      m('.Modal-body',\r\n        m('Form.Form--left',\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('Titlul')),\r\n          m('input.FormControl', {\r\n            type: \"text\",\r\n            value: this.fields.title(),\r\n            placeholder: \"ex. Pădurea spânzuraților\",\r\n            required: true,\r\n            oninput: (e) => {\r\n              this.fields.title(e.target.value);\r\n              this.removeRedStyle();\r\n              // if (e.target.hasAttribute(\"style\")) {\r\n              //   e.target.removeAttribute(\"style\");\r\n              // }\r\n            }\r\n          },\r\n          )\r\n        ),\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('Link')),\r\n          m('input.FormControl', {\r\n            type: \"url\",\r\n            placeholder: \"ex. http://example.com\",\r\n            value: this.fields.link(),\r\n            oninput: (e) => {\r\n              this.fields.link(e.target.value);\r\n              this.removeRedStyle();\r\n            }\r\n          },\r\n          )\r\n        ),\r\n          Button.component(\r\n            {\r\n              className: \"Button Button--primary\",\r\n              onclick: () => this.addReference(),\r\n            },\r\n            \"Adaugare\"\r\n          ),\r\n        )\r\n      )\r\n    ];\r\n  }\r\n\r\n  removeRedStyle() {\r\n    const requiredFields = this.$('input');\r\n\r\n    for (let k = 0; k < requiredFields.length; k++) {\r\n      if (requiredFields[k].validity.valid) {\r\n        requiredFields[k].removeAttribute(\"style\");\r\n      }\r\n    }\r\n  }\r\n\r\n  areSetRequiredFields() {\r\n    const requiredFields = this.$('input');\r\n    let i = 0;\r\n    // console.log(requiredFields);\r\n    \r\n    for (let k = 0; k < requiredFields.length; k++) {\r\n      if (!requiredFields[k].validity.valid) {\r\n        requiredFields[k].style.setProperty('border-color', 'red', 'important');\r\n        i++;\r\n      }\r\n    }\r\n\r\n    if (i == 0) return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  addReference() {\r\n    if (!this.areSetRequiredFields()) return;\r\n\r\n    let date = new Date();\r\n    // console.log(flarum.extensions['askvortsov-rich-text']);\r\n    if (flarum.extensions['askvortsov-rich-text']) { // implements for askvortsov-rich-text editor\r\n      app.composer.editor.insertAtCursor(\"[ref id=ref\" + ++this.referenceId + \"]\" + this.referenceId + \"[/ref]\");\r\n\r\n      const position = app.composer.editor.getSelectionRange();\r\n      \r\n      if (this.referenceId == 1) {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.attrs.menuState.editorView.dom.outerText.length + 1);\r\n        app.composer.editor.setEnter();\r\n        app.composer.editor.insertAtCursor(\"Referinte:\");\r\n        app.composer.editor.setEnter();\r\n      } else {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.attrs.menuState.editorView.dom.outerText.length + 1);\r\n        app.composer.editor.setEnter();\r\n      }\r\n\r\n      app.composer.editor.insertAtCursor(\r\n        this.referenceId +\r\n        \". [reference id=ref\" + this.referenceId + \" type=default] \" +\r\n        this.fields.title() +\r\n        \". \" +\r\n        \"[citat la \" +\r\n        date.getDate() + \r\n        \".\" + (date.getMonth() + 1) +\r\n        \".\" + date.getFullYear() +\r\n        \"] \" +\r\n        this.fields.link() +\r\n        ((this.fields.link().length === 0) ? \"[/reference]\" : \" [/reference]\")\r\n      );\r\n\r\n      app.composer.editor.setSelectionRange(position[0], position[1]);\r\n      app.composer.editor.setEnter();\r\n      app.composer.editor.delete();\r\n\r\n      // this.array[0] = \"Alt ceva\"\r\n      // console.log(\"rich-text\");\r\n    } else { // implements for flarum-markdown editor\r\n      console.log(app.composer.editor.el.value);\r\n      console.log(app.composer.fields.content());\r\n      app.composer.editor.insertAtCursor(\"[ref id=ref\" + ++this.referenceId + \"]\" + this.referenceId + \"[/ref]\");\r\n\r\n      const position = app.composer.editor.getSelectionRange();\r\n\r\n      if (this.referenceId == 1) {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.el.value.length + 1);\r\n        // app.composer.editor.setEnter();\r\n        app.composer.editor.insertAtCursor(\"\\n\\nReferinte:\\n\");\r\n        // app.composer.editor.setEnter();\r\n      } else {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.el.value.length + 1);\r\n        app.composer.editor.insertAtCursor(\"\\n\");\r\n        // app.composer.editor.setEnter();\r\n      }\r\n\r\n      app.composer.editor.insertAtCursor(\r\n        \"\\n\" +\r\n        this.referenceId +\r\n        \"\\\\. [reference id=ref\" + this.referenceId + \" type=default] \" +\r\n        this.fields.title() +\r\n        \". \" +\r\n        \"[citat la \" +\r\n        date.getDate() + \r\n        \".\" + (date.getMonth() + 1) +\r\n        \".\" + date.getFullYear() +\r\n        \"] \" +\r\n        this.fields.link() +\r\n        ((this.fields.link().length === 0) ? \"[/reference]\" : \" [/reference]\")\r\n      );\r\n\r\n      app.composer.editor.setSelectionRange(position[0], position[1]);\r\n\r\n      // console.log(\"non rich-text\");\r\n      // app.composer.editor.moveCursorTo(app.composer.fields.content().length + 1);\r\n    }\r\n\r\n    // console.log(this.fields.link().length);\r\n    app.modal.close();\r\n  }\r\n}","import Modal from \"flarum/components/Modal\";\r\nimport Button from 'flarum/components/Button';\r\nimport Stream from 'flarum/common/utils/Stream';\r\n\r\nexport default class SiteRefModal extends Modal {\r\n  oninit(vnode) {\r\n    super.oninit(vnode);\r\n\r\n    this.value = app.composer.fields.content() || '';\r\n    // this.allReferences = this.value.match(/\\[reference\\ id=[\\w]*\\][\\w\\ \\(\\)\\[\\]\\.\\,\\/\\\\\\-_\\+;:\"'?&]*\\[\\/reference\\]/gm);\r\n    this.allReferences = this.value.match(/\\[reference\\ id=[\\w]* type=[\\w]*\\].*\\[\\/reference\\]/gm);\r\n    this.referenceId = this.allReferences?.length || 0;\r\n\r\n    this.fields = {\r\n      title: Stream(''),\r\n      link: Stream(''),\r\n      author: Stream(''),\r\n      createAt: Stream(''),\r\n      siteName: Stream(''),\r\n    };\r\n  }\r\n\r\n  className() {\r\n    return \"\";\r\n  }\r\n\r\n  title() {\r\n    return \"Site web\";\r\n  }\r\n\r\n  content() {\r\n    return [\r\n      m('.Modal-body',\r\n        m('Form.Form--left',\r\n         m('span.description', app.translator.trans('Înregistrarea referințelor bibliografice la publicațiile postate pe Internet.')),\r\n          m('.Form-group',\r\n            m('label', app.translator.trans('Titlul referintei')),\r\n            m('input.FormControl', {\r\n              type: \"text\",\r\n              value: this.fields.title(),\r\n              placeholder: \"ex. Pădurea spânzuraților\",\r\n              required: true,\r\n              oninput: (e) => {\r\n                this.fields.title(e.target.value);\r\n                this.removeRedStyle();\r\n              }\r\n            },\r\n            )\r\n          ),\r\n          m('.Form-group',\r\n            m('label', app.translator.trans('Link')),\r\n            m('input.FormControl', {\r\n              type: \"url\",\r\n              value: this.fields.link(),\r\n              placeholder: \"ex. http://example.com\",\r\n              required: true,\r\n              oninput: (e) => {\r\n                this.fields.link(e.target.value);\r\n                this.fields.siteName(e.target.value?.split('//')[1]?.split('/')[0] || \"\");\r\n                this.removeRedStyle();\r\n              },\r\n            },\r\n            )\r\n          ),\r\n          m('.Form-group',\r\n            m('label', app.translator.trans('Author')),\r\n            m('input.FormControl', {\r\n              type: \"text\",\r\n              placeholder: \"ex. L. Rebreanu\",\r\n              bidi: this.fields.author,\r\n            },\r\n            )\r\n          ),\r\n          m('.Form-group',\r\n            m('label', app.translator.trans('Data plasarii pe site')),\r\n            m('input.FormControl', {\r\n              type: \"text\",\r\n              placeholder: \"ex. 01.01.1970\",\r\n              pattern: \"^(?:(?:31(\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\.)(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\",\r\n              value: this.fields.createAt(),\r\n              oninput: (e) => {\r\n                this.fields.createAt(e.target.value);\r\n                this.removeRedStyle();\r\n              }\r\n            },\r\n            )\r\n          ),\r\n          m('.Form-group',\r\n            m('label', app.translator.trans('Denumirea Web-site')),\r\n            m('input.FormControl', {\r\n              type: \"text\",\r\n              value: this.fields.siteName(),\r\n              placeholder: \"ex. example.com\",\r\n              required: true,\r\n              oninput: (e) => {\r\n                this.fields.siteName(e.target.value);\r\n                this.removeRedStyle();\r\n              },\r\n            },\r\n            )\r\n          ),\r\n          Button.component(\r\n            {\r\n              className: \"Button Button--primary\",\r\n              onclick: () => this.addReference(),\r\n            },\r\n            \"Adaugare\"\r\n          ),\r\n        )\r\n      )\r\n    ];\r\n  }\r\n  \r\n  removeRedStyle() {\r\n    const requiredFields = this.$('input');\r\n\r\n    for (let k = 0; k < requiredFields.length; k++) {\r\n      if (requiredFields[k].validity.valid) {\r\n        requiredFields[k].removeAttribute(\"style\");\r\n      }\r\n    }\r\n  }\r\n\r\n  areSetRequiredFields() {\r\n    const requiredFields = this.$('input');\r\n    let i = 0;\r\n    \r\n    for (let k = 0; k < requiredFields.length; k++) {\r\n      if (!requiredFields[k].validity.valid) {\r\n        requiredFields[k].style.setProperty('border-color', 'red', 'important');\r\n        i++;\r\n      }\r\n    }\r\n\r\n    if (i == 0) return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  addReference() {\r\n    if (!this.areSetRequiredFields()) return;\r\n\r\n    let date = new Date();\r\n    // console.log(flarum.extensions['askvortsov-rich-text']);\r\n    if (flarum.extensions['askvortsov-rich-text']) { // implements for askvortsov-rich-text editor\r\n      app.composer.editor.insertAtCursor(\"[ref id=ref\" + ++this.referenceId + \"]\" + this.referenceId + \"[/ref]\");\r\n\r\n      const position = app.composer.editor.getSelectionRange();\r\n      \r\n      if (this.referenceId == 1) {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.attrs.menuState.editorView.dom.outerText.length + 1);\r\n        app.composer.editor.setEnter();\r\n        app.composer.editor.insertAtCursor(\"Referinte:\");\r\n        app.composer.editor.setEnter();\r\n      } else {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.attrs.menuState.editorView.dom.outerText.length + 1);\r\n        app.composer.editor.setEnter();\r\n      }\r\n\r\n      app.composer.editor.insertAtCursor(\r\n        this.referenceId +\r\n        \". [reference id=ref\" + this.referenceId + \" type=site] \" +\r\n        this.fields.author() +\r\n        ((this.fields.author().length === 0) ? \"\" : \". \") +\r\n        this.fields.title() +\r\n        \". \" +\r\n        this.fields.siteName() +\r\n        ((this.fields.createAt().length === 0) ? \". \" : \", \") +\r\n        this.fields.createAt() +\r\n        ((this.fields.createAt().length === 0) ? \"\" : \". \") +\r\n        \"[citat la \" +\r\n        date.getDate() + \r\n        \".\" + (date.getMonth() + 1) +\r\n        \".\" + date.getFullYear() +\r\n        \"] \" +\r\n        this.fields.link() +\r\n        \" [/reference]\"\r\n      );\r\n\r\n      app.composer.editor.setSelectionRange(position[0], position[1]);\r\n      app.composer.editor.setEnter();\r\n      app.composer.editor.delete();\r\n\r\n      // this.array[0] = \"Alt ceva\"\r\n      // console.log(\"rich-text\");\r\n    } else { // implements for flarum-markdown editor\r\n      console.log(app.composer.editor.el.value);\r\n      console.log(app.composer.fields.content());\r\n      app.composer.editor.insertAtCursor(\"[ref id=ref\" + ++this.referenceId + \"]\" + this.referenceId + \"[/ref]\");\r\n\r\n      const position = app.composer.editor.getSelectionRange();\r\n\r\n      if (this.referenceId == 1) {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.el.value.length + 1);\r\n        // app.composer.editor.setEnter();\r\n        app.composer.editor.insertAtCursor(\"\\n\\nReferinte:\\n\");\r\n        // app.composer.editor.setEnter();\r\n      } else {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.el.value.length + 1);\r\n        app.composer.editor.insertAtCursor(\"\\n\");\r\n        // app.composer.editor.setEnter();\r\n      }\r\n\r\n      app.composer.editor.insertAtCursor(\r\n        \"\\n\" +\r\n        this.referenceId +\r\n        \"\\\\. [reference id=ref\" + this.referenceId + \" type=site] \" +\r\n        this.fields.author() +\r\n        ((this.fields.author().length === 0) ? \"\" : \". \") +\r\n        this.fields.title() +\r\n        \". \" +\r\n        this.fields.siteName() +\r\n        ((this.fields.createAt().length === 0) ? \". \" : \", \") +\r\n        this.fields.createAt() +\r\n        ((this.fields.createAt().length === 0) ? \"\" : \". \") +\r\n        \"[citat la \" +\r\n        date.getDate() + \r\n        \".\" + (date.getMonth() + 1) +\r\n        \".\" + date.getFullYear() +\r\n        \"] \" +\r\n        this.fields.link() +\r\n        \" [/reference]\"\r\n      );\r\n\r\n      app.composer.editor.setSelectionRange(position[0], position[1]);\r\n\r\n      // console.log(\"non rich-text\");\r\n      // app.composer.editor.moveCursorTo(app.composer.fields.content().length + 1);\r\n    }\r\n\r\n    app.modal.close();\r\n  }\r\n}","import Modal from \"flarum/components/Modal\";\r\nimport Button from 'flarum/components/Button';\r\nimport Stream from 'flarum/common/utils/Stream';\r\n\r\nexport default class BookRefModal extends Modal {\r\n  oninit(vnode) {\r\n    super.oninit(vnode);\r\n\r\n    this.value = app.composer.fields.content() || '';\r\n    // this.allReferences = this.value.match(/\\[reference\\ id=[\\w]*\\][\\w\\ \\(\\)\\[\\]\\.\\,\\/\\\\\\-_\\+;:\"'?&]*\\[\\/reference\\]/gm);\r\n    this.allReferences = this.value.match(/\\[reference\\ id=[\\w]* type=[\\w]*\\].*\\[\\/reference\\]/gm);\r\n    this.referenceId = this.allReferences?.length || 0;\r\n\r\n    this.fields = {\r\n      title: Stream(''),\r\n      link: Stream(''),\r\n      author: Stream(''),\r\n      year: Stream(''),\r\n      editura: Stream(''),\r\n    };\r\n  }\r\n\r\n  className() {\r\n    return \"\";\r\n  }\r\n\r\n  title() {\r\n    return \"Carte\";\r\n  }\r\n\r\n  content() {\r\n    return [\r\n      m('.Modal-body',\r\n        m('Form.Form--left',\r\n        m('span.description', app.translator.trans('Realizarea de referințe bibliografice la publicații de carte.')),\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('Link')),\r\n          m('input.FormControl', {\r\n            type: \"url\",\r\n            value: this.fields.link(),\r\n            placeholder: \"ex. http://example.com\",\r\n            oninput: (e) => {\r\n              this.fields.link(e.target.value);\r\n              this.removeRedStyle();\r\n            },\r\n          },\r\n          )\r\n        ),\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('Author')),\r\n          m('input.FormControl', {\r\n            type: \"text\",\r\n            placeholder: \"ex. L. Rebreanu\",\r\n            value: this.fields.author(),\r\n            required: true,\r\n            oninput: (e) => {\r\n              this.fields.author(e.target.value);\r\n              this.removeRedStyle();\r\n            },\r\n          },\r\n          )\r\n        ),\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('Titlul')),\r\n          m('input.FormControl', {\r\n            type: \"text\",\r\n            value: this.fields.title(),\r\n            placeholder: \"ex. Pădurea spânzuraților\",\r\n            required: true,\r\n            oninput: (e) => {\r\n              this.fields.title(e.target.value);\r\n              this.removeRedStyle();\r\n            },\r\n          },\r\n          )\r\n        ),\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('Anul')),\r\n          m('input.FormControl', {\r\n            type: \"text\",\r\n            placeholder: \"ex. 1970\",\r\n            pattern: \"^(?:(?:1[6-9]|[2-9]\\\\d)\\\\d{2})$\",\r\n            value: this.fields.year(),\r\n            oninput: (e) => {\r\n              this.fields.year(e.target.value);\r\n              this.removeRedStyle();\r\n            }\r\n          },\r\n          )\r\n        ),\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('Editura')),\r\n          m('input.FormControl', {\r\n            type: \"text\",\r\n            value: this.fields.editura(),\r\n            placeholder: \"ex. Lumina\",\r\n            oninput: (e) => {\r\n              this.fields.editura(e.target.value);\r\n              this.removeRedStyle();\r\n            }\r\n          },\r\n          )\r\n        ),\r\n          Button.component(\r\n            {\r\n              className: \"Button Button--primary\",\r\n              onclick: () => this.addReference(),\r\n            },\r\n            \"Adaugare\"\r\n          ),\r\n        )\r\n      )\r\n    ];\r\n  }\r\n\r\n  removeRedStyle() {\r\n    const requiredFields = this.$('input');\r\n\r\n    for (let k = 0; k < requiredFields.length; k++) {\r\n      if (requiredFields[k].validity.valid) {\r\n        requiredFields[k].removeAttribute(\"style\");\r\n      }\r\n    }\r\n  }\r\n\r\n  areSetRequiredFields() {\r\n    const requiredFields = this.$('input');\r\n    let i = 0;\r\n    \r\n    for (let k = 0; k < requiredFields.length; k++) {\r\n      if (!requiredFields[k].validity.valid) {\r\n        requiredFields[k].style.setProperty('border-color', 'red', 'important');\r\n        i++;\r\n      }\r\n    }\r\n\r\n    if (i == 0) return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  addReference() {\r\n    if (!this.areSetRequiredFields()) return;\r\n\r\n    let date = new Date();\r\n    // console.log(flarum.extensions['askvortsov-rich-text']);\r\n    if (flarum.extensions['askvortsov-rich-text']) { // implements for askvortsov-rich-text editor\r\n      app.composer.editor.insertAtCursor(\"[ref id=ref\" + ++this.referenceId + \"]\" + this.referenceId + \"[/ref]\");\r\n\r\n      const position = app.composer.editor.getSelectionRange();\r\n      \r\n      if (this.referenceId == 1) {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.attrs.menuState.editorView.dom.outerText.length + 1);\r\n        app.composer.editor.setEnter();\r\n        app.composer.editor.insertAtCursor(\"Referinte:\");\r\n        app.composer.editor.setEnter();\r\n      } else {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.attrs.menuState.editorView.dom.outerText.length + 1);\r\n        app.composer.editor.setEnter();\r\n      }\r\n\r\n      app.composer.editor.insertAtCursor(\r\n        this.referenceId +\r\n        \". [reference id=ref\" + this.referenceId + \" type=book] \" +\r\n        this.fields.author() +\r\n        \". \" +\r\n        this.fields.title() +\r\n        \". \" +\r\n        this.fields.editura() +\r\n        ((this.fields.editura().length === 0) ? \"\" : (this.fields.year().length === 0) ? \"\" : \", \") +\r\n        this.fields.year() +\r\n        ((this.fields.year().length === 0) ? \" \" : \". \") +\r\n        \"[citat la \" +\r\n        date.getDate() + \r\n        \".\" + (date.getMonth() + 1) +\r\n        \".\" + date.getFullYear() +\r\n        \"] \" +\r\n        this.fields.link() +\r\n        ((this.fields.link().length === 0) ? \"[/reference]\" : \" [/reference]\")\r\n      );\r\n\r\n      app.composer.editor.setSelectionRange(position[0], position[1]);\r\n      app.composer.editor.setEnter();\r\n      app.composer.editor.delete();\r\n\r\n      // this.array[0] = \"Alt ceva\"\r\n      // console.log(\"rich-text\");\r\n    } else { // implements for flarum-markdown editor\r\n      console.log(app.composer.editor.el.value);\r\n      console.log(app.composer.fields.content());\r\n      app.composer.editor.insertAtCursor(\"[ref id=ref\" + ++this.referenceId + \"]\" + this.referenceId + \"[/ref]\");\r\n\r\n      const position = app.composer.editor.getSelectionRange();\r\n\r\n      if (this.referenceId == 1) {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.el.value.length + 1);\r\n        // app.composer.editor.setEnter();\r\n        app.composer.editor.insertAtCursor(\"\\n\\nReferinte:\\n\");\r\n        // app.composer.editor.setEnter();\r\n      } else {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.el.value.length + 1);\r\n        app.composer.editor.insertAtCursor(\"\\n\");\r\n        // app.composer.editor.setEnter();\r\n      }\r\n\r\n      app.composer.editor.insertAtCursor(\r\n        \"\\n\" +\r\n        this.referenceId +\r\n        \"\\\\. [reference id=ref\" + this.referenceId + \" type=book] \" +\r\n        this.fields.author() +\r\n        \". \" +\r\n        this.fields.title() +\r\n        \". \" +\r\n        this.fields.editura() +\r\n        ((this.fields.editura().length === 0) ? \"\" : (this.fields.year().length === 0) ? \"\" : \", \") +\r\n        this.fields.year() +\r\n        ((this.fields.year().length === 0) ? \" \" : \". \") +\r\n        \"[citat la \" +\r\n        date.getDate() + \r\n        \".\" + (date.getMonth() + 1) +\r\n        \".\" + date.getFullYear() +\r\n        \"] \" +\r\n        this.fields.link() +\r\n        ((this.fields.link().length === 0) ? \"[/reference]\" : \" [/reference]\")\r\n      );\r\n\r\n      app.composer.editor.setSelectionRange(position[0], position[1]);\r\n\r\n      // console.log(\"non rich-text\");\r\n      // app.composer.editor.moveCursorTo(app.composer.fields.content().length + 1);\r\n    }\r\n\r\n    app.modal.close();\r\n  }\r\n}","import Modal from \"flarum/components/Modal\";\r\nimport Button from 'flarum/components/Button';\r\nimport Stream from 'flarum/common/utils/Stream';\r\n\r\nexport default class NewsRefModal extends Modal {\r\n  oninit(vnode) {\r\n    super.oninit(vnode);\r\n\r\n    this.value = app.composer.fields.content() || '';\r\n    // this.allReferences = this.value.match(/\\[reference\\ id=[\\w]*\\][\\w\\ \\(\\)\\[\\]\\.\\,\\/\\\\\\-_\\+;:\"'?&]*\\[\\/reference\\]/gm);\r\n    this.allReferences = this.value.match(/\\[reference\\ id=[\\w]* type=[\\w]*\\].*\\[\\/reference\\]/gm);\r\n    this.referenceId = this.allReferences?.length || 0;\r\n\r\n    this.fields = {\r\n      title: Stream(''),\r\n      link: Stream(''),\r\n      author: Stream(''),\r\n      createAt: Stream(''),\r\n      siteName: Stream(''),\r\n    };\r\n  }\r\n\r\n  className() {\r\n    return \"\";\r\n  }\r\n\r\n  title() {\r\n    return \"Stire\";\r\n  }\r\n\r\n  content() {\r\n    return [\r\n      m('.Modal-body',\r\n        m('Form.Form--left',\r\n        m('span.description', app.translator.trans('Crearea de link-uri către știri surse de informații.')),\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('Titlul')),\r\n          m('input.FormControl', {\r\n            type: \"text\",\r\n            value: this.fields.title(),\r\n            placeholder: \"ex. Pădurea spânzuraților\",\r\n            required: true,\r\n            oninput: (e) => {\r\n              this.fields.title(e.target.value);\r\n              this.removeRedStyle();\r\n            },\r\n          },\r\n          )\r\n        ),\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('Author')),\r\n          m('input.FormControl', {\r\n            type: \"text\",\r\n            placeholder: \"ex. L. Rebreanu\",\r\n            bidi: this.fields.author,\r\n          },\r\n          )\r\n        ),\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('URL Link')),\r\n          m('input.FormControl', {\r\n            type: \"url\",\r\n            value: this.fields.link(),\r\n            placeholder: \"ex. http://example.com\",\r\n            required: true,\r\n            oninput: (e) => {\r\n              this.fields.link(e.target.value);\r\n              this.fields.siteName(e.target.value?.split('//')[1]?.split('/')[0] || \"\");\r\n              this.removeRedStyle();\r\n            },\r\n          },\r\n          )\r\n        ),\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('Denumirea sursei')),\r\n          m('input.FormControl', {\r\n            type: \"text\",\r\n            value: this.fields.siteName(),\r\n            placeholder: \"ex. example.com\",\r\n            required: true,\r\n            oninput: (e) => {\r\n              this.fields.siteName(e.target.value);\r\n              this.removeRedStyle();\r\n            },\r\n          },\r\n          )\r\n        ),\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('Data publicării')),\r\n          m('input.FormControl', {\r\n            type: \"text\",\r\n            placeholder: \"ex. 01.01.1970\",\r\n            pattern: \"^(?:(?:31(\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\.)(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\",\r\n            value: this.fields.createAt(),\r\n            oninput: (e) => {\r\n              this.fields.createAt(e.target.value);\r\n              this.removeRedStyle();\r\n            }\r\n          },\r\n          )\r\n        ),\r\n          Button.component(\r\n            {\r\n              className: \"Button Button--primary\",\r\n              onclick: () => this.addReference(),\r\n            },\r\n            \"Adaugare\"\r\n          ),\r\n        )\r\n      )\r\n    ];\r\n  }\r\n\r\n  removeRedStyle() {\r\n    const requiredFields = this.$('input');\r\n\r\n    for (let k = 0; k < requiredFields.length; k++) {\r\n      if (requiredFields[k].validity.valid) {\r\n        requiredFields[k].removeAttribute(\"style\");\r\n      }\r\n    }\r\n  }\r\n\r\n  areSetRequiredFields() {\r\n    const requiredFields = this.$('input');\r\n    let i = 0;\r\n    \r\n    for (let k = 0; k < requiredFields.length; k++) {\r\n      if (!requiredFields[k].validity.valid) {\r\n        requiredFields[k].style.setProperty('border-color', 'red', 'important');\r\n        i++;\r\n      }\r\n    }\r\n\r\n    if (i == 0) return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  addReference() {\r\n    if (!this.areSetRequiredFields()) return;\r\n    \r\n    let date = new Date();\r\n    // console.log(flarum.extensions['askvortsov-rich-text']);\r\n    if (flarum.extensions['askvortsov-rich-text']) { // implements for askvortsov-rich-text editor\r\n      app.composer.editor.insertAtCursor(\"[ref id=ref\" + ++this.referenceId + \"]\" + this.referenceId + \"[/ref]\");\r\n\r\n      const position = app.composer.editor.getSelectionRange();\r\n      \r\n      if (this.referenceId == 1) {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.attrs.menuState.editorView.dom.outerText.length + 1);\r\n        app.composer.editor.setEnter();\r\n        app.composer.editor.insertAtCursor(\"Referinte:\");\r\n        app.composer.editor.setEnter();\r\n      } else {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.attrs.menuState.editorView.dom.outerText.length + 1);\r\n        app.composer.editor.setEnter();\r\n      }\r\n\r\n      app.composer.editor.insertAtCursor(\r\n        this.referenceId +\r\n        \". [reference id=ref\" + this.referenceId + \" type=news] \" +\r\n        this.fields.author() +\r\n        ((this.fields.author().length === 0) ? \"\" : \". \") +\r\n        this.fields.title() +\r\n        \". \" +\r\n        this.fields.siteName() +\r\n        ((this.fields.createAt().length === 0) ? \". \" : \", \") +\r\n        this.fields.createAt() +\r\n        ((this.fields.createAt().length === 0) ? \"\" : \". \") +\r\n        \"[citat la \" +\r\n        date.getDate() + \r\n        \".\" + (date.getMonth() + 1) +\r\n        \".\" + date.getFullYear() +\r\n        \"] \" +\r\n        this.fields.link() +\r\n        \" [/reference]\"\r\n      );\r\n\r\n      app.composer.editor.setSelectionRange(position[0], position[1]);\r\n      app.composer.editor.setEnter();\r\n      app.composer.editor.delete();\r\n\r\n      // this.array[0] = \"Alt ceva\"\r\n      // console.log(\"rich-text\");\r\n    } else { // implements for flarum-markdown editor\r\n      console.log(app.composer.editor.el.value);\r\n      console.log(app.composer.fields.content());\r\n      app.composer.editor.insertAtCursor(\"[ref id=ref\" + ++this.referenceId + \"]\" + this.referenceId + \"[/ref]\");\r\n\r\n      const position = app.composer.editor.getSelectionRange();\r\n\r\n      if (this.referenceId == 1) {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.el.value.length + 1);\r\n        // app.composer.editor.setEnter();\r\n        app.composer.editor.insertAtCursor(\"\\n\\nReferinte:\\n\");\r\n        // app.composer.editor.setEnter();\r\n      } else {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.el.value.length + 1);\r\n        app.composer.editor.insertAtCursor(\"\\n\");\r\n        // app.composer.editor.setEnter();\r\n      }\r\n\r\n      app.composer.editor.insertAtCursor(\r\n        \"\\n\" +\r\n        this.referenceId +\r\n        \"\\\\. [reference id=ref\" + this.referenceId + \" type=news] \" +\r\n        this.fields.author() +\r\n        ((this.fields.author().length === 0) ? \"\" : \". \") +\r\n        this.fields.title() +\r\n        \". \" +\r\n        this.fields.siteName() +\r\n        ((this.fields.createAt().length === 0) ? \". \" : \", \") +\r\n        this.fields.createAt() +\r\n        ((this.fields.createAt().length === 0) ? \"\" : \". \") +\r\n        \"[citat la \" +\r\n        date.getDate() + \r\n        \".\" + (date.getMonth() + 1) +\r\n        \".\" + date.getFullYear() +\r\n        \"] \" +\r\n        this.fields.link() +\r\n        \" [/reference]\"\r\n      );\r\n\r\n      app.composer.editor.setSelectionRange(position[0], position[1]);\r\n\r\n      // console.log(\"non rich-text\");\r\n      // app.composer.editor.moveCursorTo(app.composer.fields.content().length + 1);\r\n    }\r\n\r\n    app.modal.close();\r\n  }\r\n}","import Modal from \"flarum/components/Modal\";\r\nimport Button from 'flarum/components/Button';\r\nimport Stream from 'flarum/common/utils/Stream';\r\n\r\nexport default class JournalRefModal extends Modal {\r\n  oninit(vnode) {\r\n    super.oninit(vnode);\r\n\r\n    this.value = app.composer.fields.content() || '';\r\n    // this.allReferences = this.value.match(/\\[reference\\ id=[\\w]*\\][\\w\\ \\(\\)\\[\\]\\.\\,\\/\\\\\\-_\\+;:\"'?&]*\\[\\/reference\\]/gm);\r\n    this.allReferences = this.value.match(/\\[reference\\ id=[\\w]* type=[\\w]*\\].*\\[\\/reference\\]/gm);\r\n    this.referenceId = this.allReferences?.length || 0;\r\n\r\n    this.fields = {\r\n      title: Stream(''),\r\n      author: Stream(''),\r\n    };\r\n  }\r\n\r\n  className() {\r\n    return \"\";\r\n  }\r\n\r\n  title() {\r\n    return \"Jurnal\";\r\n  }\r\n\r\n  content() {\r\n    return [\r\n      m('.Modal-body',\r\n        m('Form.Form--left',\r\n        // m('span.description', app.translator.trans('Model pentru plasarea referințelor bibliografice la articole din reviste și periodice.')),\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('Titlul')),\r\n          m('input.FormControl', {\r\n            type: \"text\",\r\n            value: this.fields.title(),\r\n            placeholder: \"ex. Pădurea spânzuraților\",\r\n            required: true,\r\n            oninput: (e) => {\r\n              this.fields.title(e.target.value);\r\n              this.removeRedStyle();\r\n            },\r\n          },\r\n          )\r\n        ),\r\n        m('.Form-group',\r\n          m('label', app.translator.trans('Author')),\r\n          m('input.FormControl', {\r\n            type: \"text\",\r\n            placeholder: \"ex. L. Rebreanu\",\r\n            bidi: this.fields.author,\r\n          },\r\n          )\r\n        ),\r\n          Button.component(\r\n            {\r\n              className: \"Button Button--primary\",\r\n              onclick: () => this.addReference(),\r\n            },\r\n            \"Adaugare\"\r\n          ),\r\n        )\r\n      )\r\n    ];\r\n  }\r\n\r\n  removeRedStyle() {\r\n    const requiredFields = this.$('input');\r\n\r\n    for (let k = 0; k < requiredFields.length; k++) {\r\n      if (requiredFields[k].validity.valid) {\r\n        requiredFields[k].removeAttribute(\"style\");\r\n      }\r\n    }\r\n  }\r\n\r\n  areSetRequiredFields() {\r\n    const requiredFields = this.$('input');\r\n    let i = 0;\r\n    \r\n    for (let k = 0; k < requiredFields.length; k++) {\r\n      if (!requiredFields[k].validity.valid) {\r\n        requiredFields[k].style.setProperty('border-color', 'red', 'important');\r\n        i++;\r\n      }\r\n    }\r\n\r\n    if (i == 0) return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  addReference() {\r\n    if (!this.areSetRequiredFields()) return;\r\n\r\n    let date = new Date();\r\n    // console.log(flarum.extensions['askvortsov-rich-text']);\r\n    if (flarum.extensions['askvortsov-rich-text']) { // implements for askvortsov-rich-text editor\r\n      app.composer.editor.insertAtCursor(\"[ref id=ref\" + ++this.referenceId + \"]\" + this.referenceId + \"[/ref]\");\r\n\r\n      const position = app.composer.editor.getSelectionRange();\r\n      \r\n      if (this.referenceId == 1) {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.attrs.menuState.editorView.dom.outerText.length + 1);\r\n        app.composer.editor.setEnter();\r\n        app.composer.editor.insertAtCursor(\"Referinte:\");\r\n        app.composer.editor.setEnter();\r\n      } else {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.attrs.menuState.editorView.dom.outerText.length + 1);\r\n        app.composer.editor.setEnter();\r\n      }\r\n\r\n      app.composer.editor.insertAtCursor(\r\n        this.referenceId +\r\n        \". [reference id=ref\" + this.referenceId + \" type=journal] \" +\r\n        this.fields.author() +\r\n        ((this.fields.author().length === 0) ? \"\" : \". \") +\r\n        this.fields.title() +\r\n        \". \" +\r\n        \"[citat la \" +\r\n        date.getDate() + \r\n        \".\" + (date.getMonth() + 1) +\r\n        \".\" + date.getFullYear() +\r\n        \"] \" +\r\n        \"[/reference]\"\r\n      );\r\n\r\n      app.composer.editor.setSelectionRange(position[0], position[1]);\r\n      app.composer.editor.setEnter();\r\n      app.composer.editor.delete();\r\n\r\n      // this.array[0] = \"Alt ceva\"\r\n      // console.log(\"rich-text\");\r\n    } else { // implements for flarum-markdown editor\r\n      console.log(app.composer.editor.el.value);\r\n      console.log(app.composer.fields.content());\r\n      app.composer.editor.insertAtCursor(\"[ref id=ref\" + ++this.referenceId + \"]\" + this.referenceId + \"[/ref]\");\r\n\r\n      const position = app.composer.editor.getSelectionRange();\r\n\r\n      if (this.referenceId == 1) {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.el.value.length + 1);\r\n        // app.composer.editor.setEnter();\r\n        app.composer.editor.insertAtCursor(\"\\n\\nReferinte:\\n\");\r\n        // app.composer.editor.setEnter();\r\n      } else {\r\n        app.composer.editor.moveCursorTo(app.composer.editor.el.value.length + 1);\r\n        app.composer.editor.insertAtCursor(\"\\n\");\r\n        // app.composer.editor.setEnter();\r\n      }\r\n\r\n      app.composer.editor.insertAtCursor(\r\n        \"\\n\" +\r\n        this.referenceId +\r\n        \"\\\\. [reference id=ref\" + this.referenceId + \" type=journal] \" +\r\n        this.fields.author() +\r\n        ((this.fields.author().length === 0) ? \"\" : \". \") +\r\n        this.fields.title() +\r\n        \". \" +\r\n        \"[citat la \" +\r\n        date.getDate() + \r\n        \".\" + (date.getMonth() + 1) +\r\n        \".\" + date.getFullYear() +\r\n        \"] \" +\r\n        \"[/reference]\"\r\n      );\r\n\r\n      app.composer.editor.setSelectionRange(position[0], position[1]);\r\n\r\n      // console.log(\"non rich-text\");\r\n      // app.composer.editor.moveCursorTo(app.composer.fields.content().length + 1);\r\n    }\r\n\r\n    app.modal.close();\r\n  }\r\n}","import Modal from \"flarum/components/Modal\";\r\n\r\nimport DefaultRefModal from './DefaultRefModal';\r\nimport SiteRefModal from './SiteRefModal';\r\nimport BookRefModal from './BookRefModal';\r\nimport NewsRefModal from './NewsRefModal';\r\nimport JournalRefModal from './JournalRefModal';\r\n\r\nexport default class ReferencesModal extends Modal {\r\n  oninit(vnode) {\r\n    super.oninit(vnode);\r\n  }\r\n\r\n  className() {\r\n    return \"DiscussionType\";\r\n  }\r\n\r\n  title() {\r\n    return \"Selectare tip referinta\";\r\n  }\r\n\r\n  content() {\r\n    return [\r\n      m('.Modal-body',\r\n        m('.Form.Form--centered div_referinta',\r\n          m('.Form-group',\r\n            m('.choiceBox', {\r\n              onclick: () => app.modal.show(SiteRefModal),\r\n            },\r\n              (<i class=\"icon fas fa-window-maximize Button-icon\"></i>),\r\n              m('span', app.translator.trans('Site web')),\r\n              /* m('p', app.translator.trans('Site web')) */\r\n            )\r\n          ),\r\n          m('.Form-group',\r\n            m('.choiceBox', {\r\n              onclick: () => app.modal.show(BookRefModal),\r\n            },\r\n              (<i class=\"icon fas fa-book Button-icon\"></i>),\r\n              m('span', app.translator.trans('Carte')),\r\n              /* m('p', app.translator.trans('Carte')) */\r\n            )\r\n          ),\r\n          m('.Form-group',\r\n            m('.choiceBox', {\r\n              onclick: () => app.modal.show(NewsRefModal),\r\n            },\r\n              (<i class=\"icon fas fa-newspaper Button-icon\"></i>),\r\n              m('span', app.translator.trans('Stire')),\r\n              /* m('p', app.translator.trans('Stire')) */\r\n            )\r\n          ),\r\n          m('.Form-group',\r\n            m('.choiceBox', {\r\n              onclick: () => app.modal.show(JournalRefModal),\r\n            },\r\n              (<i class=\"icon fas fa-book-open Button-icon\"></i>),\r\n              m('span', app.translator.trans('Jurnal')),\r\n              /* m('p', app.translator.trans('Jurnal')) */\r\n            )\r\n          ),\r\n          m('.Form-group',\r\n            m('.choiceBox', {\r\n              onclick: () => app.modal.show(DefaultRefModal),\r\n            },\r\n              (<i class=\"icon fas fa-bookmark Button-icon\"></i>),\r\n              m('span', app.translator.trans('De baza')),\r\n              /* m('p', app.translator.trans('De baza')) */\r\n            )\r\n          ),\r\n        )\r\n      )\r\n    ];\r\n  }\r\n}","import {extend} from 'flarum/common/extend';\r\nimport { baseKeymap } from 'tiptap-commands';\r\nimport app from 'flarum/app';\r\nimport InsertReferenceDropdown from './InsertReferenceDropdown';\r\nimport TextEditorButton from 'flarum/components/TextEditorButton';\r\nimport TextEditor from 'flarum/common/components/TextEditor';\r\nimport CommentPost from 'flarum/forum/components/CommentPost';\r\nimport ComposerBody from 'flarum/components/ComposerBody';\r\nimport Button from 'flarum/components/Button';\r\nimport Tooltip from 'flarum/common/components/Tooltip';\r\nimport ItemList from 'flarum/common/utils/ItemList';\r\nimport listItems from 'flarum/common/helpers/listItems';\r\n\r\nimport ReferencesModal from './components/ReferencesModal';\r\n\r\napp.initializers.add('aradeid/flarum-references', () => {\r\n  // adaugarea metodei pentru simularea tastei enter in rich-text\r\n  if (flarum.extensions['askvortsov-rich-text']) {\r\n    const {\r\n      ProseMirrorEditorDriver\r\n    } = flarum.extensions['askvortsov-rich-text'].proseMirror;\r\n\r\n    ProseMirrorEditorDriver.prototype.setEnter = function() {\r\n      // console.log(this.view.state);\r\n      baseKeymap['Enter'](this.view.state, this.view.dispatch);\r\n      // baseKeymap['Enter'];\r\n    }\r\n    ProseMirrorEditorDriver.prototype.delete = function() {\r\n      // console.log(\"sters\");\r\n      baseKeymap['Backspace'](this.view.state, this.view.dispatch);\r\n    }\r\n  }\r\n  // console.log(app.composer.editor);\r\n\r\n  // adaugarea butonului pentru referinte in Editor la optiuni\r\n  extend(TextEditor.prototype, 'toolbarItems', function (items) {\r\n    // console.log(app.composer.editor);\r\n    // by Aradeid\r\n    //() => this.attrs.composer.editor.insertAtCursor(' :')\r\n    /*items.add(\r\n      'addReference',\r\n      (\r\n        <TextEditorButton onclick={addReference.bind(this)} icon=\"fas fa-paper-plane\">\r\n          {app.translator.trans('flarum-references.forum.composer.addReferenceButton')}\r\n        </TextEditorButton>\r\n      )\r\n    );*/\r\n    \r\n    // items.add(\r\n    //   'link',\r\n    //   InsertReferenceDropdown.component({\r\n    //     type: 'link',\r\n    //     icon: 'fas fa-link',\r\n    //     tooltip: app.translator.trans('flarum-references.forum.composer.addReferenceButton'),\r\n    //     state: this.attrs.state,\r\n    //   }),\r\n    //   50\r\n    // );\r\n\r\n    // console.log(this.attrs.composer.fields.content());\r\n    // by BlockCat\r\n    items.add(\r\n      'references',\r\n      Tooltip.component(\r\n        {\r\n          text: \"Referinta\",\r\n        },\r\n        Button.component(\r\n          {\r\n            className: 'Button Button--icon Button--link',\r\n            icon: 'fas fa-link',\r\n            onclick: () => app.modal.show(ReferencesModal),\r\n          },\r\n        ),\r\n      ),\r\n    );\r\n    return items;\r\n  });\r\n\r\n  // adaugarea butonului pentru referinte in Editor in partea dreapta (portlet-ui)\r\n  ComposerBody.prototype.sidebarMenu = function () {\r\n    const items = new ItemList();\r\n\r\n    items.add(\r\n      'reference_button',\r\n      Button.component(\r\n          {\r\n              // icon: 'fas fa-pencil-alt',\r\n              className: 'Button Button--secondary',\r\n              onclick: () => app.modal.show(ReferencesModal),\r\n          },\r\n          \"Referinte\"),\r\n    );\r\n\r\n    return items;\r\n  }\r\n\r\n  extend(ComposerBody.prototype, 'view', function (view) {\r\n    view.children[0].children[1].children.push(<ul className=\"sidebarMenu\">{listItems(this.sidebarMenu().toArray())}</ul>);\r\n  });\r\n\r\n  // Implementarea accesarii link-urilor interne in articole si comentarii\r\n  // by BlockCat\r\n  extend(CommentPost.prototype, ['oncreate', 'onupdate'], function () {\r\n    const baseUrl = app.forum.attribute('baseUrl');\r\n    const postBody = this.element.querySelector('.Post-body');\r\n    const elements = postBody.querySelectorAll('a');\r\n\r\n    for (const link of elements) {\r\n      if (link.classList.contains('PostMention')) {\r\n          continue;\r\n      }\r\n\r\n      const href = link.href;\r\n      \r\n      if (!href.startsWith(baseUrl)) {\r\n        continue;\r\n      }\r\n      \r\n      const path = href.replace(baseUrl, '');\r\n      const elements = path.split('/');\r\n      const isFile = elements[elements.length-1].match(/(.*)\\.(.*)/i);\r\n      \r\n      if (isFile) {\r\n        continue;\r\n      }\r\n      \r\n      const separateId = elements[elements.length-1].split('#');\r\n      const referenceId = separateId[separateId.length - 1];\r\n\r\n      link.addEventListener('click', function (e) {\r\n          e.preventDefault();\r\n\r\n          var reference = document.getElementById(referenceId);\r\n          reference?.scrollIntoView({behavior: 'smooth'});\r\n      });\r\n    }\r\n  });\r\n}, -21);\r\n\r\n// by Aradeid\r\n// function addReference() {\r\n//   styleSelectedText(app.composer.editor.el, \r\n//     //{ prefix: '![', suffix: '](https://)', replaceNext: 'https://', scanFor: 'https?://' }\r\n//     { prefix: '[ref][', suffix: '](https://insertLinkHere)[/ref]' }\r\n//   );\r\n// }"],"sourceRoot":""}